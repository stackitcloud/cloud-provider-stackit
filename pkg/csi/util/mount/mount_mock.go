// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/util/mount (interfaces: IMount)
//
// Generated by this command:
//
//	mockgen -destination ./pkg/util/mount/mount_mock.go -package mount ./pkg/util/mount IMount
//

// Package mount is a generated GoMock package.
package mount

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	mount0 "k8s.io/mount-utils"
)

// MockIMount is a mock of IMount interface.
type MockIMount struct {
	ctrl     *gomock.Controller
	recorder *MockIMountMockRecorder
	isgomock struct{}
}

// MockIMountMockRecorder is the mock recorder for MockIMount.
type MockIMountMockRecorder struct {
	mock *MockIMount
}

// NewMockIMount creates a new mock instance.
func NewMockIMount(ctrl *gomock.Controller) *MockIMount {
	mock := &MockIMount{ctrl: ctrl}
	mock.recorder = &MockIMountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMount) EXPECT() *MockIMountMockRecorder {
	return m.recorder
}

// GetDevicePath mocks base method.
func (m *MockIMount) GetDevicePath(volumeID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicePath", volumeID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevicePath indicates an expected call of GetDevicePath.
func (mr *MockIMountMockRecorder) GetDevicePath(volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicePath", reflect.TypeOf((*MockIMount)(nil).GetDevicePath), volumeID)
}

// GetDeviceStats mocks base method.
func (m *MockIMount) GetDeviceStats(path string) (*DeviceStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceStats", path)
	ret0, _ := ret[0].(*DeviceStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceStats indicates an expected call of GetDeviceStats.
func (mr *MockIMountMockRecorder) GetDeviceStats(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceStats", reflect.TypeOf((*MockIMount)(nil).GetDeviceStats), path)
}

// GetMountFs mocks base method.
func (m *MockIMount) GetMountFs(path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMountFs", path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMountFs indicates an expected call of GetMountFs.
func (mr *MockIMountMockRecorder) GetMountFs(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMountFs", reflect.TypeOf((*MockIMount)(nil).GetMountFs), path)
}

// IsLikelyNotMountPointAttach mocks base method.
func (m *MockIMount) IsLikelyNotMountPointAttach(targetpath string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLikelyNotMountPointAttach", targetpath)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLikelyNotMountPointAttach indicates an expected call of IsLikelyNotMountPointAttach.
func (mr *MockIMountMockRecorder) IsLikelyNotMountPointAttach(targetpath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLikelyNotMountPointAttach", reflect.TypeOf((*MockIMount)(nil).IsLikelyNotMountPointAttach), targetpath)
}

// MakeDir mocks base method.
func (m *MockIMount) MakeDir(pathname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDir", pathname)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeDir indicates an expected call of MakeDir.
func (mr *MockIMountMockRecorder) MakeDir(pathname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDir", reflect.TypeOf((*MockIMount)(nil).MakeDir), pathname)
}

// MakeFile mocks base method.
func (m *MockIMount) MakeFile(pathname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeFile", pathname)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeFile indicates an expected call of MakeFile.
func (mr *MockIMountMockRecorder) MakeFile(pathname any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeFile", reflect.TypeOf((*MockIMount)(nil).MakeFile), pathname)
}

// Mounter mocks base method.
func (m *MockIMount) Mounter() *mount0.SafeFormatAndMount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mounter")
	ret0, _ := ret[0].(*mount0.SafeFormatAndMount)
	return ret0
}

// Mounter indicates an expected call of Mounter.
func (mr *MockIMountMockRecorder) Mounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mounter", reflect.TypeOf((*MockIMount)(nil).Mounter))
}

// ScanForAttach mocks base method.
func (m *MockIMount) ScanForAttach(devicePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanForAttach", devicePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScanForAttach indicates an expected call of ScanForAttach.
func (mr *MockIMountMockRecorder) ScanForAttach(devicePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanForAttach", reflect.TypeOf((*MockIMount)(nil).ScanForAttach), devicePath)
}

// UnmountPath mocks base method.
func (m *MockIMount) UnmountPath(mountPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountPath", mountPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountPath indicates an expected call of UnmountPath.
func (mr *MockIMountMockRecorder) UnmountPath(mountPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountPath", reflect.TypeOf((*MockIMount)(nil).UnmountPath), mountPath)
}
