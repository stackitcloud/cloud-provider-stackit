// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackitcloud/cloud-provider-stackit/pkg/lbapi (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -destination=mocks.go -package lbapi github.com/stackitcloud/cloud-provider-stackit/pkg/lbapi Client
//
// Package lbapi is a generated GoMock package.
package lbapi

import (
	context "context"
	reflect "reflect"

	loadbalancer "github.com/stackitcloud/stackit-sdk-go/services/loadbalancer"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateLoadBalancer mocks base method.
func (m *MockClient) CreateLoadBalancer(arg0 context.Context, arg1 string, arg2 *loadbalancer.CreateLoadBalancerPayload) (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockClientMockRecorder) CreateLoadBalancer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockClient)(nil).CreateLoadBalancer), arg0, arg1, arg2)
}

// DeleteLoadBalancer mocks base method.
func (m *MockClient) DeleteLoadBalancer(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockClientMockRecorder) DeleteLoadBalancer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockClient)(nil).DeleteLoadBalancer), arg0, arg1, arg2)
}

// EnableService mocks base method.
func (m *MockClient) EnableService(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableService", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableService indicates an expected call of EnableService.
func (mr *MockClientMockRecorder) EnableService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableService", reflect.TypeOf((*MockClient)(nil).EnableService), arg0, arg1)
}

// GetLoadBalancer mocks base method.
func (m *MockClient) GetLoadBalancer(arg0 context.Context, arg1, arg2 string) (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", arg0, arg1, arg2)
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockClientMockRecorder) GetLoadBalancer(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockClient)(nil).GetLoadBalancer), arg0, arg1, arg2)
}

// GetServiceStatus mocks base method.
func (m *MockClient) GetServiceStatus(arg0 context.Context, arg1 string) (ProjectStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceStatus", arg0, arg1)
	ret0, _ := ret[0].(ProjectStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceStatus indicates an expected call of GetServiceStatus.
func (mr *MockClientMockRecorder) GetServiceStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceStatus", reflect.TypeOf((*MockClient)(nil).GetServiceStatus), arg0, arg1)
}

// UpdateLoadBalancer mocks base method.
func (m *MockClient) UpdateLoadBalancer(arg0 context.Context, arg1, arg2 string, arg3 *loadbalancer.UpdateLoadBalancerPayload) (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancer indicates an expected call of UpdateLoadBalancer.
func (mr *MockClientMockRecorder) UpdateLoadBalancer(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancer", reflect.TypeOf((*MockClient)(nil).UpdateLoadBalancer), arg0, arg1, arg2, arg3)
}

// UpdateTargetPool mocks base method.
func (m *MockClient) UpdateTargetPool(arg0 context.Context, arg1, arg2, arg3 string, arg4 loadbalancer.UpdateTargetPoolPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetPool", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTargetPool indicates an expected call of UpdateTargetPool.
func (mr *MockClientMockRecorder) UpdateTargetPool(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetPool", reflect.TypeOf((*MockClient)(nil).UpdateTargetPool), arg0, arg1, arg2, arg3, arg4)
}
