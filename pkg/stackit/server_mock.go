// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/stackit (interfaces: NodeClient)
//
// Generated by this command:
//
//	mockgen -destination ./pkg/stackit/server_mock.go -package stackit ./pkg/stackit NodeClient
//

// Package stackit is a generated GoMock package.
package stackit

import (
	context "context"
	reflect "reflect"

	iaas "github.com/stackitcloud/stackit-sdk-go/services/iaas"
	gomock "go.uber.org/mock/gomock"
)

// MockNodeClient is a mock of NodeClient interface.
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeClientMockRecorder
	isgomock struct{}
}

// MockNodeClientMockRecorder is the mock recorder for MockNodeClient.
type MockNodeClientMockRecorder struct {
	mock *MockNodeClient
}

// NewMockNodeClient creates a new mock instance.
func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &MockNodeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeClient) EXPECT() *MockNodeClientMockRecorder {
	return m.recorder
}

// CreateServer mocks base method.
func (m *MockNodeClient) CreateServer(ctx context.Context, projectID string, create *iaas.CreateServerPayload) (*iaas.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, projectID, create)
	ret0, _ := ret[0].(*iaas.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockNodeClientMockRecorder) CreateServer(ctx, projectID, create any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockNodeClient)(nil).CreateServer), ctx, projectID, create)
}

// DeleteServer mocks base method.
func (m *MockNodeClient) DeleteServer(ctx context.Context, projectID, serverID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", ctx, projectID, serverID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockNodeClientMockRecorder) DeleteServer(ctx, projectID, serverID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockNodeClient)(nil).DeleteServer), ctx, projectID, serverID)
}

// GetServer mocks base method.
func (m *MockNodeClient) GetServer(ctx context.Context, projectID, serverID string) (*iaas.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", ctx, projectID, serverID)
	ret0, _ := ret[0].(*iaas.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockNodeClientMockRecorder) GetServer(ctx, projectID, serverID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockNodeClient)(nil).GetServer), ctx, projectID, serverID)
}

// ListServers mocks base method.
func (m *MockNodeClient) ListServers(ctx context.Context, projectID string) (*[]iaas.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServers", ctx, projectID)
	ret0, _ := ret[0].(*[]iaas.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServers indicates an expected call of ListServers.
func (mr *MockNodeClientMockRecorder) ListServers(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockNodeClient)(nil).ListServers), ctx, projectID)
}

// UpdateServer mocks base method.
func (m *MockNodeClient) UpdateServer(ctx context.Context, projectID, serverID string, update *iaas.UpdateServerPayload) (*iaas.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", ctx, projectID, serverID, update)
	ret0, _ := ret[0].(*iaas.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockNodeClientMockRecorder) UpdateServer(ctx, projectID, serverID, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockNodeClient)(nil).UpdateServer), ctx, projectID, serverID, update)
}
