// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/stackit (interfaces: IaasClient)
//
// Generated by this command:
//
//	mockgen -destination ./pkg/stackit/iaas_mock.go -package stackit ./pkg/stackit IaasClient
//

// Package stackit is a generated GoMock package.
package stackit

import (
	context "context"
	reflect "reflect"

	iaas "github.com/stackitcloud/stackit-sdk-go/services/iaas"
	gomock "go.uber.org/mock/gomock"
	wait "k8s.io/apimachinery/pkg/util/wait"
)

// MockIaasClient is a mock of IaasClient interface.
type MockIaasClient struct {
	ctrl     *gomock.Controller
	recorder *MockIaasClientMockRecorder
	isgomock struct{}
}

// MockIaasClientMockRecorder is the mock recorder for MockIaasClient.
type MockIaasClientMockRecorder struct {
	mock *MockIaasClient
}

// NewMockIaasClient creates a new mock instance.
func NewMockIaasClient(ctrl *gomock.Controller) *MockIaasClient {
	mock := &MockIaasClient{ctrl: ctrl}
	mock.recorder = &MockIaasClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIaasClient) EXPECT() *MockIaasClientMockRecorder {
	return m.recorder
}

// AttachVolume mocks base method.
func (m *MockIaasClient) AttachVolume(ctx context.Context, instanceID, volumeID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolume", ctx, instanceID, volumeID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachVolume indicates an expected call of AttachVolume.
func (mr *MockIaasClientMockRecorder) AttachVolume(ctx, instanceID, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolume", reflect.TypeOf((*MockIaasClient)(nil).AttachVolume), ctx, instanceID, volumeID)
}

// CreateBackup mocks base method.
func (m *MockIaasClient) CreateBackup(ctx context.Context, name, volID, snapshotID string, tags map[string]string) (*iaas.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", ctx, name, volID, snapshotID, tags)
	ret0, _ := ret[0].(*iaas.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockIaasClientMockRecorder) CreateBackup(ctx, name, volID, snapshotID, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockIaasClient)(nil).CreateBackup), ctx, name, volID, snapshotID, tags)
}

// CreateSnapshot mocks base method.
func (m *MockIaasClient) CreateSnapshot(ctx context.Context, name, volID string, tags map[string]string) (*iaas.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", ctx, name, volID, tags)
	ret0, _ := ret[0].(*iaas.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockIaasClientMockRecorder) CreateSnapshot(ctx, name, volID, tags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockIaasClient)(nil).CreateSnapshot), ctx, name, volID, tags)
}

// CreateVolume mocks base method.
func (m *MockIaasClient) CreateVolume(arg0 context.Context, arg1 *iaas.CreateVolumePayload) (*iaas.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1)
	ret0, _ := ret[0].(*iaas.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockIaasClientMockRecorder) CreateVolume(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockIaasClient)(nil).CreateVolume), arg0, arg1)
}

// DeleteBackup mocks base method.
func (m *MockIaasClient) DeleteBackup(ctx context.Context, backupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackup", ctx, backupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackup indicates an expected call of DeleteBackup.
func (mr *MockIaasClientMockRecorder) DeleteBackup(ctx, backupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockIaasClient)(nil).DeleteBackup), ctx, backupID)
}

// DeleteSnapshot mocks base method.
func (m *MockIaasClient) DeleteSnapshot(ctx context.Context, snapID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", ctx, snapID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockIaasClientMockRecorder) DeleteSnapshot(ctx, snapID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockIaasClient)(nil).DeleteSnapshot), ctx, snapID)
}

// DeleteVolume mocks base method.
func (m *MockIaasClient) DeleteVolume(ctx context.Context, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockIaasClientMockRecorder) DeleteVolume(ctx, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockIaasClient)(nil).DeleteVolume), ctx, volumeID)
}

// DetachVolume mocks base method.
func (m *MockIaasClient) DetachVolume(ctx context.Context, instanceID, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolume", ctx, instanceID, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachVolume indicates an expected call of DetachVolume.
func (mr *MockIaasClientMockRecorder) DetachVolume(ctx, instanceID, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolume", reflect.TypeOf((*MockIaasClient)(nil).DetachVolume), ctx, instanceID, volumeID)
}

// ExpandVolume mocks base method.
func (m *MockIaasClient) ExpandVolume(ctx context.Context, volumeID, status string, size int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandVolume", ctx, volumeID, status, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExpandVolume indicates an expected call of ExpandVolume.
func (mr *MockIaasClientMockRecorder) ExpandVolume(ctx, volumeID, status, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandVolume", reflect.TypeOf((*MockIaasClient)(nil).ExpandVolume), ctx, volumeID, status, size)
}

// GetBackupByID mocks base method.
func (m *MockIaasClient) GetBackupByID(ctx context.Context, backupID string) (*iaas.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupByID", ctx, backupID)
	ret0, _ := ret[0].(*iaas.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupByID indicates an expected call of GetBackupByID.
func (mr *MockIaasClientMockRecorder) GetBackupByID(ctx, backupID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupByID", reflect.TypeOf((*MockIaasClient)(nil).GetBackupByID), ctx, backupID)
}

// GetBlockStorageOpts mocks base method.
func (m *MockIaasClient) GetBlockStorageOpts() BlockStorageOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockStorageOpts")
	ret0, _ := ret[0].(BlockStorageOpts)
	return ret0
}

// GetBlockStorageOpts indicates an expected call of GetBlockStorageOpts.
func (mr *MockIaasClientMockRecorder) GetBlockStorageOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockStorageOpts", reflect.TypeOf((*MockIaasClient)(nil).GetBlockStorageOpts))
}

// GetInstanceByID mocks base method.
func (m *MockIaasClient) GetInstanceByID(ctx context.Context, instanceID string) (*iaas.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceByID", ctx, instanceID)
	ret0, _ := ret[0].(*iaas.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceByID indicates an expected call of GetInstanceByID.
func (mr *MockIaasClientMockRecorder) GetInstanceByID(ctx, instanceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceByID", reflect.TypeOf((*MockIaasClient)(nil).GetInstanceByID), ctx, instanceID)
}

// GetSnapshotByID mocks base method.
func (m *MockIaasClient) GetSnapshotByID(ctx context.Context, snapshotID string) (*iaas.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotByID", ctx, snapshotID)
	ret0, _ := ret[0].(*iaas.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotByID indicates an expected call of GetSnapshotByID.
func (mr *MockIaasClientMockRecorder) GetSnapshotByID(ctx, snapshotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotByID", reflect.TypeOf((*MockIaasClient)(nil).GetSnapshotByID), ctx, snapshotID)
}

// GetVolume mocks base method.
func (m *MockIaasClient) GetVolume(ctx context.Context, volumeID string) (*iaas.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", ctx, volumeID)
	ret0, _ := ret[0].(*iaas.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockIaasClientMockRecorder) GetVolume(ctx, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockIaasClient)(nil).GetVolume), ctx, volumeID)
}

// GetVolumeByName mocks base method.
func (m *MockIaasClient) GetVolumeByName(ctx context.Context, name string) (*iaas.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByName", ctx, name)
	ret0, _ := ret[0].(*iaas.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByName indicates an expected call of GetVolumeByName.
func (mr *MockIaasClientMockRecorder) GetVolumeByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByName", reflect.TypeOf((*MockIaasClient)(nil).GetVolumeByName), ctx, name)
}

// GetVolumesByName mocks base method.
func (m *MockIaasClient) GetVolumesByName(ctx context.Context, name string) ([]iaas.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumesByName", ctx, name)
	ret0, _ := ret[0].([]iaas.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumesByName indicates an expected call of GetVolumesByName.
func (mr *MockIaasClientMockRecorder) GetVolumesByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumesByName", reflect.TypeOf((*MockIaasClient)(nil).GetVolumesByName), ctx, name)
}

// ListBackups mocks base method.
func (m *MockIaasClient) ListBackups(ctx context.Context, filters map[string]string) ([]iaas.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackups", ctx, filters)
	ret0, _ := ret[0].([]iaas.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackups indicates an expected call of ListBackups.
func (mr *MockIaasClientMockRecorder) ListBackups(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockIaasClient)(nil).ListBackups), ctx, filters)
}

// ListSnapshots mocks base method.
func (m *MockIaasClient) ListSnapshots(ctx context.Context, filters map[string]string) ([]iaas.Snapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", ctx, filters)
	ret0, _ := ret[0].([]iaas.Snapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockIaasClientMockRecorder) ListSnapshots(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockIaasClient)(nil).ListSnapshots), ctx, filters)
}

// ListVolumes mocks base method.
func (m *MockIaasClient) ListVolumes(ctx context.Context, limit int, startingToken string) ([]iaas.Volume, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", ctx, limit, startingToken)
	ret0, _ := ret[0].([]iaas.Volume)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockIaasClientMockRecorder) ListVolumes(ctx, limit, startingToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockIaasClient)(nil).ListVolumes), ctx, limit, startingToken)
}

// WaitBackupReady mocks base method.
func (m *MockIaasClient) WaitBackupReady(ctx context.Context, backupID string, snapshotSize int64, backupMaxDurationSecondsPerGB int) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitBackupReady", ctx, backupID, snapshotSize, backupMaxDurationSecondsPerGB)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitBackupReady indicates an expected call of WaitBackupReady.
func (mr *MockIaasClientMockRecorder) WaitBackupReady(ctx, backupID, snapshotSize, backupMaxDurationSecondsPerGB any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitBackupReady", reflect.TypeOf((*MockIaasClient)(nil).WaitBackupReady), ctx, backupID, snapshotSize, backupMaxDurationSecondsPerGB)
}

// WaitDiskAttached mocks base method.
func (m *MockIaasClient) WaitDiskAttached(ctx context.Context, instanceID, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitDiskAttached", ctx, instanceID, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitDiskAttached indicates an expected call of WaitDiskAttached.
func (mr *MockIaasClientMockRecorder) WaitDiskAttached(ctx, instanceID, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitDiskAttached", reflect.TypeOf((*MockIaasClient)(nil).WaitDiskAttached), ctx, instanceID, volumeID)
}

// WaitDiskDetached mocks base method.
func (m *MockIaasClient) WaitDiskDetached(ctx context.Context, instanceID, volumeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitDiskDetached", ctx, instanceID, volumeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitDiskDetached indicates an expected call of WaitDiskDetached.
func (mr *MockIaasClientMockRecorder) WaitDiskDetached(ctx, instanceID, volumeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitDiskDetached", reflect.TypeOf((*MockIaasClient)(nil).WaitDiskDetached), ctx, instanceID, volumeID)
}

// WaitSnapshotReady mocks base method.
func (m *MockIaasClient) WaitSnapshotReady(ctx context.Context, snapshotID string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitSnapshotReady", ctx, snapshotID)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitSnapshotReady indicates an expected call of WaitSnapshotReady.
func (mr *MockIaasClientMockRecorder) WaitSnapshotReady(ctx, snapshotID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitSnapshotReady", reflect.TypeOf((*MockIaasClient)(nil).WaitSnapshotReady), ctx, snapshotID)
}

// WaitVolumeTargetStatus mocks base method.
func (m *MockIaasClient) WaitVolumeTargetStatus(ctx context.Context, volumeID string, tStatus []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitVolumeTargetStatus", ctx, volumeID, tStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitVolumeTargetStatus indicates an expected call of WaitVolumeTargetStatus.
func (mr *MockIaasClientMockRecorder) WaitVolumeTargetStatus(ctx, volumeID, tStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitVolumeTargetStatus", reflect.TypeOf((*MockIaasClient)(nil).WaitVolumeTargetStatus), ctx, volumeID, tStatus)
}

// WaitVolumeTargetStatusWithCustomBackoff mocks base method.
func (m *MockIaasClient) WaitVolumeTargetStatusWithCustomBackoff(ctx context.Context, volumeID string, targetStatus []string, backoff *wait.Backoff) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitVolumeTargetStatusWithCustomBackoff", ctx, volumeID, targetStatus, backoff)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitVolumeTargetStatusWithCustomBackoff indicates an expected call of WaitVolumeTargetStatusWithCustomBackoff.
func (mr *MockIaasClientMockRecorder) WaitVolumeTargetStatusWithCustomBackoff(ctx, volumeID, targetStatus, backoff any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitVolumeTargetStatusWithCustomBackoff", reflect.TypeOf((*MockIaasClient)(nil).WaitVolumeTargetStatusWithCustomBackoff), ctx, volumeID, targetStatus, backoff)
}
