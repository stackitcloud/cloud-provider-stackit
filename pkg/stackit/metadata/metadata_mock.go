// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/util/metadata (interfaces: IMetadata)
//
// Generated by this command:
//
//	mockgen -destination ./pkg/util/metadata/metadata_mock.go -package metadata ./pkg/util/metadata IMetadata
//

// Package metadata is a generated GoMock package.
package metadata

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIMetadata is a mock of IMetadata interface.
type MockIMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockIMetadataMockRecorder
	isgomock struct{}
}

// MockIMetadataMockRecorder is the mock recorder for MockIMetadata.
type MockIMetadataMockRecorder struct {
	mock *MockIMetadata
}

// NewMockIMetadata creates a new mock instance.
func NewMockIMetadata(ctrl *gomock.Controller) *MockIMetadata {
	mock := &MockIMetadata{ctrl: ctrl}
	mock.recorder = &MockIMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMetadata) EXPECT() *MockIMetadataMockRecorder {
	return m.recorder
}

// GetAvailabilityZone mocks base method.
func (m *MockIMetadata) GetAvailabilityZone(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailabilityZone", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailabilityZone indicates an expected call of GetAvailabilityZone.
func (mr *MockIMetadataMockRecorder) GetAvailabilityZone(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailabilityZone", reflect.TypeOf((*MockIMetadata)(nil).GetAvailabilityZone), ctx)
}

// GetFlavor mocks base method.
func (m *MockIMetadata) GetFlavor(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlavor", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlavor indicates an expected call of GetFlavor.
func (mr *MockIMetadataMockRecorder) GetFlavor(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlavor", reflect.TypeOf((*MockIMetadata)(nil).GetFlavor), ctx)
}

// GetInstanceID mocks base method.
func (m *MockIMetadata) GetInstanceID(ctx context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceID", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceID indicates an expected call of GetInstanceID.
func (mr *MockIMetadataMockRecorder) GetInstanceID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceID", reflect.TypeOf((*MockIMetadata)(nil).GetInstanceID), ctx)
}
