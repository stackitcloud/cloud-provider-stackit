// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/stackit (interfaces: LoadbalancerClient)
//
// Generated by this command:
//
//	mockgen -destination ./pkg/stackit/loadbalancer_mock.go -package stackit ./pkg/stackit LoadbalancerClient
//

// Package stackit is a generated GoMock package.
package stackit

import (
	context "context"
	reflect "reflect"

	loadbalancer "github.com/stackitcloud/stackit-sdk-go/services/loadbalancer"
	gomock "go.uber.org/mock/gomock"
)

// MockLoadbalancerClient is a mock of LoadbalancerClient interface.
type MockLoadbalancerClient struct {
	ctrl     *gomock.Controller
	recorder *MockLoadbalancerClientMockRecorder
	isgomock struct{}
}

// MockLoadbalancerClientMockRecorder is the mock recorder for MockLoadbalancerClient.
type MockLoadbalancerClientMockRecorder struct {
	mock *MockLoadbalancerClient
}

// NewMockLoadbalancerClient creates a new mock instance.
func NewMockLoadbalancerClient(ctrl *gomock.Controller) *MockLoadbalancerClient {
	mock := &MockLoadbalancerClient{ctrl: ctrl}
	mock.recorder = &MockLoadbalancerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoadbalancerClient) EXPECT() *MockLoadbalancerClientMockRecorder {
	return m.recorder
}

// CreateCredentials mocks base method.
func (m *MockLoadbalancerClient) CreateCredentials(ctx context.Context, projectID string, payload loadbalancer.CreateCredentialsPayload) (*loadbalancer.CreateCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentials", ctx, projectID, payload)
	ret0, _ := ret[0].(*loadbalancer.CreateCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredentials indicates an expected call of CreateCredentials.
func (mr *MockLoadbalancerClientMockRecorder) CreateCredentials(ctx, projectID, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentials", reflect.TypeOf((*MockLoadbalancerClient)(nil).CreateCredentials), ctx, projectID, payload)
}

// CreateLoadBalancer mocks base method.
func (m *MockLoadbalancerClient) CreateLoadBalancer(ctx context.Context, projectID string, arg2 *loadbalancer.CreateLoadBalancerPayload) (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", ctx, projectID, arg2)
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockLoadbalancerClientMockRecorder) CreateLoadBalancer(ctx, projectID, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockLoadbalancerClient)(nil).CreateLoadBalancer), ctx, projectID, arg2)
}

// DeleteCredentials mocks base method.
func (m *MockLoadbalancerClient) DeleteCredentials(ctx context.Context, projectID, credentialRef string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", ctx, projectID, credentialRef)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredentials indicates an expected call of DeleteCredentials.
func (mr *MockLoadbalancerClientMockRecorder) DeleteCredentials(ctx, projectID, credentialRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockLoadbalancerClient)(nil).DeleteCredentials), ctx, projectID, credentialRef)
}

// DeleteLoadBalancer mocks base method.
func (m *MockLoadbalancerClient) DeleteLoadBalancer(ctx context.Context, projectID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", ctx, projectID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockLoadbalancerClientMockRecorder) DeleteLoadBalancer(ctx, projectID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockLoadbalancerClient)(nil).DeleteLoadBalancer), ctx, projectID, name)
}

// GetCredentials mocks base method.
func (m *MockLoadbalancerClient) GetCredentials(ctx context.Context, projectID, credentialRef string) (*loadbalancer.GetCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", ctx, projectID, credentialRef)
	ret0, _ := ret[0].(*loadbalancer.GetCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockLoadbalancerClientMockRecorder) GetCredentials(ctx, projectID, credentialRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockLoadbalancerClient)(nil).GetCredentials), ctx, projectID, credentialRef)
}

// GetLoadBalancer mocks base method.
func (m *MockLoadbalancerClient) GetLoadBalancer(ctx context.Context, projectID, name string) (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", ctx, projectID, name)
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockLoadbalancerClientMockRecorder) GetLoadBalancer(ctx, projectID, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockLoadbalancerClient)(nil).GetLoadBalancer), ctx, projectID, name)
}

// ListCredentials mocks base method.
func (m *MockLoadbalancerClient) ListCredentials(ctx context.Context, projectID string) (*loadbalancer.ListCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCredentials", ctx, projectID)
	ret0, _ := ret[0].(*loadbalancer.ListCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCredentials indicates an expected call of ListCredentials.
func (mr *MockLoadbalancerClientMockRecorder) ListCredentials(ctx, projectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCredentials", reflect.TypeOf((*MockLoadbalancerClient)(nil).ListCredentials), ctx, projectID)
}

// UpdateCredentials mocks base method.
func (m *MockLoadbalancerClient) UpdateCredentials(ctx context.Context, projectID, credentialRef string, payload loadbalancer.UpdateCredentialsPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentials", ctx, projectID, credentialRef, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredentials indicates an expected call of UpdateCredentials.
func (mr *MockLoadbalancerClientMockRecorder) UpdateCredentials(ctx, projectID, credentialRef, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentials", reflect.TypeOf((*MockLoadbalancerClient)(nil).UpdateCredentials), ctx, projectID, credentialRef, payload)
}

// UpdateLoadBalancer mocks base method.
func (m *MockLoadbalancerClient) UpdateLoadBalancer(ctx context.Context, projectID, name string, update *loadbalancer.UpdateLoadBalancerPayload) (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancer", ctx, projectID, name, update)
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancer indicates an expected call of UpdateLoadBalancer.
func (mr *MockLoadbalancerClientMockRecorder) UpdateLoadBalancer(ctx, projectID, name, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancer", reflect.TypeOf((*MockLoadbalancerClient)(nil).UpdateLoadBalancer), ctx, projectID, name, update)
}

// UpdateTargetPool mocks base method.
func (m *MockLoadbalancerClient) UpdateTargetPool(ctx context.Context, projectID, name, targetPoolName string, payload loadbalancer.UpdateTargetPoolPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetPool", ctx, projectID, name, targetPoolName, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTargetPool indicates an expected call of UpdateTargetPool.
func (mr *MockLoadbalancerClientMockRecorder) UpdateTargetPool(ctx, projectID, name, targetPoolName, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetPool", reflect.TypeOf((*MockLoadbalancerClient)(nil).UpdateTargetPool), ctx, projectID, name, targetPoolName, payload)
}
