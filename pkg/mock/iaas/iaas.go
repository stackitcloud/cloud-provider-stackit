// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackitcloud/stackit-sdk-go/services/iaas (interfaces: ApiAddNetworkToServerRequest,ApiAddNicToServerRequest,ApiAddPublicIpToServerRequest,ApiAddSecurityGroupToServerRequest,ApiAddServiceAccountToServerRequest,ApiAddVolumeToServerRequest,ApiCreateAffinityGroupRequest,ApiCreateBackupRequest,ApiCreateImageRequest,ApiCreateKeyPairRequest,ApiCreateNetworkAreaRangeRequest,ApiCreateNetworkAreaRequest,ApiCreateNetworkAreaRouteRequest,ApiCreateNetworkRequest,ApiCreateNicRequest,ApiCreatePublicIPRequest,ApiCreateSecurityGroupRequest,ApiCreateSecurityGroupRuleRequest,ApiCreateServerRequest,ApiCreateSnapshotRequest,ApiCreateVolumeRequest,ApiDeallocateServerRequest,ApiDeleteAffinityGroupRequest,ApiDeleteBackupRequest,ApiDeleteImageRequest,ApiDeleteImageShareConsumerRequest,ApiDeleteImageShareRequest,ApiDeleteKeyPairRequest,ApiDeleteNetworkAreaRangeRequest,ApiDeleteNetworkAreaRequest,ApiDeleteNetworkAreaRouteRequest,ApiDeleteNetworkRequest,ApiDeleteNicRequest,ApiDeletePublicIPRequest,ApiDeleteSecurityGroupRequest,ApiDeleteSecurityGroupRuleRequest,ApiDeleteServerRequest,ApiDeleteSnapshotRequest,ApiDeleteVolumeRequest,ApiGetAffinityGroupRequest,ApiGetAttachedVolumeRequest,ApiGetBackupRequest,ApiGetImageRequest,ApiGetImageShareConsumerRequest,ApiGetImageShareRequest,ApiGetKeyPairRequest,ApiGetMachineTypeRequest,ApiGetNetworkAreaRangeRequest,ApiGetNetworkAreaRequest,ApiGetNetworkAreaRouteRequest,ApiGetNetworkRequest,ApiGetNicRequest,ApiGetOrganizationRequestRequest,ApiGetProjectNICRequest,ApiGetProjectRequestRequest,ApiGetPublicIPRequest,ApiGetSecurityGroupRequest,ApiGetSecurityGroupRuleRequest,ApiGetServerConsoleRequest,ApiGetServerLogRequest,ApiGetServerRequest,ApiGetSnapshotRequest,ApiGetVolumePerformanceClassRequest,ApiGetVolumeRequest,ApiListAffinityGroupsRequest,ApiListAttachedVolumesRequest,ApiListAvailabilityZonesRequest,ApiListBackupsRequest,ApiListImagesRequest,ApiListKeyPairsRequest,ApiListMachineTypesRequest,ApiListNetworkAreaProjectsRequest,ApiListNetworkAreaRangesRequest,ApiListNetworkAreaRoutesRequest,ApiListNetworkAreasRequest,ApiListNetworksRequest,ApiListNicsRequest,ApiListProjectNICsRequest,ApiListPublicIPRangesRequest,ApiListPublicIPsRequest,ApiListQuotasRequest,ApiListSecurityGroupRulesRequest,ApiListSecurityGroupsRequest,ApiListServerNicsRequest,ApiListServerServiceAccountsRequest,ApiListServersRequest,ApiListSnapshotsRequest,ApiListVolumePerformanceClassesRequest,ApiListVolumesRequest,ApiPartialUpdateNetworkAreaRequest,ApiPartialUpdateNetworkRequest,ApiRebootServerRequest,ApiRemoveNetworkFromServerRequest,ApiRemoveNicFromServerRequest,ApiRemovePublicIpFromServerRequest,ApiRemoveSecurityGroupFromServerRequest,ApiRemoveServiceAccountFromServerRequest,ApiRemoveVolumeFromServerRequest,ApiRescueServerRequest,ApiResizeServerRequest,ApiResizeVolumeRequest,ApiRestoreBackupRequest,ApiSetImageShareRequest,ApiStartServerRequest,ApiStopServerRequest,ApiUnrescueServerRequest,ApiUpdateAttachedVolumeRequest,ApiUpdateBackupRequest,ApiUpdateImageRequest,ApiUpdateImageScopeLocalRequest,ApiUpdateImageScopePublicRequest,ApiUpdateImageShareRequest,ApiUpdateKeyPairRequest,ApiUpdateNetworkAreaRouteRequest,ApiUpdateNicRequest,ApiUpdatePublicIPRequest,ApiUpdateSecurityGroupRequest,ApiUpdateServerRequest,ApiUpdateSnapshotRequest,ApiUpdateVolumeRequest,DefaultApi)
//
// Generated by this command:
//
//	mockgen -destination ./pkg/mock/iaas/iaas.go -package iaas github.com/stackitcloud/stackit-sdk-go/services/iaas ApiAddNetworkToServerRequest,ApiAddNicToServerRequest,ApiAddPublicIpToServerRequest,ApiAddSecurityGroupToServerRequest,ApiAddServiceAccountToServerRequest,ApiAddVolumeToServerRequest,ApiCreateAffinityGroupRequest,ApiCreateBackupRequest,ApiCreateImageRequest,ApiCreateKeyPairRequest,ApiCreateNetworkAreaRangeRequest,ApiCreateNetworkAreaRequest,ApiCreateNetworkAreaRouteRequest,ApiCreateNetworkRequest,ApiCreateNicRequest,ApiCreatePublicIPRequest,ApiCreateSecurityGroupRequest,ApiCreateSecurityGroupRuleRequest,ApiCreateServerRequest,ApiCreateSnapshotRequest,ApiCreateVolumeRequest,ApiDeallocateServerRequest,ApiDeleteAffinityGroupRequest,ApiDeleteBackupRequest,ApiDeleteImageRequest,ApiDeleteImageShareConsumerRequest,ApiDeleteImageShareRequest,ApiDeleteKeyPairRequest,ApiDeleteNetworkAreaRangeRequest,ApiDeleteNetworkAreaRequest,ApiDeleteNetworkAreaRouteRequest,ApiDeleteNetworkRequest,ApiDeleteNicRequest,ApiDeletePublicIPRequest,ApiDeleteSecurityGroupRequest,ApiDeleteSecurityGroupRuleRequest,ApiDeleteServerRequest,ApiDeleteSnapshotRequest,ApiDeleteVolumeRequest,ApiGetAffinityGroupRequest,ApiGetAttachedVolumeRequest,ApiGetBackupRequest,ApiGetImageRequest,ApiGetImageShareConsumerRequest,ApiGetImageShareRequest,ApiGetKeyPairRequest,ApiGetMachineTypeRequest,ApiGetNetworkAreaRangeRequest,ApiGetNetworkAreaRequest,ApiGetNetworkAreaRouteRequest,ApiGetNetworkRequest,ApiGetNicRequest,ApiGetOrganizationRequestRequest,ApiGetProjectNICRequest,ApiGetProjectRequestRequest,ApiGetPublicIPRequest,ApiGetSecurityGroupRequest,ApiGetSecurityGroupRuleRequest,ApiGetServerConsoleRequest,ApiGetServerLogRequest,ApiGetServerRequest,ApiGetSnapshotRequest,ApiGetVolumePerformanceClassRequest,ApiGetVolumeRequest,ApiListAffinityGroupsRequest,ApiListAttachedVolumesRequest,ApiListAvailabilityZonesRequest,ApiListBackupsRequest,ApiListImagesRequest,ApiListKeyPairsRequest,ApiListMachineTypesRequest,ApiListNetworkAreaProjectsRequest,ApiListNetworkAreaRangesRequest,ApiListNetworkAreaRoutesRequest,ApiListNetworkAreasRequest,ApiListNetworksRequest,ApiListNicsRequest,ApiListProjectNICsRequest,ApiListPublicIPRangesRequest,ApiListPublicIPsRequest,ApiListQuotasRequest,ApiListSecurityGroupRulesRequest,ApiListSecurityGroupsRequest,ApiListServerNicsRequest,ApiListServerServiceAccountsRequest,ApiListServersRequest,ApiListSnapshotsRequest,ApiListVolumePerformanceClassesRequest,ApiListVolumesRequest,ApiPartialUpdateNetworkAreaRequest,ApiPartialUpdateNetworkRequest,ApiRebootServerRequest,ApiRemoveNetworkFromServerRequest,ApiRemoveNicFromServerRequest,ApiRemovePublicIpFromServerRequest,ApiRemoveSecurityGroupFromServerRequest,ApiRemoveServiceAccountFromServerRequest,ApiRemoveVolumeFromServerRequest,ApiRescueServerRequest,ApiResizeServerRequest,ApiResizeVolumeRequest,ApiRestoreBackupRequest,ApiSetImageShareRequest,ApiStartServerRequest,ApiStopServerRequest,ApiUnrescueServerRequest,ApiUpdateAttachedVolumeRequest,ApiUpdateBackupRequest,ApiUpdateImageRequest,ApiUpdateImageScopeLocalRequest,ApiUpdateImageScopePublicRequest,ApiUpdateImageShareRequest,ApiUpdateKeyPairRequest,ApiUpdateNetworkAreaRouteRequest,ApiUpdateNicRequest,ApiUpdatePublicIPRequest,ApiUpdateSecurityGroupRequest,ApiUpdateServerRequest,ApiUpdateSnapshotRequest,ApiUpdateVolumeRequest,DefaultApi
//

// Package iaas is a generated GoMock package.
package iaas

import (
	context "context"
	reflect "reflect"

	iaas "github.com/stackitcloud/stackit-sdk-go/services/iaas"
	gomock "go.uber.org/mock/gomock"
)

// MockApiAddNetworkToServerRequest is a mock of ApiAddNetworkToServerRequest interface.
type MockApiAddNetworkToServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiAddNetworkToServerRequestMockRecorder
	isgomock struct{}
}

// MockApiAddNetworkToServerRequestMockRecorder is the mock recorder for MockApiAddNetworkToServerRequest.
type MockApiAddNetworkToServerRequestMockRecorder struct {
	mock *MockApiAddNetworkToServerRequest
}

// NewMockApiAddNetworkToServerRequest creates a new mock instance.
func NewMockApiAddNetworkToServerRequest(ctrl *gomock.Controller) *MockApiAddNetworkToServerRequest {
	mock := &MockApiAddNetworkToServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiAddNetworkToServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiAddNetworkToServerRequest) EXPECT() *MockApiAddNetworkToServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiAddNetworkToServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiAddNetworkToServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiAddNetworkToServerRequest)(nil).Execute))
}

// MockApiAddNicToServerRequest is a mock of ApiAddNicToServerRequest interface.
type MockApiAddNicToServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiAddNicToServerRequestMockRecorder
	isgomock struct{}
}

// MockApiAddNicToServerRequestMockRecorder is the mock recorder for MockApiAddNicToServerRequest.
type MockApiAddNicToServerRequestMockRecorder struct {
	mock *MockApiAddNicToServerRequest
}

// NewMockApiAddNicToServerRequest creates a new mock instance.
func NewMockApiAddNicToServerRequest(ctrl *gomock.Controller) *MockApiAddNicToServerRequest {
	mock := &MockApiAddNicToServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiAddNicToServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiAddNicToServerRequest) EXPECT() *MockApiAddNicToServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiAddNicToServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiAddNicToServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiAddNicToServerRequest)(nil).Execute))
}

// MockApiAddPublicIpToServerRequest is a mock of ApiAddPublicIpToServerRequest interface.
type MockApiAddPublicIpToServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiAddPublicIpToServerRequestMockRecorder
	isgomock struct{}
}

// MockApiAddPublicIpToServerRequestMockRecorder is the mock recorder for MockApiAddPublicIpToServerRequest.
type MockApiAddPublicIpToServerRequestMockRecorder struct {
	mock *MockApiAddPublicIpToServerRequest
}

// NewMockApiAddPublicIpToServerRequest creates a new mock instance.
func NewMockApiAddPublicIpToServerRequest(ctrl *gomock.Controller) *MockApiAddPublicIpToServerRequest {
	mock := &MockApiAddPublicIpToServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiAddPublicIpToServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiAddPublicIpToServerRequest) EXPECT() *MockApiAddPublicIpToServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiAddPublicIpToServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiAddPublicIpToServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiAddPublicIpToServerRequest)(nil).Execute))
}

// MockApiAddSecurityGroupToServerRequest is a mock of ApiAddSecurityGroupToServerRequest interface.
type MockApiAddSecurityGroupToServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiAddSecurityGroupToServerRequestMockRecorder
	isgomock struct{}
}

// MockApiAddSecurityGroupToServerRequestMockRecorder is the mock recorder for MockApiAddSecurityGroupToServerRequest.
type MockApiAddSecurityGroupToServerRequestMockRecorder struct {
	mock *MockApiAddSecurityGroupToServerRequest
}

// NewMockApiAddSecurityGroupToServerRequest creates a new mock instance.
func NewMockApiAddSecurityGroupToServerRequest(ctrl *gomock.Controller) *MockApiAddSecurityGroupToServerRequest {
	mock := &MockApiAddSecurityGroupToServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiAddSecurityGroupToServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiAddSecurityGroupToServerRequest) EXPECT() *MockApiAddSecurityGroupToServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiAddSecurityGroupToServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiAddSecurityGroupToServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiAddSecurityGroupToServerRequest)(nil).Execute))
}

// MockApiAddServiceAccountToServerRequest is a mock of ApiAddServiceAccountToServerRequest interface.
type MockApiAddServiceAccountToServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiAddServiceAccountToServerRequestMockRecorder
	isgomock struct{}
}

// MockApiAddServiceAccountToServerRequestMockRecorder is the mock recorder for MockApiAddServiceAccountToServerRequest.
type MockApiAddServiceAccountToServerRequestMockRecorder struct {
	mock *MockApiAddServiceAccountToServerRequest
}

// NewMockApiAddServiceAccountToServerRequest creates a new mock instance.
func NewMockApiAddServiceAccountToServerRequest(ctrl *gomock.Controller) *MockApiAddServiceAccountToServerRequest {
	mock := &MockApiAddServiceAccountToServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiAddServiceAccountToServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiAddServiceAccountToServerRequest) EXPECT() *MockApiAddServiceAccountToServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiAddServiceAccountToServerRequest) Execute() (*iaas.ServiceAccountMailListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ServiceAccountMailListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiAddServiceAccountToServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiAddServiceAccountToServerRequest)(nil).Execute))
}

// MockApiAddVolumeToServerRequest is a mock of ApiAddVolumeToServerRequest interface.
type MockApiAddVolumeToServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiAddVolumeToServerRequestMockRecorder
	isgomock struct{}
}

// MockApiAddVolumeToServerRequestMockRecorder is the mock recorder for MockApiAddVolumeToServerRequest.
type MockApiAddVolumeToServerRequestMockRecorder struct {
	mock *MockApiAddVolumeToServerRequest
}

// NewMockApiAddVolumeToServerRequest creates a new mock instance.
func NewMockApiAddVolumeToServerRequest(ctrl *gomock.Controller) *MockApiAddVolumeToServerRequest {
	mock := &MockApiAddVolumeToServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiAddVolumeToServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiAddVolumeToServerRequest) EXPECT() *MockApiAddVolumeToServerRequestMockRecorder {
	return m.recorder
}

// AddVolumeToServerPayload mocks base method.
func (m *MockApiAddVolumeToServerRequest) AddVolumeToServerPayload(addVolumeToServerPayload iaas.AddVolumeToServerPayload) iaas.ApiAddVolumeToServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolumeToServerPayload", addVolumeToServerPayload)
	ret0, _ := ret[0].(iaas.ApiAddVolumeToServerRequest)
	return ret0
}

// AddVolumeToServerPayload indicates an expected call of AddVolumeToServerPayload.
func (mr *MockApiAddVolumeToServerRequestMockRecorder) AddVolumeToServerPayload(addVolumeToServerPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolumeToServerPayload", reflect.TypeOf((*MockApiAddVolumeToServerRequest)(nil).AddVolumeToServerPayload), addVolumeToServerPayload)
}

// Execute mocks base method.
func (m *MockApiAddVolumeToServerRequest) Execute() (*iaas.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiAddVolumeToServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiAddVolumeToServerRequest)(nil).Execute))
}

// MockApiCreateAffinityGroupRequest is a mock of ApiCreateAffinityGroupRequest interface.
type MockApiCreateAffinityGroupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateAffinityGroupRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateAffinityGroupRequestMockRecorder is the mock recorder for MockApiCreateAffinityGroupRequest.
type MockApiCreateAffinityGroupRequestMockRecorder struct {
	mock *MockApiCreateAffinityGroupRequest
}

// NewMockApiCreateAffinityGroupRequest creates a new mock instance.
func NewMockApiCreateAffinityGroupRequest(ctrl *gomock.Controller) *MockApiCreateAffinityGroupRequest {
	mock := &MockApiCreateAffinityGroupRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateAffinityGroupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateAffinityGroupRequest) EXPECT() *MockApiCreateAffinityGroupRequestMockRecorder {
	return m.recorder
}

// CreateAffinityGroupPayload mocks base method.
func (m *MockApiCreateAffinityGroupRequest) CreateAffinityGroupPayload(createAffinityGroupPayload iaas.CreateAffinityGroupPayload) iaas.ApiCreateAffinityGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAffinityGroupPayload", createAffinityGroupPayload)
	ret0, _ := ret[0].(iaas.ApiCreateAffinityGroupRequest)
	return ret0
}

// CreateAffinityGroupPayload indicates an expected call of CreateAffinityGroupPayload.
func (mr *MockApiCreateAffinityGroupRequestMockRecorder) CreateAffinityGroupPayload(createAffinityGroupPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAffinityGroupPayload", reflect.TypeOf((*MockApiCreateAffinityGroupRequest)(nil).CreateAffinityGroupPayload), createAffinityGroupPayload)
}

// Execute mocks base method.
func (m *MockApiCreateAffinityGroupRequest) Execute() (*iaas.AffinityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.AffinityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateAffinityGroupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateAffinityGroupRequest)(nil).Execute))
}

// MockApiCreateBackupRequest is a mock of ApiCreateBackupRequest interface.
type MockApiCreateBackupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateBackupRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateBackupRequestMockRecorder is the mock recorder for MockApiCreateBackupRequest.
type MockApiCreateBackupRequestMockRecorder struct {
	mock *MockApiCreateBackupRequest
}

// NewMockApiCreateBackupRequest creates a new mock instance.
func NewMockApiCreateBackupRequest(ctrl *gomock.Controller) *MockApiCreateBackupRequest {
	mock := &MockApiCreateBackupRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateBackupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateBackupRequest) EXPECT() *MockApiCreateBackupRequestMockRecorder {
	return m.recorder
}

// CreateBackupPayload mocks base method.
func (m *MockApiCreateBackupRequest) CreateBackupPayload(createBackupPayload iaas.CreateBackupPayload) iaas.ApiCreateBackupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupPayload", createBackupPayload)
	ret0, _ := ret[0].(iaas.ApiCreateBackupRequest)
	return ret0
}

// CreateBackupPayload indicates an expected call of CreateBackupPayload.
func (mr *MockApiCreateBackupRequestMockRecorder) CreateBackupPayload(createBackupPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupPayload", reflect.TypeOf((*MockApiCreateBackupRequest)(nil).CreateBackupPayload), createBackupPayload)
}

// Execute mocks base method.
func (m *MockApiCreateBackupRequest) Execute() (*iaas.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateBackupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateBackupRequest)(nil).Execute))
}

// MockApiCreateImageRequest is a mock of ApiCreateImageRequest interface.
type MockApiCreateImageRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateImageRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateImageRequestMockRecorder is the mock recorder for MockApiCreateImageRequest.
type MockApiCreateImageRequestMockRecorder struct {
	mock *MockApiCreateImageRequest
}

// NewMockApiCreateImageRequest creates a new mock instance.
func NewMockApiCreateImageRequest(ctrl *gomock.Controller) *MockApiCreateImageRequest {
	mock := &MockApiCreateImageRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateImageRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateImageRequest) EXPECT() *MockApiCreateImageRequestMockRecorder {
	return m.recorder
}

// CreateImagePayload mocks base method.
func (m *MockApiCreateImageRequest) CreateImagePayload(createImagePayload iaas.CreateImagePayload) iaas.ApiCreateImageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImagePayload", createImagePayload)
	ret0, _ := ret[0].(iaas.ApiCreateImageRequest)
	return ret0
}

// CreateImagePayload indicates an expected call of CreateImagePayload.
func (mr *MockApiCreateImageRequestMockRecorder) CreateImagePayload(createImagePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImagePayload", reflect.TypeOf((*MockApiCreateImageRequest)(nil).CreateImagePayload), createImagePayload)
}

// Execute mocks base method.
func (m *MockApiCreateImageRequest) Execute() (*iaas.ImageCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ImageCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateImageRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateImageRequest)(nil).Execute))
}

// MockApiCreateKeyPairRequest is a mock of ApiCreateKeyPairRequest interface.
type MockApiCreateKeyPairRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateKeyPairRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateKeyPairRequestMockRecorder is the mock recorder for MockApiCreateKeyPairRequest.
type MockApiCreateKeyPairRequestMockRecorder struct {
	mock *MockApiCreateKeyPairRequest
}

// NewMockApiCreateKeyPairRequest creates a new mock instance.
func NewMockApiCreateKeyPairRequest(ctrl *gomock.Controller) *MockApiCreateKeyPairRequest {
	mock := &MockApiCreateKeyPairRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateKeyPairRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateKeyPairRequest) EXPECT() *MockApiCreateKeyPairRequestMockRecorder {
	return m.recorder
}

// CreateKeyPairPayload mocks base method.
func (m *MockApiCreateKeyPairRequest) CreateKeyPairPayload(createKeyPairPayload iaas.CreateKeyPairPayload) iaas.ApiCreateKeyPairRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyPairPayload", createKeyPairPayload)
	ret0, _ := ret[0].(iaas.ApiCreateKeyPairRequest)
	return ret0
}

// CreateKeyPairPayload indicates an expected call of CreateKeyPairPayload.
func (mr *MockApiCreateKeyPairRequestMockRecorder) CreateKeyPairPayload(createKeyPairPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyPairPayload", reflect.TypeOf((*MockApiCreateKeyPairRequest)(nil).CreateKeyPairPayload), createKeyPairPayload)
}

// Execute mocks base method.
func (m *MockApiCreateKeyPairRequest) Execute() (*iaas.Keypair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Keypair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateKeyPairRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateKeyPairRequest)(nil).Execute))
}

// MockApiCreateNetworkAreaRangeRequest is a mock of ApiCreateNetworkAreaRangeRequest interface.
type MockApiCreateNetworkAreaRangeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateNetworkAreaRangeRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateNetworkAreaRangeRequestMockRecorder is the mock recorder for MockApiCreateNetworkAreaRangeRequest.
type MockApiCreateNetworkAreaRangeRequestMockRecorder struct {
	mock *MockApiCreateNetworkAreaRangeRequest
}

// NewMockApiCreateNetworkAreaRangeRequest creates a new mock instance.
func NewMockApiCreateNetworkAreaRangeRequest(ctrl *gomock.Controller) *MockApiCreateNetworkAreaRangeRequest {
	mock := &MockApiCreateNetworkAreaRangeRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateNetworkAreaRangeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateNetworkAreaRangeRequest) EXPECT() *MockApiCreateNetworkAreaRangeRequestMockRecorder {
	return m.recorder
}

// CreateNetworkAreaRangePayload mocks base method.
func (m *MockApiCreateNetworkAreaRangeRequest) CreateNetworkAreaRangePayload(createNetworkAreaRangePayload iaas.CreateNetworkAreaRangePayload) iaas.ApiCreateNetworkAreaRangeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkAreaRangePayload", createNetworkAreaRangePayload)
	ret0, _ := ret[0].(iaas.ApiCreateNetworkAreaRangeRequest)
	return ret0
}

// CreateNetworkAreaRangePayload indicates an expected call of CreateNetworkAreaRangePayload.
func (mr *MockApiCreateNetworkAreaRangeRequestMockRecorder) CreateNetworkAreaRangePayload(createNetworkAreaRangePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkAreaRangePayload", reflect.TypeOf((*MockApiCreateNetworkAreaRangeRequest)(nil).CreateNetworkAreaRangePayload), createNetworkAreaRangePayload)
}

// Execute mocks base method.
func (m *MockApiCreateNetworkAreaRangeRequest) Execute() (*iaas.NetworkRangeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NetworkRangeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateNetworkAreaRangeRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateNetworkAreaRangeRequest)(nil).Execute))
}

// MockApiCreateNetworkAreaRequest is a mock of ApiCreateNetworkAreaRequest interface.
type MockApiCreateNetworkAreaRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateNetworkAreaRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateNetworkAreaRequestMockRecorder is the mock recorder for MockApiCreateNetworkAreaRequest.
type MockApiCreateNetworkAreaRequestMockRecorder struct {
	mock *MockApiCreateNetworkAreaRequest
}

// NewMockApiCreateNetworkAreaRequest creates a new mock instance.
func NewMockApiCreateNetworkAreaRequest(ctrl *gomock.Controller) *MockApiCreateNetworkAreaRequest {
	mock := &MockApiCreateNetworkAreaRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateNetworkAreaRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateNetworkAreaRequest) EXPECT() *MockApiCreateNetworkAreaRequestMockRecorder {
	return m.recorder
}

// CreateNetworkAreaPayload mocks base method.
func (m *MockApiCreateNetworkAreaRequest) CreateNetworkAreaPayload(createNetworkAreaPayload iaas.CreateNetworkAreaPayload) iaas.ApiCreateNetworkAreaRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkAreaPayload", createNetworkAreaPayload)
	ret0, _ := ret[0].(iaas.ApiCreateNetworkAreaRequest)
	return ret0
}

// CreateNetworkAreaPayload indicates an expected call of CreateNetworkAreaPayload.
func (mr *MockApiCreateNetworkAreaRequestMockRecorder) CreateNetworkAreaPayload(createNetworkAreaPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkAreaPayload", reflect.TypeOf((*MockApiCreateNetworkAreaRequest)(nil).CreateNetworkAreaPayload), createNetworkAreaPayload)
}

// Execute mocks base method.
func (m *MockApiCreateNetworkAreaRequest) Execute() (*iaas.NetworkArea, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NetworkArea)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateNetworkAreaRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateNetworkAreaRequest)(nil).Execute))
}

// MockApiCreateNetworkAreaRouteRequest is a mock of ApiCreateNetworkAreaRouteRequest interface.
type MockApiCreateNetworkAreaRouteRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateNetworkAreaRouteRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateNetworkAreaRouteRequestMockRecorder is the mock recorder for MockApiCreateNetworkAreaRouteRequest.
type MockApiCreateNetworkAreaRouteRequestMockRecorder struct {
	mock *MockApiCreateNetworkAreaRouteRequest
}

// NewMockApiCreateNetworkAreaRouteRequest creates a new mock instance.
func NewMockApiCreateNetworkAreaRouteRequest(ctrl *gomock.Controller) *MockApiCreateNetworkAreaRouteRequest {
	mock := &MockApiCreateNetworkAreaRouteRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateNetworkAreaRouteRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateNetworkAreaRouteRequest) EXPECT() *MockApiCreateNetworkAreaRouteRequestMockRecorder {
	return m.recorder
}

// CreateNetworkAreaRoutePayload mocks base method.
func (m *MockApiCreateNetworkAreaRouteRequest) CreateNetworkAreaRoutePayload(createNetworkAreaRoutePayload iaas.CreateNetworkAreaRoutePayload) iaas.ApiCreateNetworkAreaRouteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkAreaRoutePayload", createNetworkAreaRoutePayload)
	ret0, _ := ret[0].(iaas.ApiCreateNetworkAreaRouteRequest)
	return ret0
}

// CreateNetworkAreaRoutePayload indicates an expected call of CreateNetworkAreaRoutePayload.
func (mr *MockApiCreateNetworkAreaRouteRequestMockRecorder) CreateNetworkAreaRoutePayload(createNetworkAreaRoutePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkAreaRoutePayload", reflect.TypeOf((*MockApiCreateNetworkAreaRouteRequest)(nil).CreateNetworkAreaRoutePayload), createNetworkAreaRoutePayload)
}

// Execute mocks base method.
func (m *MockApiCreateNetworkAreaRouteRequest) Execute() (*iaas.RouteListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.RouteListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateNetworkAreaRouteRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateNetworkAreaRouteRequest)(nil).Execute))
}

// MockApiCreateNetworkRequest is a mock of ApiCreateNetworkRequest interface.
type MockApiCreateNetworkRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateNetworkRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateNetworkRequestMockRecorder is the mock recorder for MockApiCreateNetworkRequest.
type MockApiCreateNetworkRequestMockRecorder struct {
	mock *MockApiCreateNetworkRequest
}

// NewMockApiCreateNetworkRequest creates a new mock instance.
func NewMockApiCreateNetworkRequest(ctrl *gomock.Controller) *MockApiCreateNetworkRequest {
	mock := &MockApiCreateNetworkRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateNetworkRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateNetworkRequest) EXPECT() *MockApiCreateNetworkRequestMockRecorder {
	return m.recorder
}

// CreateNetworkPayload mocks base method.
func (m *MockApiCreateNetworkRequest) CreateNetworkPayload(createNetworkPayload iaas.CreateNetworkPayload) iaas.ApiCreateNetworkRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkPayload", createNetworkPayload)
	ret0, _ := ret[0].(iaas.ApiCreateNetworkRequest)
	return ret0
}

// CreateNetworkPayload indicates an expected call of CreateNetworkPayload.
func (mr *MockApiCreateNetworkRequestMockRecorder) CreateNetworkPayload(createNetworkPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkPayload", reflect.TypeOf((*MockApiCreateNetworkRequest)(nil).CreateNetworkPayload), createNetworkPayload)
}

// Execute mocks base method.
func (m *MockApiCreateNetworkRequest) Execute() (*iaas.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateNetworkRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateNetworkRequest)(nil).Execute))
}

// MockApiCreateNicRequest is a mock of ApiCreateNicRequest interface.
type MockApiCreateNicRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateNicRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateNicRequestMockRecorder is the mock recorder for MockApiCreateNicRequest.
type MockApiCreateNicRequestMockRecorder struct {
	mock *MockApiCreateNicRequest
}

// NewMockApiCreateNicRequest creates a new mock instance.
func NewMockApiCreateNicRequest(ctrl *gomock.Controller) *MockApiCreateNicRequest {
	mock := &MockApiCreateNicRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateNicRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateNicRequest) EXPECT() *MockApiCreateNicRequestMockRecorder {
	return m.recorder
}

// CreateNicPayload mocks base method.
func (m *MockApiCreateNicRequest) CreateNicPayload(createNicPayload iaas.CreateNicPayload) iaas.ApiCreateNicRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNicPayload", createNicPayload)
	ret0, _ := ret[0].(iaas.ApiCreateNicRequest)
	return ret0
}

// CreateNicPayload indicates an expected call of CreateNicPayload.
func (mr *MockApiCreateNicRequestMockRecorder) CreateNicPayload(createNicPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNicPayload", reflect.TypeOf((*MockApiCreateNicRequest)(nil).CreateNicPayload), createNicPayload)
}

// Execute mocks base method.
func (m *MockApiCreateNicRequest) Execute() (*iaas.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateNicRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateNicRequest)(nil).Execute))
}

// MockApiCreatePublicIPRequest is a mock of ApiCreatePublicIPRequest interface.
type MockApiCreatePublicIPRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreatePublicIPRequestMockRecorder
	isgomock struct{}
}

// MockApiCreatePublicIPRequestMockRecorder is the mock recorder for MockApiCreatePublicIPRequest.
type MockApiCreatePublicIPRequestMockRecorder struct {
	mock *MockApiCreatePublicIPRequest
}

// NewMockApiCreatePublicIPRequest creates a new mock instance.
func NewMockApiCreatePublicIPRequest(ctrl *gomock.Controller) *MockApiCreatePublicIPRequest {
	mock := &MockApiCreatePublicIPRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreatePublicIPRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreatePublicIPRequest) EXPECT() *MockApiCreatePublicIPRequestMockRecorder {
	return m.recorder
}

// CreatePublicIPPayload mocks base method.
func (m *MockApiCreatePublicIPRequest) CreatePublicIPPayload(createPublicIPPayload iaas.CreatePublicIPPayload) iaas.ApiCreatePublicIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicIPPayload", createPublicIPPayload)
	ret0, _ := ret[0].(iaas.ApiCreatePublicIPRequest)
	return ret0
}

// CreatePublicIPPayload indicates an expected call of CreatePublicIPPayload.
func (mr *MockApiCreatePublicIPRequestMockRecorder) CreatePublicIPPayload(createPublicIPPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicIPPayload", reflect.TypeOf((*MockApiCreatePublicIPRequest)(nil).CreatePublicIPPayload), createPublicIPPayload)
}

// Execute mocks base method.
func (m *MockApiCreatePublicIPRequest) Execute() (*iaas.PublicIp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.PublicIp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreatePublicIPRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreatePublicIPRequest)(nil).Execute))
}

// MockApiCreateSecurityGroupRequest is a mock of ApiCreateSecurityGroupRequest interface.
type MockApiCreateSecurityGroupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateSecurityGroupRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateSecurityGroupRequestMockRecorder is the mock recorder for MockApiCreateSecurityGroupRequest.
type MockApiCreateSecurityGroupRequestMockRecorder struct {
	mock *MockApiCreateSecurityGroupRequest
}

// NewMockApiCreateSecurityGroupRequest creates a new mock instance.
func NewMockApiCreateSecurityGroupRequest(ctrl *gomock.Controller) *MockApiCreateSecurityGroupRequest {
	mock := &MockApiCreateSecurityGroupRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateSecurityGroupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateSecurityGroupRequest) EXPECT() *MockApiCreateSecurityGroupRequestMockRecorder {
	return m.recorder
}

// CreateSecurityGroupPayload mocks base method.
func (m *MockApiCreateSecurityGroupRequest) CreateSecurityGroupPayload(createSecurityGroupPayload iaas.CreateSecurityGroupPayload) iaas.ApiCreateSecurityGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroupPayload", createSecurityGroupPayload)
	ret0, _ := ret[0].(iaas.ApiCreateSecurityGroupRequest)
	return ret0
}

// CreateSecurityGroupPayload indicates an expected call of CreateSecurityGroupPayload.
func (mr *MockApiCreateSecurityGroupRequestMockRecorder) CreateSecurityGroupPayload(createSecurityGroupPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroupPayload", reflect.TypeOf((*MockApiCreateSecurityGroupRequest)(nil).CreateSecurityGroupPayload), createSecurityGroupPayload)
}

// Execute mocks base method.
func (m *MockApiCreateSecurityGroupRequest) Execute() (*iaas.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateSecurityGroupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateSecurityGroupRequest)(nil).Execute))
}

// MockApiCreateSecurityGroupRuleRequest is a mock of ApiCreateSecurityGroupRuleRequest interface.
type MockApiCreateSecurityGroupRuleRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateSecurityGroupRuleRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateSecurityGroupRuleRequestMockRecorder is the mock recorder for MockApiCreateSecurityGroupRuleRequest.
type MockApiCreateSecurityGroupRuleRequestMockRecorder struct {
	mock *MockApiCreateSecurityGroupRuleRequest
}

// NewMockApiCreateSecurityGroupRuleRequest creates a new mock instance.
func NewMockApiCreateSecurityGroupRuleRequest(ctrl *gomock.Controller) *MockApiCreateSecurityGroupRuleRequest {
	mock := &MockApiCreateSecurityGroupRuleRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateSecurityGroupRuleRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateSecurityGroupRuleRequest) EXPECT() *MockApiCreateSecurityGroupRuleRequestMockRecorder {
	return m.recorder
}

// CreateSecurityGroupRulePayload mocks base method.
func (m *MockApiCreateSecurityGroupRuleRequest) CreateSecurityGroupRulePayload(createSecurityGroupRulePayload iaas.CreateSecurityGroupRulePayload) iaas.ApiCreateSecurityGroupRuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroupRulePayload", createSecurityGroupRulePayload)
	ret0, _ := ret[0].(iaas.ApiCreateSecurityGroupRuleRequest)
	return ret0
}

// CreateSecurityGroupRulePayload indicates an expected call of CreateSecurityGroupRulePayload.
func (mr *MockApiCreateSecurityGroupRuleRequestMockRecorder) CreateSecurityGroupRulePayload(createSecurityGroupRulePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroupRulePayload", reflect.TypeOf((*MockApiCreateSecurityGroupRuleRequest)(nil).CreateSecurityGroupRulePayload), createSecurityGroupRulePayload)
}

// Execute mocks base method.
func (m *MockApiCreateSecurityGroupRuleRequest) Execute() (*iaas.SecurityGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.SecurityGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateSecurityGroupRuleRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateSecurityGroupRuleRequest)(nil).Execute))
}

// MockApiCreateServerRequest is a mock of ApiCreateServerRequest interface.
type MockApiCreateServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateServerRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateServerRequestMockRecorder is the mock recorder for MockApiCreateServerRequest.
type MockApiCreateServerRequestMockRecorder struct {
	mock *MockApiCreateServerRequest
}

// NewMockApiCreateServerRequest creates a new mock instance.
func NewMockApiCreateServerRequest(ctrl *gomock.Controller) *MockApiCreateServerRequest {
	mock := &MockApiCreateServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateServerRequest) EXPECT() *MockApiCreateServerRequestMockRecorder {
	return m.recorder
}

// CreateServerPayload mocks base method.
func (m *MockApiCreateServerRequest) CreateServerPayload(createServerPayload iaas.CreateServerPayload) iaas.ApiCreateServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerPayload", createServerPayload)
	ret0, _ := ret[0].(iaas.ApiCreateServerRequest)
	return ret0
}

// CreateServerPayload indicates an expected call of CreateServerPayload.
func (mr *MockApiCreateServerRequestMockRecorder) CreateServerPayload(createServerPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerPayload", reflect.TypeOf((*MockApiCreateServerRequest)(nil).CreateServerPayload), createServerPayload)
}

// Execute mocks base method.
func (m *MockApiCreateServerRequest) Execute() (*iaas.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateServerRequest)(nil).Execute))
}

// MockApiCreateSnapshotRequest is a mock of ApiCreateSnapshotRequest interface.
type MockApiCreateSnapshotRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateSnapshotRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateSnapshotRequestMockRecorder is the mock recorder for MockApiCreateSnapshotRequest.
type MockApiCreateSnapshotRequestMockRecorder struct {
	mock *MockApiCreateSnapshotRequest
}

// NewMockApiCreateSnapshotRequest creates a new mock instance.
func NewMockApiCreateSnapshotRequest(ctrl *gomock.Controller) *MockApiCreateSnapshotRequest {
	mock := &MockApiCreateSnapshotRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateSnapshotRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateSnapshotRequest) EXPECT() *MockApiCreateSnapshotRequestMockRecorder {
	return m.recorder
}

// CreateSnapshotPayload mocks base method.
func (m *MockApiCreateSnapshotRequest) CreateSnapshotPayload(createSnapshotPayload iaas.CreateSnapshotPayload) iaas.ApiCreateSnapshotRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotPayload", createSnapshotPayload)
	ret0, _ := ret[0].(iaas.ApiCreateSnapshotRequest)
	return ret0
}

// CreateSnapshotPayload indicates an expected call of CreateSnapshotPayload.
func (mr *MockApiCreateSnapshotRequestMockRecorder) CreateSnapshotPayload(createSnapshotPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotPayload", reflect.TypeOf((*MockApiCreateSnapshotRequest)(nil).CreateSnapshotPayload), createSnapshotPayload)
}

// Execute mocks base method.
func (m *MockApiCreateSnapshotRequest) Execute() (*iaas.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateSnapshotRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateSnapshotRequest)(nil).Execute))
}

// MockApiCreateVolumeRequest is a mock of ApiCreateVolumeRequest interface.
type MockApiCreateVolumeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateVolumeRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateVolumeRequestMockRecorder is the mock recorder for MockApiCreateVolumeRequest.
type MockApiCreateVolumeRequestMockRecorder struct {
	mock *MockApiCreateVolumeRequest
}

// NewMockApiCreateVolumeRequest creates a new mock instance.
func NewMockApiCreateVolumeRequest(ctrl *gomock.Controller) *MockApiCreateVolumeRequest {
	mock := &MockApiCreateVolumeRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateVolumeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateVolumeRequest) EXPECT() *MockApiCreateVolumeRequestMockRecorder {
	return m.recorder
}

// CreateVolumePayload mocks base method.
func (m *MockApiCreateVolumeRequest) CreateVolumePayload(createVolumePayload iaas.CreateVolumePayload) iaas.ApiCreateVolumeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumePayload", createVolumePayload)
	ret0, _ := ret[0].(iaas.ApiCreateVolumeRequest)
	return ret0
}

// CreateVolumePayload indicates an expected call of CreateVolumePayload.
func (mr *MockApiCreateVolumeRequestMockRecorder) CreateVolumePayload(createVolumePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumePayload", reflect.TypeOf((*MockApiCreateVolumeRequest)(nil).CreateVolumePayload), createVolumePayload)
}

// Execute mocks base method.
func (m *MockApiCreateVolumeRequest) Execute() (*iaas.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateVolumeRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateVolumeRequest)(nil).Execute))
}

// MockApiDeallocateServerRequest is a mock of ApiDeallocateServerRequest interface.
type MockApiDeallocateServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeallocateServerRequestMockRecorder
	isgomock struct{}
}

// MockApiDeallocateServerRequestMockRecorder is the mock recorder for MockApiDeallocateServerRequest.
type MockApiDeallocateServerRequestMockRecorder struct {
	mock *MockApiDeallocateServerRequest
}

// NewMockApiDeallocateServerRequest creates a new mock instance.
func NewMockApiDeallocateServerRequest(ctrl *gomock.Controller) *MockApiDeallocateServerRequest {
	mock := &MockApiDeallocateServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeallocateServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeallocateServerRequest) EXPECT() *MockApiDeallocateServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeallocateServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeallocateServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeallocateServerRequest)(nil).Execute))
}

// MockApiDeleteAffinityGroupRequest is a mock of ApiDeleteAffinityGroupRequest interface.
type MockApiDeleteAffinityGroupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteAffinityGroupRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteAffinityGroupRequestMockRecorder is the mock recorder for MockApiDeleteAffinityGroupRequest.
type MockApiDeleteAffinityGroupRequestMockRecorder struct {
	mock *MockApiDeleteAffinityGroupRequest
}

// NewMockApiDeleteAffinityGroupRequest creates a new mock instance.
func NewMockApiDeleteAffinityGroupRequest(ctrl *gomock.Controller) *MockApiDeleteAffinityGroupRequest {
	mock := &MockApiDeleteAffinityGroupRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteAffinityGroupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteAffinityGroupRequest) EXPECT() *MockApiDeleteAffinityGroupRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteAffinityGroupRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteAffinityGroupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteAffinityGroupRequest)(nil).Execute))
}

// MockApiDeleteBackupRequest is a mock of ApiDeleteBackupRequest interface.
type MockApiDeleteBackupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteBackupRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteBackupRequestMockRecorder is the mock recorder for MockApiDeleteBackupRequest.
type MockApiDeleteBackupRequestMockRecorder struct {
	mock *MockApiDeleteBackupRequest
}

// NewMockApiDeleteBackupRequest creates a new mock instance.
func NewMockApiDeleteBackupRequest(ctrl *gomock.Controller) *MockApiDeleteBackupRequest {
	mock := &MockApiDeleteBackupRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteBackupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteBackupRequest) EXPECT() *MockApiDeleteBackupRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteBackupRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteBackupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteBackupRequest)(nil).Execute))
}

// Force mocks base method.
func (m *MockApiDeleteBackupRequest) Force(force bool) iaas.ApiDeleteBackupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Force", force)
	ret0, _ := ret[0].(iaas.ApiDeleteBackupRequest)
	return ret0
}

// Force indicates an expected call of Force.
func (mr *MockApiDeleteBackupRequestMockRecorder) Force(force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Force", reflect.TypeOf((*MockApiDeleteBackupRequest)(nil).Force), force)
}

// MockApiDeleteImageRequest is a mock of ApiDeleteImageRequest interface.
type MockApiDeleteImageRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteImageRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteImageRequestMockRecorder is the mock recorder for MockApiDeleteImageRequest.
type MockApiDeleteImageRequestMockRecorder struct {
	mock *MockApiDeleteImageRequest
}

// NewMockApiDeleteImageRequest creates a new mock instance.
func NewMockApiDeleteImageRequest(ctrl *gomock.Controller) *MockApiDeleteImageRequest {
	mock := &MockApiDeleteImageRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteImageRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteImageRequest) EXPECT() *MockApiDeleteImageRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteImageRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteImageRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteImageRequest)(nil).Execute))
}

// MockApiDeleteImageShareConsumerRequest is a mock of ApiDeleteImageShareConsumerRequest interface.
type MockApiDeleteImageShareConsumerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteImageShareConsumerRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteImageShareConsumerRequestMockRecorder is the mock recorder for MockApiDeleteImageShareConsumerRequest.
type MockApiDeleteImageShareConsumerRequestMockRecorder struct {
	mock *MockApiDeleteImageShareConsumerRequest
}

// NewMockApiDeleteImageShareConsumerRequest creates a new mock instance.
func NewMockApiDeleteImageShareConsumerRequest(ctrl *gomock.Controller) *MockApiDeleteImageShareConsumerRequest {
	mock := &MockApiDeleteImageShareConsumerRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteImageShareConsumerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteImageShareConsumerRequest) EXPECT() *MockApiDeleteImageShareConsumerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteImageShareConsumerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteImageShareConsumerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteImageShareConsumerRequest)(nil).Execute))
}

// MockApiDeleteImageShareRequest is a mock of ApiDeleteImageShareRequest interface.
type MockApiDeleteImageShareRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteImageShareRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteImageShareRequestMockRecorder is the mock recorder for MockApiDeleteImageShareRequest.
type MockApiDeleteImageShareRequestMockRecorder struct {
	mock *MockApiDeleteImageShareRequest
}

// NewMockApiDeleteImageShareRequest creates a new mock instance.
func NewMockApiDeleteImageShareRequest(ctrl *gomock.Controller) *MockApiDeleteImageShareRequest {
	mock := &MockApiDeleteImageShareRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteImageShareRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteImageShareRequest) EXPECT() *MockApiDeleteImageShareRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteImageShareRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteImageShareRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteImageShareRequest)(nil).Execute))
}

// MockApiDeleteKeyPairRequest is a mock of ApiDeleteKeyPairRequest interface.
type MockApiDeleteKeyPairRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteKeyPairRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteKeyPairRequestMockRecorder is the mock recorder for MockApiDeleteKeyPairRequest.
type MockApiDeleteKeyPairRequestMockRecorder struct {
	mock *MockApiDeleteKeyPairRequest
}

// NewMockApiDeleteKeyPairRequest creates a new mock instance.
func NewMockApiDeleteKeyPairRequest(ctrl *gomock.Controller) *MockApiDeleteKeyPairRequest {
	mock := &MockApiDeleteKeyPairRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteKeyPairRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteKeyPairRequest) EXPECT() *MockApiDeleteKeyPairRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteKeyPairRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteKeyPairRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteKeyPairRequest)(nil).Execute))
}

// MockApiDeleteNetworkAreaRangeRequest is a mock of ApiDeleteNetworkAreaRangeRequest interface.
type MockApiDeleteNetworkAreaRangeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteNetworkAreaRangeRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteNetworkAreaRangeRequestMockRecorder is the mock recorder for MockApiDeleteNetworkAreaRangeRequest.
type MockApiDeleteNetworkAreaRangeRequestMockRecorder struct {
	mock *MockApiDeleteNetworkAreaRangeRequest
}

// NewMockApiDeleteNetworkAreaRangeRequest creates a new mock instance.
func NewMockApiDeleteNetworkAreaRangeRequest(ctrl *gomock.Controller) *MockApiDeleteNetworkAreaRangeRequest {
	mock := &MockApiDeleteNetworkAreaRangeRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteNetworkAreaRangeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteNetworkAreaRangeRequest) EXPECT() *MockApiDeleteNetworkAreaRangeRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteNetworkAreaRangeRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteNetworkAreaRangeRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteNetworkAreaRangeRequest)(nil).Execute))
}

// MockApiDeleteNetworkAreaRequest is a mock of ApiDeleteNetworkAreaRequest interface.
type MockApiDeleteNetworkAreaRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteNetworkAreaRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteNetworkAreaRequestMockRecorder is the mock recorder for MockApiDeleteNetworkAreaRequest.
type MockApiDeleteNetworkAreaRequestMockRecorder struct {
	mock *MockApiDeleteNetworkAreaRequest
}

// NewMockApiDeleteNetworkAreaRequest creates a new mock instance.
func NewMockApiDeleteNetworkAreaRequest(ctrl *gomock.Controller) *MockApiDeleteNetworkAreaRequest {
	mock := &MockApiDeleteNetworkAreaRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteNetworkAreaRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteNetworkAreaRequest) EXPECT() *MockApiDeleteNetworkAreaRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteNetworkAreaRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteNetworkAreaRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteNetworkAreaRequest)(nil).Execute))
}

// MockApiDeleteNetworkAreaRouteRequest is a mock of ApiDeleteNetworkAreaRouteRequest interface.
type MockApiDeleteNetworkAreaRouteRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteNetworkAreaRouteRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteNetworkAreaRouteRequestMockRecorder is the mock recorder for MockApiDeleteNetworkAreaRouteRequest.
type MockApiDeleteNetworkAreaRouteRequestMockRecorder struct {
	mock *MockApiDeleteNetworkAreaRouteRequest
}

// NewMockApiDeleteNetworkAreaRouteRequest creates a new mock instance.
func NewMockApiDeleteNetworkAreaRouteRequest(ctrl *gomock.Controller) *MockApiDeleteNetworkAreaRouteRequest {
	mock := &MockApiDeleteNetworkAreaRouteRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteNetworkAreaRouteRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteNetworkAreaRouteRequest) EXPECT() *MockApiDeleteNetworkAreaRouteRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteNetworkAreaRouteRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteNetworkAreaRouteRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteNetworkAreaRouteRequest)(nil).Execute))
}

// MockApiDeleteNetworkRequest is a mock of ApiDeleteNetworkRequest interface.
type MockApiDeleteNetworkRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteNetworkRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteNetworkRequestMockRecorder is the mock recorder for MockApiDeleteNetworkRequest.
type MockApiDeleteNetworkRequestMockRecorder struct {
	mock *MockApiDeleteNetworkRequest
}

// NewMockApiDeleteNetworkRequest creates a new mock instance.
func NewMockApiDeleteNetworkRequest(ctrl *gomock.Controller) *MockApiDeleteNetworkRequest {
	mock := &MockApiDeleteNetworkRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteNetworkRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteNetworkRequest) EXPECT() *MockApiDeleteNetworkRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteNetworkRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteNetworkRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteNetworkRequest)(nil).Execute))
}

// MockApiDeleteNicRequest is a mock of ApiDeleteNicRequest interface.
type MockApiDeleteNicRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteNicRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteNicRequestMockRecorder is the mock recorder for MockApiDeleteNicRequest.
type MockApiDeleteNicRequestMockRecorder struct {
	mock *MockApiDeleteNicRequest
}

// NewMockApiDeleteNicRequest creates a new mock instance.
func NewMockApiDeleteNicRequest(ctrl *gomock.Controller) *MockApiDeleteNicRequest {
	mock := &MockApiDeleteNicRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteNicRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteNicRequest) EXPECT() *MockApiDeleteNicRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteNicRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteNicRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteNicRequest)(nil).Execute))
}

// MockApiDeletePublicIPRequest is a mock of ApiDeletePublicIPRequest interface.
type MockApiDeletePublicIPRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeletePublicIPRequestMockRecorder
	isgomock struct{}
}

// MockApiDeletePublicIPRequestMockRecorder is the mock recorder for MockApiDeletePublicIPRequest.
type MockApiDeletePublicIPRequestMockRecorder struct {
	mock *MockApiDeletePublicIPRequest
}

// NewMockApiDeletePublicIPRequest creates a new mock instance.
func NewMockApiDeletePublicIPRequest(ctrl *gomock.Controller) *MockApiDeletePublicIPRequest {
	mock := &MockApiDeletePublicIPRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeletePublicIPRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeletePublicIPRequest) EXPECT() *MockApiDeletePublicIPRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeletePublicIPRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeletePublicIPRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeletePublicIPRequest)(nil).Execute))
}

// MockApiDeleteSecurityGroupRequest is a mock of ApiDeleteSecurityGroupRequest interface.
type MockApiDeleteSecurityGroupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteSecurityGroupRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteSecurityGroupRequestMockRecorder is the mock recorder for MockApiDeleteSecurityGroupRequest.
type MockApiDeleteSecurityGroupRequestMockRecorder struct {
	mock *MockApiDeleteSecurityGroupRequest
}

// NewMockApiDeleteSecurityGroupRequest creates a new mock instance.
func NewMockApiDeleteSecurityGroupRequest(ctrl *gomock.Controller) *MockApiDeleteSecurityGroupRequest {
	mock := &MockApiDeleteSecurityGroupRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteSecurityGroupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteSecurityGroupRequest) EXPECT() *MockApiDeleteSecurityGroupRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteSecurityGroupRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteSecurityGroupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteSecurityGroupRequest)(nil).Execute))
}

// MockApiDeleteSecurityGroupRuleRequest is a mock of ApiDeleteSecurityGroupRuleRequest interface.
type MockApiDeleteSecurityGroupRuleRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteSecurityGroupRuleRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteSecurityGroupRuleRequestMockRecorder is the mock recorder for MockApiDeleteSecurityGroupRuleRequest.
type MockApiDeleteSecurityGroupRuleRequestMockRecorder struct {
	mock *MockApiDeleteSecurityGroupRuleRequest
}

// NewMockApiDeleteSecurityGroupRuleRequest creates a new mock instance.
func NewMockApiDeleteSecurityGroupRuleRequest(ctrl *gomock.Controller) *MockApiDeleteSecurityGroupRuleRequest {
	mock := &MockApiDeleteSecurityGroupRuleRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteSecurityGroupRuleRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteSecurityGroupRuleRequest) EXPECT() *MockApiDeleteSecurityGroupRuleRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteSecurityGroupRuleRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteSecurityGroupRuleRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteSecurityGroupRuleRequest)(nil).Execute))
}

// MockApiDeleteServerRequest is a mock of ApiDeleteServerRequest interface.
type MockApiDeleteServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteServerRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteServerRequestMockRecorder is the mock recorder for MockApiDeleteServerRequest.
type MockApiDeleteServerRequestMockRecorder struct {
	mock *MockApiDeleteServerRequest
}

// NewMockApiDeleteServerRequest creates a new mock instance.
func NewMockApiDeleteServerRequest(ctrl *gomock.Controller) *MockApiDeleteServerRequest {
	mock := &MockApiDeleteServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteServerRequest) EXPECT() *MockApiDeleteServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteServerRequest)(nil).Execute))
}

// MockApiDeleteSnapshotRequest is a mock of ApiDeleteSnapshotRequest interface.
type MockApiDeleteSnapshotRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteSnapshotRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteSnapshotRequestMockRecorder is the mock recorder for MockApiDeleteSnapshotRequest.
type MockApiDeleteSnapshotRequestMockRecorder struct {
	mock *MockApiDeleteSnapshotRequest
}

// NewMockApiDeleteSnapshotRequest creates a new mock instance.
func NewMockApiDeleteSnapshotRequest(ctrl *gomock.Controller) *MockApiDeleteSnapshotRequest {
	mock := &MockApiDeleteSnapshotRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteSnapshotRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteSnapshotRequest) EXPECT() *MockApiDeleteSnapshotRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteSnapshotRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteSnapshotRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteSnapshotRequest)(nil).Execute))
}

// MockApiDeleteVolumeRequest is a mock of ApiDeleteVolumeRequest interface.
type MockApiDeleteVolumeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteVolumeRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteVolumeRequestMockRecorder is the mock recorder for MockApiDeleteVolumeRequest.
type MockApiDeleteVolumeRequestMockRecorder struct {
	mock *MockApiDeleteVolumeRequest
}

// NewMockApiDeleteVolumeRequest creates a new mock instance.
func NewMockApiDeleteVolumeRequest(ctrl *gomock.Controller) *MockApiDeleteVolumeRequest {
	mock := &MockApiDeleteVolumeRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteVolumeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteVolumeRequest) EXPECT() *MockApiDeleteVolumeRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteVolumeRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteVolumeRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteVolumeRequest)(nil).Execute))
}

// MockApiGetAffinityGroupRequest is a mock of ApiGetAffinityGroupRequest interface.
type MockApiGetAffinityGroupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetAffinityGroupRequestMockRecorder
	isgomock struct{}
}

// MockApiGetAffinityGroupRequestMockRecorder is the mock recorder for MockApiGetAffinityGroupRequest.
type MockApiGetAffinityGroupRequestMockRecorder struct {
	mock *MockApiGetAffinityGroupRequest
}

// NewMockApiGetAffinityGroupRequest creates a new mock instance.
func NewMockApiGetAffinityGroupRequest(ctrl *gomock.Controller) *MockApiGetAffinityGroupRequest {
	mock := &MockApiGetAffinityGroupRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetAffinityGroupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetAffinityGroupRequest) EXPECT() *MockApiGetAffinityGroupRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetAffinityGroupRequest) Execute() (*iaas.AffinityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.AffinityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetAffinityGroupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetAffinityGroupRequest)(nil).Execute))
}

// MockApiGetAttachedVolumeRequest is a mock of ApiGetAttachedVolumeRequest interface.
type MockApiGetAttachedVolumeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetAttachedVolumeRequestMockRecorder
	isgomock struct{}
}

// MockApiGetAttachedVolumeRequestMockRecorder is the mock recorder for MockApiGetAttachedVolumeRequest.
type MockApiGetAttachedVolumeRequestMockRecorder struct {
	mock *MockApiGetAttachedVolumeRequest
}

// NewMockApiGetAttachedVolumeRequest creates a new mock instance.
func NewMockApiGetAttachedVolumeRequest(ctrl *gomock.Controller) *MockApiGetAttachedVolumeRequest {
	mock := &MockApiGetAttachedVolumeRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetAttachedVolumeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetAttachedVolumeRequest) EXPECT() *MockApiGetAttachedVolumeRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetAttachedVolumeRequest) Execute() (*iaas.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetAttachedVolumeRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetAttachedVolumeRequest)(nil).Execute))
}

// MockApiGetBackupRequest is a mock of ApiGetBackupRequest interface.
type MockApiGetBackupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetBackupRequestMockRecorder
	isgomock struct{}
}

// MockApiGetBackupRequestMockRecorder is the mock recorder for MockApiGetBackupRequest.
type MockApiGetBackupRequestMockRecorder struct {
	mock *MockApiGetBackupRequest
}

// NewMockApiGetBackupRequest creates a new mock instance.
func NewMockApiGetBackupRequest(ctrl *gomock.Controller) *MockApiGetBackupRequest {
	mock := &MockApiGetBackupRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetBackupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetBackupRequest) EXPECT() *MockApiGetBackupRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetBackupRequest) Execute() (*iaas.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetBackupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetBackupRequest)(nil).Execute))
}

// MockApiGetImageRequest is a mock of ApiGetImageRequest interface.
type MockApiGetImageRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetImageRequestMockRecorder
	isgomock struct{}
}

// MockApiGetImageRequestMockRecorder is the mock recorder for MockApiGetImageRequest.
type MockApiGetImageRequestMockRecorder struct {
	mock *MockApiGetImageRequest
}

// NewMockApiGetImageRequest creates a new mock instance.
func NewMockApiGetImageRequest(ctrl *gomock.Controller) *MockApiGetImageRequest {
	mock := &MockApiGetImageRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetImageRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetImageRequest) EXPECT() *MockApiGetImageRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetImageRequest) Execute() (*iaas.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetImageRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetImageRequest)(nil).Execute))
}

// MockApiGetImageShareConsumerRequest is a mock of ApiGetImageShareConsumerRequest interface.
type MockApiGetImageShareConsumerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetImageShareConsumerRequestMockRecorder
	isgomock struct{}
}

// MockApiGetImageShareConsumerRequestMockRecorder is the mock recorder for MockApiGetImageShareConsumerRequest.
type MockApiGetImageShareConsumerRequestMockRecorder struct {
	mock *MockApiGetImageShareConsumerRequest
}

// NewMockApiGetImageShareConsumerRequest creates a new mock instance.
func NewMockApiGetImageShareConsumerRequest(ctrl *gomock.Controller) *MockApiGetImageShareConsumerRequest {
	mock := &MockApiGetImageShareConsumerRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetImageShareConsumerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetImageShareConsumerRequest) EXPECT() *MockApiGetImageShareConsumerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetImageShareConsumerRequest) Execute() (*iaas.ImageShareConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ImageShareConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetImageShareConsumerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetImageShareConsumerRequest)(nil).Execute))
}

// MockApiGetImageShareRequest is a mock of ApiGetImageShareRequest interface.
type MockApiGetImageShareRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetImageShareRequestMockRecorder
	isgomock struct{}
}

// MockApiGetImageShareRequestMockRecorder is the mock recorder for MockApiGetImageShareRequest.
type MockApiGetImageShareRequestMockRecorder struct {
	mock *MockApiGetImageShareRequest
}

// NewMockApiGetImageShareRequest creates a new mock instance.
func NewMockApiGetImageShareRequest(ctrl *gomock.Controller) *MockApiGetImageShareRequest {
	mock := &MockApiGetImageShareRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetImageShareRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetImageShareRequest) EXPECT() *MockApiGetImageShareRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetImageShareRequest) Execute() (*iaas.ImageShare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ImageShare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetImageShareRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetImageShareRequest)(nil).Execute))
}

// MockApiGetKeyPairRequest is a mock of ApiGetKeyPairRequest interface.
type MockApiGetKeyPairRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetKeyPairRequestMockRecorder
	isgomock struct{}
}

// MockApiGetKeyPairRequestMockRecorder is the mock recorder for MockApiGetKeyPairRequest.
type MockApiGetKeyPairRequestMockRecorder struct {
	mock *MockApiGetKeyPairRequest
}

// NewMockApiGetKeyPairRequest creates a new mock instance.
func NewMockApiGetKeyPairRequest(ctrl *gomock.Controller) *MockApiGetKeyPairRequest {
	mock := &MockApiGetKeyPairRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetKeyPairRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetKeyPairRequest) EXPECT() *MockApiGetKeyPairRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetKeyPairRequest) Execute() (*iaas.Keypair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Keypair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetKeyPairRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetKeyPairRequest)(nil).Execute))
}

// MockApiGetMachineTypeRequest is a mock of ApiGetMachineTypeRequest interface.
type MockApiGetMachineTypeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetMachineTypeRequestMockRecorder
	isgomock struct{}
}

// MockApiGetMachineTypeRequestMockRecorder is the mock recorder for MockApiGetMachineTypeRequest.
type MockApiGetMachineTypeRequestMockRecorder struct {
	mock *MockApiGetMachineTypeRequest
}

// NewMockApiGetMachineTypeRequest creates a new mock instance.
func NewMockApiGetMachineTypeRequest(ctrl *gomock.Controller) *MockApiGetMachineTypeRequest {
	mock := &MockApiGetMachineTypeRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetMachineTypeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetMachineTypeRequest) EXPECT() *MockApiGetMachineTypeRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetMachineTypeRequest) Execute() (*iaas.MachineType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.MachineType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetMachineTypeRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetMachineTypeRequest)(nil).Execute))
}

// MockApiGetNetworkAreaRangeRequest is a mock of ApiGetNetworkAreaRangeRequest interface.
type MockApiGetNetworkAreaRangeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetNetworkAreaRangeRequestMockRecorder
	isgomock struct{}
}

// MockApiGetNetworkAreaRangeRequestMockRecorder is the mock recorder for MockApiGetNetworkAreaRangeRequest.
type MockApiGetNetworkAreaRangeRequestMockRecorder struct {
	mock *MockApiGetNetworkAreaRangeRequest
}

// NewMockApiGetNetworkAreaRangeRequest creates a new mock instance.
func NewMockApiGetNetworkAreaRangeRequest(ctrl *gomock.Controller) *MockApiGetNetworkAreaRangeRequest {
	mock := &MockApiGetNetworkAreaRangeRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetNetworkAreaRangeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetNetworkAreaRangeRequest) EXPECT() *MockApiGetNetworkAreaRangeRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetNetworkAreaRangeRequest) Execute() (*iaas.NetworkRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NetworkRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetNetworkAreaRangeRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetNetworkAreaRangeRequest)(nil).Execute))
}

// MockApiGetNetworkAreaRequest is a mock of ApiGetNetworkAreaRequest interface.
type MockApiGetNetworkAreaRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetNetworkAreaRequestMockRecorder
	isgomock struct{}
}

// MockApiGetNetworkAreaRequestMockRecorder is the mock recorder for MockApiGetNetworkAreaRequest.
type MockApiGetNetworkAreaRequestMockRecorder struct {
	mock *MockApiGetNetworkAreaRequest
}

// NewMockApiGetNetworkAreaRequest creates a new mock instance.
func NewMockApiGetNetworkAreaRequest(ctrl *gomock.Controller) *MockApiGetNetworkAreaRequest {
	mock := &MockApiGetNetworkAreaRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetNetworkAreaRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetNetworkAreaRequest) EXPECT() *MockApiGetNetworkAreaRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetNetworkAreaRequest) Execute() (*iaas.NetworkArea, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NetworkArea)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetNetworkAreaRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetNetworkAreaRequest)(nil).Execute))
}

// MockApiGetNetworkAreaRouteRequest is a mock of ApiGetNetworkAreaRouteRequest interface.
type MockApiGetNetworkAreaRouteRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetNetworkAreaRouteRequestMockRecorder
	isgomock struct{}
}

// MockApiGetNetworkAreaRouteRequestMockRecorder is the mock recorder for MockApiGetNetworkAreaRouteRequest.
type MockApiGetNetworkAreaRouteRequestMockRecorder struct {
	mock *MockApiGetNetworkAreaRouteRequest
}

// NewMockApiGetNetworkAreaRouteRequest creates a new mock instance.
func NewMockApiGetNetworkAreaRouteRequest(ctrl *gomock.Controller) *MockApiGetNetworkAreaRouteRequest {
	mock := &MockApiGetNetworkAreaRouteRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetNetworkAreaRouteRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetNetworkAreaRouteRequest) EXPECT() *MockApiGetNetworkAreaRouteRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetNetworkAreaRouteRequest) Execute() (*iaas.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetNetworkAreaRouteRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetNetworkAreaRouteRequest)(nil).Execute))
}

// MockApiGetNetworkRequest is a mock of ApiGetNetworkRequest interface.
type MockApiGetNetworkRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetNetworkRequestMockRecorder
	isgomock struct{}
}

// MockApiGetNetworkRequestMockRecorder is the mock recorder for MockApiGetNetworkRequest.
type MockApiGetNetworkRequestMockRecorder struct {
	mock *MockApiGetNetworkRequest
}

// NewMockApiGetNetworkRequest creates a new mock instance.
func NewMockApiGetNetworkRequest(ctrl *gomock.Controller) *MockApiGetNetworkRequest {
	mock := &MockApiGetNetworkRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetNetworkRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetNetworkRequest) EXPECT() *MockApiGetNetworkRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetNetworkRequest) Execute() (*iaas.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetNetworkRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetNetworkRequest)(nil).Execute))
}

// MockApiGetNicRequest is a mock of ApiGetNicRequest interface.
type MockApiGetNicRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetNicRequestMockRecorder
	isgomock struct{}
}

// MockApiGetNicRequestMockRecorder is the mock recorder for MockApiGetNicRequest.
type MockApiGetNicRequestMockRecorder struct {
	mock *MockApiGetNicRequest
}

// NewMockApiGetNicRequest creates a new mock instance.
func NewMockApiGetNicRequest(ctrl *gomock.Controller) *MockApiGetNicRequest {
	mock := &MockApiGetNicRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetNicRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetNicRequest) EXPECT() *MockApiGetNicRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetNicRequest) Execute() (*iaas.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetNicRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetNicRequest)(nil).Execute))
}

// MockApiGetOrganizationRequestRequest is a mock of ApiGetOrganizationRequestRequest interface.
type MockApiGetOrganizationRequestRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetOrganizationRequestRequestMockRecorder
	isgomock struct{}
}

// MockApiGetOrganizationRequestRequestMockRecorder is the mock recorder for MockApiGetOrganizationRequestRequest.
type MockApiGetOrganizationRequestRequestMockRecorder struct {
	mock *MockApiGetOrganizationRequestRequest
}

// NewMockApiGetOrganizationRequestRequest creates a new mock instance.
func NewMockApiGetOrganizationRequestRequest(ctrl *gomock.Controller) *MockApiGetOrganizationRequestRequest {
	mock := &MockApiGetOrganizationRequestRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetOrganizationRequestRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetOrganizationRequestRequest) EXPECT() *MockApiGetOrganizationRequestRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetOrganizationRequestRequest) Execute() (*iaas.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetOrganizationRequestRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetOrganizationRequestRequest)(nil).Execute))
}

// MockApiGetProjectNICRequest is a mock of ApiGetProjectNICRequest interface.
type MockApiGetProjectNICRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetProjectNICRequestMockRecorder
	isgomock struct{}
}

// MockApiGetProjectNICRequestMockRecorder is the mock recorder for MockApiGetProjectNICRequest.
type MockApiGetProjectNICRequestMockRecorder struct {
	mock *MockApiGetProjectNICRequest
}

// NewMockApiGetProjectNICRequest creates a new mock instance.
func NewMockApiGetProjectNICRequest(ctrl *gomock.Controller) *MockApiGetProjectNICRequest {
	mock := &MockApiGetProjectNICRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetProjectNICRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetProjectNICRequest) EXPECT() *MockApiGetProjectNICRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetProjectNICRequest) Execute() (*iaas.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetProjectNICRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetProjectNICRequest)(nil).Execute))
}

// MockApiGetProjectRequestRequest is a mock of ApiGetProjectRequestRequest interface.
type MockApiGetProjectRequestRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetProjectRequestRequestMockRecorder
	isgomock struct{}
}

// MockApiGetProjectRequestRequestMockRecorder is the mock recorder for MockApiGetProjectRequestRequest.
type MockApiGetProjectRequestRequestMockRecorder struct {
	mock *MockApiGetProjectRequestRequest
}

// NewMockApiGetProjectRequestRequest creates a new mock instance.
func NewMockApiGetProjectRequestRequest(ctrl *gomock.Controller) *MockApiGetProjectRequestRequest {
	mock := &MockApiGetProjectRequestRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetProjectRequestRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetProjectRequestRequest) EXPECT() *MockApiGetProjectRequestRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetProjectRequestRequest) Execute() (*iaas.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetProjectRequestRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetProjectRequestRequest)(nil).Execute))
}

// MockApiGetPublicIPRequest is a mock of ApiGetPublicIPRequest interface.
type MockApiGetPublicIPRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetPublicIPRequestMockRecorder
	isgomock struct{}
}

// MockApiGetPublicIPRequestMockRecorder is the mock recorder for MockApiGetPublicIPRequest.
type MockApiGetPublicIPRequestMockRecorder struct {
	mock *MockApiGetPublicIPRequest
}

// NewMockApiGetPublicIPRequest creates a new mock instance.
func NewMockApiGetPublicIPRequest(ctrl *gomock.Controller) *MockApiGetPublicIPRequest {
	mock := &MockApiGetPublicIPRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetPublicIPRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetPublicIPRequest) EXPECT() *MockApiGetPublicIPRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetPublicIPRequest) Execute() (*iaas.PublicIp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.PublicIp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetPublicIPRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetPublicIPRequest)(nil).Execute))
}

// MockApiGetSecurityGroupRequest is a mock of ApiGetSecurityGroupRequest interface.
type MockApiGetSecurityGroupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetSecurityGroupRequestMockRecorder
	isgomock struct{}
}

// MockApiGetSecurityGroupRequestMockRecorder is the mock recorder for MockApiGetSecurityGroupRequest.
type MockApiGetSecurityGroupRequestMockRecorder struct {
	mock *MockApiGetSecurityGroupRequest
}

// NewMockApiGetSecurityGroupRequest creates a new mock instance.
func NewMockApiGetSecurityGroupRequest(ctrl *gomock.Controller) *MockApiGetSecurityGroupRequest {
	mock := &MockApiGetSecurityGroupRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetSecurityGroupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetSecurityGroupRequest) EXPECT() *MockApiGetSecurityGroupRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetSecurityGroupRequest) Execute() (*iaas.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetSecurityGroupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetSecurityGroupRequest)(nil).Execute))
}

// MockApiGetSecurityGroupRuleRequest is a mock of ApiGetSecurityGroupRuleRequest interface.
type MockApiGetSecurityGroupRuleRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetSecurityGroupRuleRequestMockRecorder
	isgomock struct{}
}

// MockApiGetSecurityGroupRuleRequestMockRecorder is the mock recorder for MockApiGetSecurityGroupRuleRequest.
type MockApiGetSecurityGroupRuleRequestMockRecorder struct {
	mock *MockApiGetSecurityGroupRuleRequest
}

// NewMockApiGetSecurityGroupRuleRequest creates a new mock instance.
func NewMockApiGetSecurityGroupRuleRequest(ctrl *gomock.Controller) *MockApiGetSecurityGroupRuleRequest {
	mock := &MockApiGetSecurityGroupRuleRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetSecurityGroupRuleRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetSecurityGroupRuleRequest) EXPECT() *MockApiGetSecurityGroupRuleRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetSecurityGroupRuleRequest) Execute() (*iaas.SecurityGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.SecurityGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetSecurityGroupRuleRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetSecurityGroupRuleRequest)(nil).Execute))
}

// MockApiGetServerConsoleRequest is a mock of ApiGetServerConsoleRequest interface.
type MockApiGetServerConsoleRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetServerConsoleRequestMockRecorder
	isgomock struct{}
}

// MockApiGetServerConsoleRequestMockRecorder is the mock recorder for MockApiGetServerConsoleRequest.
type MockApiGetServerConsoleRequestMockRecorder struct {
	mock *MockApiGetServerConsoleRequest
}

// NewMockApiGetServerConsoleRequest creates a new mock instance.
func NewMockApiGetServerConsoleRequest(ctrl *gomock.Controller) *MockApiGetServerConsoleRequest {
	mock := &MockApiGetServerConsoleRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetServerConsoleRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetServerConsoleRequest) EXPECT() *MockApiGetServerConsoleRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetServerConsoleRequest) Execute() (*iaas.ServerConsoleUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ServerConsoleUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetServerConsoleRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetServerConsoleRequest)(nil).Execute))
}

// MockApiGetServerLogRequest is a mock of ApiGetServerLogRequest interface.
type MockApiGetServerLogRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetServerLogRequestMockRecorder
	isgomock struct{}
}

// MockApiGetServerLogRequestMockRecorder is the mock recorder for MockApiGetServerLogRequest.
type MockApiGetServerLogRequestMockRecorder struct {
	mock *MockApiGetServerLogRequest
}

// NewMockApiGetServerLogRequest creates a new mock instance.
func NewMockApiGetServerLogRequest(ctrl *gomock.Controller) *MockApiGetServerLogRequest {
	mock := &MockApiGetServerLogRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetServerLogRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetServerLogRequest) EXPECT() *MockApiGetServerLogRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetServerLogRequest) Execute() (*iaas.GetServerLog200Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.GetServerLog200Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetServerLogRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetServerLogRequest)(nil).Execute))
}

// Length mocks base method.
func (m *MockApiGetServerLogRequest) Length(length int64) iaas.ApiGetServerLogRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Length", length)
	ret0, _ := ret[0].(iaas.ApiGetServerLogRequest)
	return ret0
}

// Length indicates an expected call of Length.
func (mr *MockApiGetServerLogRequestMockRecorder) Length(length any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockApiGetServerLogRequest)(nil).Length), length)
}

// MockApiGetServerRequest is a mock of ApiGetServerRequest interface.
type MockApiGetServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetServerRequestMockRecorder
	isgomock struct{}
}

// MockApiGetServerRequestMockRecorder is the mock recorder for MockApiGetServerRequest.
type MockApiGetServerRequestMockRecorder struct {
	mock *MockApiGetServerRequest
}

// NewMockApiGetServerRequest creates a new mock instance.
func NewMockApiGetServerRequest(ctrl *gomock.Controller) *MockApiGetServerRequest {
	mock := &MockApiGetServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetServerRequest) EXPECT() *MockApiGetServerRequestMockRecorder {
	return m.recorder
}

// Details mocks base method.
func (m *MockApiGetServerRequest) Details(details bool) iaas.ApiGetServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Details", details)
	ret0, _ := ret[0].(iaas.ApiGetServerRequest)
	return ret0
}

// Details indicates an expected call of Details.
func (mr *MockApiGetServerRequestMockRecorder) Details(details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Details", reflect.TypeOf((*MockApiGetServerRequest)(nil).Details), details)
}

// Execute mocks base method.
func (m *MockApiGetServerRequest) Execute() (*iaas.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetServerRequest)(nil).Execute))
}

// MockApiGetSnapshotRequest is a mock of ApiGetSnapshotRequest interface.
type MockApiGetSnapshotRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetSnapshotRequestMockRecorder
	isgomock struct{}
}

// MockApiGetSnapshotRequestMockRecorder is the mock recorder for MockApiGetSnapshotRequest.
type MockApiGetSnapshotRequestMockRecorder struct {
	mock *MockApiGetSnapshotRequest
}

// NewMockApiGetSnapshotRequest creates a new mock instance.
func NewMockApiGetSnapshotRequest(ctrl *gomock.Controller) *MockApiGetSnapshotRequest {
	mock := &MockApiGetSnapshotRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetSnapshotRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetSnapshotRequest) EXPECT() *MockApiGetSnapshotRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetSnapshotRequest) Execute() (*iaas.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetSnapshotRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetSnapshotRequest)(nil).Execute))
}

// MockApiGetVolumePerformanceClassRequest is a mock of ApiGetVolumePerformanceClassRequest interface.
type MockApiGetVolumePerformanceClassRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetVolumePerformanceClassRequestMockRecorder
	isgomock struct{}
}

// MockApiGetVolumePerformanceClassRequestMockRecorder is the mock recorder for MockApiGetVolumePerformanceClassRequest.
type MockApiGetVolumePerformanceClassRequestMockRecorder struct {
	mock *MockApiGetVolumePerformanceClassRequest
}

// NewMockApiGetVolumePerformanceClassRequest creates a new mock instance.
func NewMockApiGetVolumePerformanceClassRequest(ctrl *gomock.Controller) *MockApiGetVolumePerformanceClassRequest {
	mock := &MockApiGetVolumePerformanceClassRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetVolumePerformanceClassRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetVolumePerformanceClassRequest) EXPECT() *MockApiGetVolumePerformanceClassRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetVolumePerformanceClassRequest) Execute() (*iaas.VolumePerformanceClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.VolumePerformanceClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetVolumePerformanceClassRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetVolumePerformanceClassRequest)(nil).Execute))
}

// MockApiGetVolumeRequest is a mock of ApiGetVolumeRequest interface.
type MockApiGetVolumeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetVolumeRequestMockRecorder
	isgomock struct{}
}

// MockApiGetVolumeRequestMockRecorder is the mock recorder for MockApiGetVolumeRequest.
type MockApiGetVolumeRequestMockRecorder struct {
	mock *MockApiGetVolumeRequest
}

// NewMockApiGetVolumeRequest creates a new mock instance.
func NewMockApiGetVolumeRequest(ctrl *gomock.Controller) *MockApiGetVolumeRequest {
	mock := &MockApiGetVolumeRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetVolumeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetVolumeRequest) EXPECT() *MockApiGetVolumeRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetVolumeRequest) Execute() (*iaas.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetVolumeRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetVolumeRequest)(nil).Execute))
}

// MockApiListAffinityGroupsRequest is a mock of ApiListAffinityGroupsRequest interface.
type MockApiListAffinityGroupsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListAffinityGroupsRequestMockRecorder
	isgomock struct{}
}

// MockApiListAffinityGroupsRequestMockRecorder is the mock recorder for MockApiListAffinityGroupsRequest.
type MockApiListAffinityGroupsRequestMockRecorder struct {
	mock *MockApiListAffinityGroupsRequest
}

// NewMockApiListAffinityGroupsRequest creates a new mock instance.
func NewMockApiListAffinityGroupsRequest(ctrl *gomock.Controller) *MockApiListAffinityGroupsRequest {
	mock := &MockApiListAffinityGroupsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListAffinityGroupsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListAffinityGroupsRequest) EXPECT() *MockApiListAffinityGroupsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListAffinityGroupsRequest) Execute() (*iaas.AffinityGroupListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.AffinityGroupListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListAffinityGroupsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListAffinityGroupsRequest)(nil).Execute))
}

// MockApiListAttachedVolumesRequest is a mock of ApiListAttachedVolumesRequest interface.
type MockApiListAttachedVolumesRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListAttachedVolumesRequestMockRecorder
	isgomock struct{}
}

// MockApiListAttachedVolumesRequestMockRecorder is the mock recorder for MockApiListAttachedVolumesRequest.
type MockApiListAttachedVolumesRequestMockRecorder struct {
	mock *MockApiListAttachedVolumesRequest
}

// NewMockApiListAttachedVolumesRequest creates a new mock instance.
func NewMockApiListAttachedVolumesRequest(ctrl *gomock.Controller) *MockApiListAttachedVolumesRequest {
	mock := &MockApiListAttachedVolumesRequest{ctrl: ctrl}
	mock.recorder = &MockApiListAttachedVolumesRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListAttachedVolumesRequest) EXPECT() *MockApiListAttachedVolumesRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListAttachedVolumesRequest) Execute() (*iaas.VolumeAttachmentListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.VolumeAttachmentListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListAttachedVolumesRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListAttachedVolumesRequest)(nil).Execute))
}

// MockApiListAvailabilityZonesRequest is a mock of ApiListAvailabilityZonesRequest interface.
type MockApiListAvailabilityZonesRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListAvailabilityZonesRequestMockRecorder
	isgomock struct{}
}

// MockApiListAvailabilityZonesRequestMockRecorder is the mock recorder for MockApiListAvailabilityZonesRequest.
type MockApiListAvailabilityZonesRequestMockRecorder struct {
	mock *MockApiListAvailabilityZonesRequest
}

// NewMockApiListAvailabilityZonesRequest creates a new mock instance.
func NewMockApiListAvailabilityZonesRequest(ctrl *gomock.Controller) *MockApiListAvailabilityZonesRequest {
	mock := &MockApiListAvailabilityZonesRequest{ctrl: ctrl}
	mock.recorder = &MockApiListAvailabilityZonesRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListAvailabilityZonesRequest) EXPECT() *MockApiListAvailabilityZonesRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListAvailabilityZonesRequest) Execute() (*iaas.AvailabilityZoneListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.AvailabilityZoneListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListAvailabilityZonesRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListAvailabilityZonesRequest)(nil).Execute))
}

// MockApiListBackupsRequest is a mock of ApiListBackupsRequest interface.
type MockApiListBackupsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListBackupsRequestMockRecorder
	isgomock struct{}
}

// MockApiListBackupsRequestMockRecorder is the mock recorder for MockApiListBackupsRequest.
type MockApiListBackupsRequestMockRecorder struct {
	mock *MockApiListBackupsRequest
}

// NewMockApiListBackupsRequest creates a new mock instance.
func NewMockApiListBackupsRequest(ctrl *gomock.Controller) *MockApiListBackupsRequest {
	mock := &MockApiListBackupsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListBackupsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListBackupsRequest) EXPECT() *MockApiListBackupsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListBackupsRequest) Execute() (*iaas.BackupListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.BackupListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListBackupsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListBackupsRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListBackupsRequest) LabelSelector(labelSelector string) iaas.ApiListBackupsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListBackupsRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListBackupsRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListBackupsRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListImagesRequest is a mock of ApiListImagesRequest interface.
type MockApiListImagesRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListImagesRequestMockRecorder
	isgomock struct{}
}

// MockApiListImagesRequestMockRecorder is the mock recorder for MockApiListImagesRequest.
type MockApiListImagesRequestMockRecorder struct {
	mock *MockApiListImagesRequest
}

// NewMockApiListImagesRequest creates a new mock instance.
func NewMockApiListImagesRequest(ctrl *gomock.Controller) *MockApiListImagesRequest {
	mock := &MockApiListImagesRequest{ctrl: ctrl}
	mock.recorder = &MockApiListImagesRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListImagesRequest) EXPECT() *MockApiListImagesRequestMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockApiListImagesRequest) All(all bool) iaas.ApiListImagesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", all)
	ret0, _ := ret[0].(iaas.ApiListImagesRequest)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockApiListImagesRequestMockRecorder) All(all any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockApiListImagesRequest)(nil).All), all)
}

// Execute mocks base method.
func (m *MockApiListImagesRequest) Execute() (*iaas.ImageListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ImageListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListImagesRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListImagesRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListImagesRequest) LabelSelector(labelSelector string) iaas.ApiListImagesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListImagesRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListImagesRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListImagesRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListKeyPairsRequest is a mock of ApiListKeyPairsRequest interface.
type MockApiListKeyPairsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListKeyPairsRequestMockRecorder
	isgomock struct{}
}

// MockApiListKeyPairsRequestMockRecorder is the mock recorder for MockApiListKeyPairsRequest.
type MockApiListKeyPairsRequestMockRecorder struct {
	mock *MockApiListKeyPairsRequest
}

// NewMockApiListKeyPairsRequest creates a new mock instance.
func NewMockApiListKeyPairsRequest(ctrl *gomock.Controller) *MockApiListKeyPairsRequest {
	mock := &MockApiListKeyPairsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListKeyPairsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListKeyPairsRequest) EXPECT() *MockApiListKeyPairsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListKeyPairsRequest) Execute() (*iaas.KeyPairListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.KeyPairListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListKeyPairsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListKeyPairsRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListKeyPairsRequest) LabelSelector(labelSelector string) iaas.ApiListKeyPairsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListKeyPairsRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListKeyPairsRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListKeyPairsRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListMachineTypesRequest is a mock of ApiListMachineTypesRequest interface.
type MockApiListMachineTypesRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListMachineTypesRequestMockRecorder
	isgomock struct{}
}

// MockApiListMachineTypesRequestMockRecorder is the mock recorder for MockApiListMachineTypesRequest.
type MockApiListMachineTypesRequestMockRecorder struct {
	mock *MockApiListMachineTypesRequest
}

// NewMockApiListMachineTypesRequest creates a new mock instance.
func NewMockApiListMachineTypesRequest(ctrl *gomock.Controller) *MockApiListMachineTypesRequest {
	mock := &MockApiListMachineTypesRequest{ctrl: ctrl}
	mock.recorder = &MockApiListMachineTypesRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListMachineTypesRequest) EXPECT() *MockApiListMachineTypesRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListMachineTypesRequest) Execute() (*iaas.MachineTypeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.MachineTypeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListMachineTypesRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListMachineTypesRequest)(nil).Execute))
}

// Filter mocks base method.
func (m *MockApiListMachineTypesRequest) Filter(filter string) iaas.ApiListMachineTypesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Filter", filter)
	ret0, _ := ret[0].(iaas.ApiListMachineTypesRequest)
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockApiListMachineTypesRequestMockRecorder) Filter(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockApiListMachineTypesRequest)(nil).Filter), filter)
}

// MockApiListNetworkAreaProjectsRequest is a mock of ApiListNetworkAreaProjectsRequest interface.
type MockApiListNetworkAreaProjectsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListNetworkAreaProjectsRequestMockRecorder
	isgomock struct{}
}

// MockApiListNetworkAreaProjectsRequestMockRecorder is the mock recorder for MockApiListNetworkAreaProjectsRequest.
type MockApiListNetworkAreaProjectsRequestMockRecorder struct {
	mock *MockApiListNetworkAreaProjectsRequest
}

// NewMockApiListNetworkAreaProjectsRequest creates a new mock instance.
func NewMockApiListNetworkAreaProjectsRequest(ctrl *gomock.Controller) *MockApiListNetworkAreaProjectsRequest {
	mock := &MockApiListNetworkAreaProjectsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListNetworkAreaProjectsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListNetworkAreaProjectsRequest) EXPECT() *MockApiListNetworkAreaProjectsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListNetworkAreaProjectsRequest) Execute() (*iaas.ProjectListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ProjectListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListNetworkAreaProjectsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListNetworkAreaProjectsRequest)(nil).Execute))
}

// MockApiListNetworkAreaRangesRequest is a mock of ApiListNetworkAreaRangesRequest interface.
type MockApiListNetworkAreaRangesRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListNetworkAreaRangesRequestMockRecorder
	isgomock struct{}
}

// MockApiListNetworkAreaRangesRequestMockRecorder is the mock recorder for MockApiListNetworkAreaRangesRequest.
type MockApiListNetworkAreaRangesRequestMockRecorder struct {
	mock *MockApiListNetworkAreaRangesRequest
}

// NewMockApiListNetworkAreaRangesRequest creates a new mock instance.
func NewMockApiListNetworkAreaRangesRequest(ctrl *gomock.Controller) *MockApiListNetworkAreaRangesRequest {
	mock := &MockApiListNetworkAreaRangesRequest{ctrl: ctrl}
	mock.recorder = &MockApiListNetworkAreaRangesRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListNetworkAreaRangesRequest) EXPECT() *MockApiListNetworkAreaRangesRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListNetworkAreaRangesRequest) Execute() (*iaas.NetworkRangeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NetworkRangeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListNetworkAreaRangesRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListNetworkAreaRangesRequest)(nil).Execute))
}

// MockApiListNetworkAreaRoutesRequest is a mock of ApiListNetworkAreaRoutesRequest interface.
type MockApiListNetworkAreaRoutesRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListNetworkAreaRoutesRequestMockRecorder
	isgomock struct{}
}

// MockApiListNetworkAreaRoutesRequestMockRecorder is the mock recorder for MockApiListNetworkAreaRoutesRequest.
type MockApiListNetworkAreaRoutesRequestMockRecorder struct {
	mock *MockApiListNetworkAreaRoutesRequest
}

// NewMockApiListNetworkAreaRoutesRequest creates a new mock instance.
func NewMockApiListNetworkAreaRoutesRequest(ctrl *gomock.Controller) *MockApiListNetworkAreaRoutesRequest {
	mock := &MockApiListNetworkAreaRoutesRequest{ctrl: ctrl}
	mock.recorder = &MockApiListNetworkAreaRoutesRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListNetworkAreaRoutesRequest) EXPECT() *MockApiListNetworkAreaRoutesRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListNetworkAreaRoutesRequest) Execute() (*iaas.RouteListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.RouteListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListNetworkAreaRoutesRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListNetworkAreaRoutesRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListNetworkAreaRoutesRequest) LabelSelector(labelSelector string) iaas.ApiListNetworkAreaRoutesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListNetworkAreaRoutesRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListNetworkAreaRoutesRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListNetworkAreaRoutesRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListNetworkAreasRequest is a mock of ApiListNetworkAreasRequest interface.
type MockApiListNetworkAreasRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListNetworkAreasRequestMockRecorder
	isgomock struct{}
}

// MockApiListNetworkAreasRequestMockRecorder is the mock recorder for MockApiListNetworkAreasRequest.
type MockApiListNetworkAreasRequestMockRecorder struct {
	mock *MockApiListNetworkAreasRequest
}

// NewMockApiListNetworkAreasRequest creates a new mock instance.
func NewMockApiListNetworkAreasRequest(ctrl *gomock.Controller) *MockApiListNetworkAreasRequest {
	mock := &MockApiListNetworkAreasRequest{ctrl: ctrl}
	mock.recorder = &MockApiListNetworkAreasRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListNetworkAreasRequest) EXPECT() *MockApiListNetworkAreasRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListNetworkAreasRequest) Execute() (*iaas.NetworkAreaListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NetworkAreaListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListNetworkAreasRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListNetworkAreasRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListNetworkAreasRequest) LabelSelector(labelSelector string) iaas.ApiListNetworkAreasRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListNetworkAreasRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListNetworkAreasRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListNetworkAreasRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListNetworksRequest is a mock of ApiListNetworksRequest interface.
type MockApiListNetworksRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListNetworksRequestMockRecorder
	isgomock struct{}
}

// MockApiListNetworksRequestMockRecorder is the mock recorder for MockApiListNetworksRequest.
type MockApiListNetworksRequestMockRecorder struct {
	mock *MockApiListNetworksRequest
}

// NewMockApiListNetworksRequest creates a new mock instance.
func NewMockApiListNetworksRequest(ctrl *gomock.Controller) *MockApiListNetworksRequest {
	mock := &MockApiListNetworksRequest{ctrl: ctrl}
	mock.recorder = &MockApiListNetworksRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListNetworksRequest) EXPECT() *MockApiListNetworksRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListNetworksRequest) Execute() (*iaas.NetworkListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NetworkListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListNetworksRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListNetworksRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListNetworksRequest) LabelSelector(labelSelector string) iaas.ApiListNetworksRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListNetworksRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListNetworksRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListNetworksRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListNicsRequest is a mock of ApiListNicsRequest interface.
type MockApiListNicsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListNicsRequestMockRecorder
	isgomock struct{}
}

// MockApiListNicsRequestMockRecorder is the mock recorder for MockApiListNicsRequest.
type MockApiListNicsRequestMockRecorder struct {
	mock *MockApiListNicsRequest
}

// NewMockApiListNicsRequest creates a new mock instance.
func NewMockApiListNicsRequest(ctrl *gomock.Controller) *MockApiListNicsRequest {
	mock := &MockApiListNicsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListNicsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListNicsRequest) EXPECT() *MockApiListNicsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListNicsRequest) Execute() (*iaas.NICListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NICListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListNicsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListNicsRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListNicsRequest) LabelSelector(labelSelector string) iaas.ApiListNicsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListNicsRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListNicsRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListNicsRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListProjectNICsRequest is a mock of ApiListProjectNICsRequest interface.
type MockApiListProjectNICsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListProjectNICsRequestMockRecorder
	isgomock struct{}
}

// MockApiListProjectNICsRequestMockRecorder is the mock recorder for MockApiListProjectNICsRequest.
type MockApiListProjectNICsRequestMockRecorder struct {
	mock *MockApiListProjectNICsRequest
}

// NewMockApiListProjectNICsRequest creates a new mock instance.
func NewMockApiListProjectNICsRequest(ctrl *gomock.Controller) *MockApiListProjectNICsRequest {
	mock := &MockApiListProjectNICsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListProjectNICsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListProjectNICsRequest) EXPECT() *MockApiListProjectNICsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListProjectNICsRequest) Execute() (*iaas.NICListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NICListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListProjectNICsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListProjectNICsRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListProjectNICsRequest) LabelSelector(labelSelector string) iaas.ApiListProjectNICsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListProjectNICsRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListProjectNICsRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListProjectNICsRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListPublicIPRangesRequest is a mock of ApiListPublicIPRangesRequest interface.
type MockApiListPublicIPRangesRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListPublicIPRangesRequestMockRecorder
	isgomock struct{}
}

// MockApiListPublicIPRangesRequestMockRecorder is the mock recorder for MockApiListPublicIPRangesRequest.
type MockApiListPublicIPRangesRequestMockRecorder struct {
	mock *MockApiListPublicIPRangesRequest
}

// NewMockApiListPublicIPRangesRequest creates a new mock instance.
func NewMockApiListPublicIPRangesRequest(ctrl *gomock.Controller) *MockApiListPublicIPRangesRequest {
	mock := &MockApiListPublicIPRangesRequest{ctrl: ctrl}
	mock.recorder = &MockApiListPublicIPRangesRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListPublicIPRangesRequest) EXPECT() *MockApiListPublicIPRangesRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListPublicIPRangesRequest) Execute() (*iaas.PublicNetworkListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.PublicNetworkListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListPublicIPRangesRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListPublicIPRangesRequest)(nil).Execute))
}

// MockApiListPublicIPsRequest is a mock of ApiListPublicIPsRequest interface.
type MockApiListPublicIPsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListPublicIPsRequestMockRecorder
	isgomock struct{}
}

// MockApiListPublicIPsRequestMockRecorder is the mock recorder for MockApiListPublicIPsRequest.
type MockApiListPublicIPsRequestMockRecorder struct {
	mock *MockApiListPublicIPsRequest
}

// NewMockApiListPublicIPsRequest creates a new mock instance.
func NewMockApiListPublicIPsRequest(ctrl *gomock.Controller) *MockApiListPublicIPsRequest {
	mock := &MockApiListPublicIPsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListPublicIPsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListPublicIPsRequest) EXPECT() *MockApiListPublicIPsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListPublicIPsRequest) Execute() (*iaas.PublicIpListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.PublicIpListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListPublicIPsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListPublicIPsRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListPublicIPsRequest) LabelSelector(labelSelector string) iaas.ApiListPublicIPsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListPublicIPsRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListPublicIPsRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListPublicIPsRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListQuotasRequest is a mock of ApiListQuotasRequest interface.
type MockApiListQuotasRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListQuotasRequestMockRecorder
	isgomock struct{}
}

// MockApiListQuotasRequestMockRecorder is the mock recorder for MockApiListQuotasRequest.
type MockApiListQuotasRequestMockRecorder struct {
	mock *MockApiListQuotasRequest
}

// NewMockApiListQuotasRequest creates a new mock instance.
func NewMockApiListQuotasRequest(ctrl *gomock.Controller) *MockApiListQuotasRequest {
	mock := &MockApiListQuotasRequest{ctrl: ctrl}
	mock.recorder = &MockApiListQuotasRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListQuotasRequest) EXPECT() *MockApiListQuotasRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListQuotasRequest) Execute() (*iaas.QuotaListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.QuotaListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListQuotasRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListQuotasRequest)(nil).Execute))
}

// MockApiListSecurityGroupRulesRequest is a mock of ApiListSecurityGroupRulesRequest interface.
type MockApiListSecurityGroupRulesRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListSecurityGroupRulesRequestMockRecorder
	isgomock struct{}
}

// MockApiListSecurityGroupRulesRequestMockRecorder is the mock recorder for MockApiListSecurityGroupRulesRequest.
type MockApiListSecurityGroupRulesRequestMockRecorder struct {
	mock *MockApiListSecurityGroupRulesRequest
}

// NewMockApiListSecurityGroupRulesRequest creates a new mock instance.
func NewMockApiListSecurityGroupRulesRequest(ctrl *gomock.Controller) *MockApiListSecurityGroupRulesRequest {
	mock := &MockApiListSecurityGroupRulesRequest{ctrl: ctrl}
	mock.recorder = &MockApiListSecurityGroupRulesRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListSecurityGroupRulesRequest) EXPECT() *MockApiListSecurityGroupRulesRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListSecurityGroupRulesRequest) Execute() (*iaas.SecurityGroupRuleListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.SecurityGroupRuleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListSecurityGroupRulesRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListSecurityGroupRulesRequest)(nil).Execute))
}

// MockApiListSecurityGroupsRequest is a mock of ApiListSecurityGroupsRequest interface.
type MockApiListSecurityGroupsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListSecurityGroupsRequestMockRecorder
	isgomock struct{}
}

// MockApiListSecurityGroupsRequestMockRecorder is the mock recorder for MockApiListSecurityGroupsRequest.
type MockApiListSecurityGroupsRequestMockRecorder struct {
	mock *MockApiListSecurityGroupsRequest
}

// NewMockApiListSecurityGroupsRequest creates a new mock instance.
func NewMockApiListSecurityGroupsRequest(ctrl *gomock.Controller) *MockApiListSecurityGroupsRequest {
	mock := &MockApiListSecurityGroupsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListSecurityGroupsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListSecurityGroupsRequest) EXPECT() *MockApiListSecurityGroupsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListSecurityGroupsRequest) Execute() (*iaas.SecurityGroupListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.SecurityGroupListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListSecurityGroupsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListSecurityGroupsRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListSecurityGroupsRequest) LabelSelector(labelSelector string) iaas.ApiListSecurityGroupsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListSecurityGroupsRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListSecurityGroupsRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListSecurityGroupsRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListServerNicsRequest is a mock of ApiListServerNicsRequest interface.
type MockApiListServerNicsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListServerNicsRequestMockRecorder
	isgomock struct{}
}

// MockApiListServerNicsRequestMockRecorder is the mock recorder for MockApiListServerNicsRequest.
type MockApiListServerNicsRequestMockRecorder struct {
	mock *MockApiListServerNicsRequest
}

// NewMockApiListServerNicsRequest creates a new mock instance.
func NewMockApiListServerNicsRequest(ctrl *gomock.Controller) *MockApiListServerNicsRequest {
	mock := &MockApiListServerNicsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListServerNicsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListServerNicsRequest) EXPECT() *MockApiListServerNicsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListServerNicsRequest) Execute() (*iaas.NICListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NICListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListServerNicsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListServerNicsRequest)(nil).Execute))
}

// MockApiListServerServiceAccountsRequest is a mock of ApiListServerServiceAccountsRequest interface.
type MockApiListServerServiceAccountsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListServerServiceAccountsRequestMockRecorder
	isgomock struct{}
}

// MockApiListServerServiceAccountsRequestMockRecorder is the mock recorder for MockApiListServerServiceAccountsRequest.
type MockApiListServerServiceAccountsRequestMockRecorder struct {
	mock *MockApiListServerServiceAccountsRequest
}

// NewMockApiListServerServiceAccountsRequest creates a new mock instance.
func NewMockApiListServerServiceAccountsRequest(ctrl *gomock.Controller) *MockApiListServerServiceAccountsRequest {
	mock := &MockApiListServerServiceAccountsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListServerServiceAccountsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListServerServiceAccountsRequest) EXPECT() *MockApiListServerServiceAccountsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListServerServiceAccountsRequest) Execute() (*iaas.ServiceAccountMailListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ServiceAccountMailListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListServerServiceAccountsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListServerServiceAccountsRequest)(nil).Execute))
}

// MockApiListServersRequest is a mock of ApiListServersRequest interface.
type MockApiListServersRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListServersRequestMockRecorder
	isgomock struct{}
}

// MockApiListServersRequestMockRecorder is the mock recorder for MockApiListServersRequest.
type MockApiListServersRequestMockRecorder struct {
	mock *MockApiListServersRequest
}

// NewMockApiListServersRequest creates a new mock instance.
func NewMockApiListServersRequest(ctrl *gomock.Controller) *MockApiListServersRequest {
	mock := &MockApiListServersRequest{ctrl: ctrl}
	mock.recorder = &MockApiListServersRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListServersRequest) EXPECT() *MockApiListServersRequestMockRecorder {
	return m.recorder
}

// Details mocks base method.
func (m *MockApiListServersRequest) Details(details bool) iaas.ApiListServersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Details", details)
	ret0, _ := ret[0].(iaas.ApiListServersRequest)
	return ret0
}

// Details indicates an expected call of Details.
func (mr *MockApiListServersRequestMockRecorder) Details(details any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Details", reflect.TypeOf((*MockApiListServersRequest)(nil).Details), details)
}

// Execute mocks base method.
func (m *MockApiListServersRequest) Execute() (*iaas.ServerListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ServerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListServersRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListServersRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListServersRequest) LabelSelector(labelSelector string) iaas.ApiListServersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListServersRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListServersRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListServersRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListSnapshotsRequest is a mock of ApiListSnapshotsRequest interface.
type MockApiListSnapshotsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListSnapshotsRequestMockRecorder
	isgomock struct{}
}

// MockApiListSnapshotsRequestMockRecorder is the mock recorder for MockApiListSnapshotsRequest.
type MockApiListSnapshotsRequestMockRecorder struct {
	mock *MockApiListSnapshotsRequest
}

// NewMockApiListSnapshotsRequest creates a new mock instance.
func NewMockApiListSnapshotsRequest(ctrl *gomock.Controller) *MockApiListSnapshotsRequest {
	mock := &MockApiListSnapshotsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListSnapshotsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListSnapshotsRequest) EXPECT() *MockApiListSnapshotsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListSnapshotsRequest) Execute() (*iaas.SnapshotListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.SnapshotListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListSnapshotsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListSnapshotsRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListSnapshotsRequest) LabelSelector(labelSelector string) iaas.ApiListSnapshotsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListSnapshotsRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListSnapshotsRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListSnapshotsRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListVolumePerformanceClassesRequest is a mock of ApiListVolumePerformanceClassesRequest interface.
type MockApiListVolumePerformanceClassesRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListVolumePerformanceClassesRequestMockRecorder
	isgomock struct{}
}

// MockApiListVolumePerformanceClassesRequestMockRecorder is the mock recorder for MockApiListVolumePerformanceClassesRequest.
type MockApiListVolumePerformanceClassesRequestMockRecorder struct {
	mock *MockApiListVolumePerformanceClassesRequest
}

// NewMockApiListVolumePerformanceClassesRequest creates a new mock instance.
func NewMockApiListVolumePerformanceClassesRequest(ctrl *gomock.Controller) *MockApiListVolumePerformanceClassesRequest {
	mock := &MockApiListVolumePerformanceClassesRequest{ctrl: ctrl}
	mock.recorder = &MockApiListVolumePerformanceClassesRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListVolumePerformanceClassesRequest) EXPECT() *MockApiListVolumePerformanceClassesRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListVolumePerformanceClassesRequest) Execute() (*iaas.VolumePerformanceClassListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.VolumePerformanceClassListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListVolumePerformanceClassesRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListVolumePerformanceClassesRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListVolumePerformanceClassesRequest) LabelSelector(labelSelector string) iaas.ApiListVolumePerformanceClassesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListVolumePerformanceClassesRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListVolumePerformanceClassesRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListVolumePerformanceClassesRequest)(nil).LabelSelector), labelSelector)
}

// MockApiListVolumesRequest is a mock of ApiListVolumesRequest interface.
type MockApiListVolumesRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListVolumesRequestMockRecorder
	isgomock struct{}
}

// MockApiListVolumesRequestMockRecorder is the mock recorder for MockApiListVolumesRequest.
type MockApiListVolumesRequestMockRecorder struct {
	mock *MockApiListVolumesRequest
}

// NewMockApiListVolumesRequest creates a new mock instance.
func NewMockApiListVolumesRequest(ctrl *gomock.Controller) *MockApiListVolumesRequest {
	mock := &MockApiListVolumesRequest{ctrl: ctrl}
	mock.recorder = &MockApiListVolumesRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListVolumesRequest) EXPECT() *MockApiListVolumesRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListVolumesRequest) Execute() (*iaas.VolumeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.VolumeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListVolumesRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListVolumesRequest)(nil).Execute))
}

// LabelSelector mocks base method.
func (m *MockApiListVolumesRequest) LabelSelector(labelSelector string) iaas.ApiListVolumesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LabelSelector", labelSelector)
	ret0, _ := ret[0].(iaas.ApiListVolumesRequest)
	return ret0
}

// LabelSelector indicates an expected call of LabelSelector.
func (mr *MockApiListVolumesRequestMockRecorder) LabelSelector(labelSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LabelSelector", reflect.TypeOf((*MockApiListVolumesRequest)(nil).LabelSelector), labelSelector)
}

// MockApiPartialUpdateNetworkAreaRequest is a mock of ApiPartialUpdateNetworkAreaRequest interface.
type MockApiPartialUpdateNetworkAreaRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiPartialUpdateNetworkAreaRequestMockRecorder
	isgomock struct{}
}

// MockApiPartialUpdateNetworkAreaRequestMockRecorder is the mock recorder for MockApiPartialUpdateNetworkAreaRequest.
type MockApiPartialUpdateNetworkAreaRequestMockRecorder struct {
	mock *MockApiPartialUpdateNetworkAreaRequest
}

// NewMockApiPartialUpdateNetworkAreaRequest creates a new mock instance.
func NewMockApiPartialUpdateNetworkAreaRequest(ctrl *gomock.Controller) *MockApiPartialUpdateNetworkAreaRequest {
	mock := &MockApiPartialUpdateNetworkAreaRequest{ctrl: ctrl}
	mock.recorder = &MockApiPartialUpdateNetworkAreaRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiPartialUpdateNetworkAreaRequest) EXPECT() *MockApiPartialUpdateNetworkAreaRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiPartialUpdateNetworkAreaRequest) Execute() (*iaas.NetworkArea, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NetworkArea)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiPartialUpdateNetworkAreaRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiPartialUpdateNetworkAreaRequest)(nil).Execute))
}

// PartialUpdateNetworkAreaPayload mocks base method.
func (m *MockApiPartialUpdateNetworkAreaRequest) PartialUpdateNetworkAreaPayload(partialUpdateNetworkAreaPayload iaas.PartialUpdateNetworkAreaPayload) iaas.ApiPartialUpdateNetworkAreaRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialUpdateNetworkAreaPayload", partialUpdateNetworkAreaPayload)
	ret0, _ := ret[0].(iaas.ApiPartialUpdateNetworkAreaRequest)
	return ret0
}

// PartialUpdateNetworkAreaPayload indicates an expected call of PartialUpdateNetworkAreaPayload.
func (mr *MockApiPartialUpdateNetworkAreaRequestMockRecorder) PartialUpdateNetworkAreaPayload(partialUpdateNetworkAreaPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdateNetworkAreaPayload", reflect.TypeOf((*MockApiPartialUpdateNetworkAreaRequest)(nil).PartialUpdateNetworkAreaPayload), partialUpdateNetworkAreaPayload)
}

// MockApiPartialUpdateNetworkRequest is a mock of ApiPartialUpdateNetworkRequest interface.
type MockApiPartialUpdateNetworkRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiPartialUpdateNetworkRequestMockRecorder
	isgomock struct{}
}

// MockApiPartialUpdateNetworkRequestMockRecorder is the mock recorder for MockApiPartialUpdateNetworkRequest.
type MockApiPartialUpdateNetworkRequestMockRecorder struct {
	mock *MockApiPartialUpdateNetworkRequest
}

// NewMockApiPartialUpdateNetworkRequest creates a new mock instance.
func NewMockApiPartialUpdateNetworkRequest(ctrl *gomock.Controller) *MockApiPartialUpdateNetworkRequest {
	mock := &MockApiPartialUpdateNetworkRequest{ctrl: ctrl}
	mock.recorder = &MockApiPartialUpdateNetworkRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiPartialUpdateNetworkRequest) EXPECT() *MockApiPartialUpdateNetworkRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiPartialUpdateNetworkRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiPartialUpdateNetworkRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiPartialUpdateNetworkRequest)(nil).Execute))
}

// PartialUpdateNetworkPayload mocks base method.
func (m *MockApiPartialUpdateNetworkRequest) PartialUpdateNetworkPayload(partialUpdateNetworkPayload iaas.PartialUpdateNetworkPayload) iaas.ApiPartialUpdateNetworkRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialUpdateNetworkPayload", partialUpdateNetworkPayload)
	ret0, _ := ret[0].(iaas.ApiPartialUpdateNetworkRequest)
	return ret0
}

// PartialUpdateNetworkPayload indicates an expected call of PartialUpdateNetworkPayload.
func (mr *MockApiPartialUpdateNetworkRequestMockRecorder) PartialUpdateNetworkPayload(partialUpdateNetworkPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdateNetworkPayload", reflect.TypeOf((*MockApiPartialUpdateNetworkRequest)(nil).PartialUpdateNetworkPayload), partialUpdateNetworkPayload)
}

// MockApiRebootServerRequest is a mock of ApiRebootServerRequest interface.
type MockApiRebootServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiRebootServerRequestMockRecorder
	isgomock struct{}
}

// MockApiRebootServerRequestMockRecorder is the mock recorder for MockApiRebootServerRequest.
type MockApiRebootServerRequestMockRecorder struct {
	mock *MockApiRebootServerRequest
}

// NewMockApiRebootServerRequest creates a new mock instance.
func NewMockApiRebootServerRequest(ctrl *gomock.Controller) *MockApiRebootServerRequest {
	mock := &MockApiRebootServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiRebootServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiRebootServerRequest) EXPECT() *MockApiRebootServerRequestMockRecorder {
	return m.recorder
}

// Action mocks base method.
func (m *MockApiRebootServerRequest) Action(action string) iaas.ApiRebootServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Action", action)
	ret0, _ := ret[0].(iaas.ApiRebootServerRequest)
	return ret0
}

// Action indicates an expected call of Action.
func (mr *MockApiRebootServerRequestMockRecorder) Action(action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Action", reflect.TypeOf((*MockApiRebootServerRequest)(nil).Action), action)
}

// Execute mocks base method.
func (m *MockApiRebootServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiRebootServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiRebootServerRequest)(nil).Execute))
}

// MockApiRemoveNetworkFromServerRequest is a mock of ApiRemoveNetworkFromServerRequest interface.
type MockApiRemoveNetworkFromServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiRemoveNetworkFromServerRequestMockRecorder
	isgomock struct{}
}

// MockApiRemoveNetworkFromServerRequestMockRecorder is the mock recorder for MockApiRemoveNetworkFromServerRequest.
type MockApiRemoveNetworkFromServerRequestMockRecorder struct {
	mock *MockApiRemoveNetworkFromServerRequest
}

// NewMockApiRemoveNetworkFromServerRequest creates a new mock instance.
func NewMockApiRemoveNetworkFromServerRequest(ctrl *gomock.Controller) *MockApiRemoveNetworkFromServerRequest {
	mock := &MockApiRemoveNetworkFromServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiRemoveNetworkFromServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiRemoveNetworkFromServerRequest) EXPECT() *MockApiRemoveNetworkFromServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiRemoveNetworkFromServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiRemoveNetworkFromServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiRemoveNetworkFromServerRequest)(nil).Execute))
}

// MockApiRemoveNicFromServerRequest is a mock of ApiRemoveNicFromServerRequest interface.
type MockApiRemoveNicFromServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiRemoveNicFromServerRequestMockRecorder
	isgomock struct{}
}

// MockApiRemoveNicFromServerRequestMockRecorder is the mock recorder for MockApiRemoveNicFromServerRequest.
type MockApiRemoveNicFromServerRequestMockRecorder struct {
	mock *MockApiRemoveNicFromServerRequest
}

// NewMockApiRemoveNicFromServerRequest creates a new mock instance.
func NewMockApiRemoveNicFromServerRequest(ctrl *gomock.Controller) *MockApiRemoveNicFromServerRequest {
	mock := &MockApiRemoveNicFromServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiRemoveNicFromServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiRemoveNicFromServerRequest) EXPECT() *MockApiRemoveNicFromServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiRemoveNicFromServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiRemoveNicFromServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiRemoveNicFromServerRequest)(nil).Execute))
}

// MockApiRemovePublicIpFromServerRequest is a mock of ApiRemovePublicIpFromServerRequest interface.
type MockApiRemovePublicIpFromServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiRemovePublicIpFromServerRequestMockRecorder
	isgomock struct{}
}

// MockApiRemovePublicIpFromServerRequestMockRecorder is the mock recorder for MockApiRemovePublicIpFromServerRequest.
type MockApiRemovePublicIpFromServerRequestMockRecorder struct {
	mock *MockApiRemovePublicIpFromServerRequest
}

// NewMockApiRemovePublicIpFromServerRequest creates a new mock instance.
func NewMockApiRemovePublicIpFromServerRequest(ctrl *gomock.Controller) *MockApiRemovePublicIpFromServerRequest {
	mock := &MockApiRemovePublicIpFromServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiRemovePublicIpFromServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiRemovePublicIpFromServerRequest) EXPECT() *MockApiRemovePublicIpFromServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiRemovePublicIpFromServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiRemovePublicIpFromServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiRemovePublicIpFromServerRequest)(nil).Execute))
}

// MockApiRemoveSecurityGroupFromServerRequest is a mock of ApiRemoveSecurityGroupFromServerRequest interface.
type MockApiRemoveSecurityGroupFromServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiRemoveSecurityGroupFromServerRequestMockRecorder
	isgomock struct{}
}

// MockApiRemoveSecurityGroupFromServerRequestMockRecorder is the mock recorder for MockApiRemoveSecurityGroupFromServerRequest.
type MockApiRemoveSecurityGroupFromServerRequestMockRecorder struct {
	mock *MockApiRemoveSecurityGroupFromServerRequest
}

// NewMockApiRemoveSecurityGroupFromServerRequest creates a new mock instance.
func NewMockApiRemoveSecurityGroupFromServerRequest(ctrl *gomock.Controller) *MockApiRemoveSecurityGroupFromServerRequest {
	mock := &MockApiRemoveSecurityGroupFromServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiRemoveSecurityGroupFromServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiRemoveSecurityGroupFromServerRequest) EXPECT() *MockApiRemoveSecurityGroupFromServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiRemoveSecurityGroupFromServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiRemoveSecurityGroupFromServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiRemoveSecurityGroupFromServerRequest)(nil).Execute))
}

// MockApiRemoveServiceAccountFromServerRequest is a mock of ApiRemoveServiceAccountFromServerRequest interface.
type MockApiRemoveServiceAccountFromServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiRemoveServiceAccountFromServerRequestMockRecorder
	isgomock struct{}
}

// MockApiRemoveServiceAccountFromServerRequestMockRecorder is the mock recorder for MockApiRemoveServiceAccountFromServerRequest.
type MockApiRemoveServiceAccountFromServerRequestMockRecorder struct {
	mock *MockApiRemoveServiceAccountFromServerRequest
}

// NewMockApiRemoveServiceAccountFromServerRequest creates a new mock instance.
func NewMockApiRemoveServiceAccountFromServerRequest(ctrl *gomock.Controller) *MockApiRemoveServiceAccountFromServerRequest {
	mock := &MockApiRemoveServiceAccountFromServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiRemoveServiceAccountFromServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiRemoveServiceAccountFromServerRequest) EXPECT() *MockApiRemoveServiceAccountFromServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiRemoveServiceAccountFromServerRequest) Execute() (*iaas.ServiceAccountMailListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ServiceAccountMailListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiRemoveServiceAccountFromServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiRemoveServiceAccountFromServerRequest)(nil).Execute))
}

// MockApiRemoveVolumeFromServerRequest is a mock of ApiRemoveVolumeFromServerRequest interface.
type MockApiRemoveVolumeFromServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiRemoveVolumeFromServerRequestMockRecorder
	isgomock struct{}
}

// MockApiRemoveVolumeFromServerRequestMockRecorder is the mock recorder for MockApiRemoveVolumeFromServerRequest.
type MockApiRemoveVolumeFromServerRequestMockRecorder struct {
	mock *MockApiRemoveVolumeFromServerRequest
}

// NewMockApiRemoveVolumeFromServerRequest creates a new mock instance.
func NewMockApiRemoveVolumeFromServerRequest(ctrl *gomock.Controller) *MockApiRemoveVolumeFromServerRequest {
	mock := &MockApiRemoveVolumeFromServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiRemoveVolumeFromServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiRemoveVolumeFromServerRequest) EXPECT() *MockApiRemoveVolumeFromServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiRemoveVolumeFromServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiRemoveVolumeFromServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiRemoveVolumeFromServerRequest)(nil).Execute))
}

// MockApiRescueServerRequest is a mock of ApiRescueServerRequest interface.
type MockApiRescueServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiRescueServerRequestMockRecorder
	isgomock struct{}
}

// MockApiRescueServerRequestMockRecorder is the mock recorder for MockApiRescueServerRequest.
type MockApiRescueServerRequestMockRecorder struct {
	mock *MockApiRescueServerRequest
}

// NewMockApiRescueServerRequest creates a new mock instance.
func NewMockApiRescueServerRequest(ctrl *gomock.Controller) *MockApiRescueServerRequest {
	mock := &MockApiRescueServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiRescueServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiRescueServerRequest) EXPECT() *MockApiRescueServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiRescueServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiRescueServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiRescueServerRequest)(nil).Execute))
}

// RescueServerPayload mocks base method.
func (m *MockApiRescueServerRequest) RescueServerPayload(rescueServerPayload iaas.RescueServerPayload) iaas.ApiRescueServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescueServerPayload", rescueServerPayload)
	ret0, _ := ret[0].(iaas.ApiRescueServerRequest)
	return ret0
}

// RescueServerPayload indicates an expected call of RescueServerPayload.
func (mr *MockApiRescueServerRequestMockRecorder) RescueServerPayload(rescueServerPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescueServerPayload", reflect.TypeOf((*MockApiRescueServerRequest)(nil).RescueServerPayload), rescueServerPayload)
}

// MockApiResizeServerRequest is a mock of ApiResizeServerRequest interface.
type MockApiResizeServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiResizeServerRequestMockRecorder
	isgomock struct{}
}

// MockApiResizeServerRequestMockRecorder is the mock recorder for MockApiResizeServerRequest.
type MockApiResizeServerRequestMockRecorder struct {
	mock *MockApiResizeServerRequest
}

// NewMockApiResizeServerRequest creates a new mock instance.
func NewMockApiResizeServerRequest(ctrl *gomock.Controller) *MockApiResizeServerRequest {
	mock := &MockApiResizeServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiResizeServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiResizeServerRequest) EXPECT() *MockApiResizeServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiResizeServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiResizeServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiResizeServerRequest)(nil).Execute))
}

// ResizeServerPayload mocks base method.
func (m *MockApiResizeServerRequest) ResizeServerPayload(resizeServerPayload iaas.ResizeServerPayload) iaas.ApiResizeServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeServerPayload", resizeServerPayload)
	ret0, _ := ret[0].(iaas.ApiResizeServerRequest)
	return ret0
}

// ResizeServerPayload indicates an expected call of ResizeServerPayload.
func (mr *MockApiResizeServerRequestMockRecorder) ResizeServerPayload(resizeServerPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeServerPayload", reflect.TypeOf((*MockApiResizeServerRequest)(nil).ResizeServerPayload), resizeServerPayload)
}

// MockApiResizeVolumeRequest is a mock of ApiResizeVolumeRequest interface.
type MockApiResizeVolumeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiResizeVolumeRequestMockRecorder
	isgomock struct{}
}

// MockApiResizeVolumeRequestMockRecorder is the mock recorder for MockApiResizeVolumeRequest.
type MockApiResizeVolumeRequestMockRecorder struct {
	mock *MockApiResizeVolumeRequest
}

// NewMockApiResizeVolumeRequest creates a new mock instance.
func NewMockApiResizeVolumeRequest(ctrl *gomock.Controller) *MockApiResizeVolumeRequest {
	mock := &MockApiResizeVolumeRequest{ctrl: ctrl}
	mock.recorder = &MockApiResizeVolumeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiResizeVolumeRequest) EXPECT() *MockApiResizeVolumeRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiResizeVolumeRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiResizeVolumeRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiResizeVolumeRequest)(nil).Execute))
}

// ResizeVolumePayload mocks base method.
func (m *MockApiResizeVolumeRequest) ResizeVolumePayload(resizeVolumePayload iaas.ResizeVolumePayload) iaas.ApiResizeVolumeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeVolumePayload", resizeVolumePayload)
	ret0, _ := ret[0].(iaas.ApiResizeVolumeRequest)
	return ret0
}

// ResizeVolumePayload indicates an expected call of ResizeVolumePayload.
func (mr *MockApiResizeVolumeRequestMockRecorder) ResizeVolumePayload(resizeVolumePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeVolumePayload", reflect.TypeOf((*MockApiResizeVolumeRequest)(nil).ResizeVolumePayload), resizeVolumePayload)
}

// MockApiRestoreBackupRequest is a mock of ApiRestoreBackupRequest interface.
type MockApiRestoreBackupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiRestoreBackupRequestMockRecorder
	isgomock struct{}
}

// MockApiRestoreBackupRequestMockRecorder is the mock recorder for MockApiRestoreBackupRequest.
type MockApiRestoreBackupRequestMockRecorder struct {
	mock *MockApiRestoreBackupRequest
}

// NewMockApiRestoreBackupRequest creates a new mock instance.
func NewMockApiRestoreBackupRequest(ctrl *gomock.Controller) *MockApiRestoreBackupRequest {
	mock := &MockApiRestoreBackupRequest{ctrl: ctrl}
	mock.recorder = &MockApiRestoreBackupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiRestoreBackupRequest) EXPECT() *MockApiRestoreBackupRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiRestoreBackupRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiRestoreBackupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiRestoreBackupRequest)(nil).Execute))
}

// MockApiSetImageShareRequest is a mock of ApiSetImageShareRequest interface.
type MockApiSetImageShareRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiSetImageShareRequestMockRecorder
	isgomock struct{}
}

// MockApiSetImageShareRequestMockRecorder is the mock recorder for MockApiSetImageShareRequest.
type MockApiSetImageShareRequestMockRecorder struct {
	mock *MockApiSetImageShareRequest
}

// NewMockApiSetImageShareRequest creates a new mock instance.
func NewMockApiSetImageShareRequest(ctrl *gomock.Controller) *MockApiSetImageShareRequest {
	mock := &MockApiSetImageShareRequest{ctrl: ctrl}
	mock.recorder = &MockApiSetImageShareRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiSetImageShareRequest) EXPECT() *MockApiSetImageShareRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiSetImageShareRequest) Execute() (*iaas.ImageShare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ImageShare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiSetImageShareRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiSetImageShareRequest)(nil).Execute))
}

// SetImageSharePayload mocks base method.
func (m *MockApiSetImageShareRequest) SetImageSharePayload(setImageSharePayload iaas.SetImageSharePayload) iaas.ApiSetImageShareRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetImageSharePayload", setImageSharePayload)
	ret0, _ := ret[0].(iaas.ApiSetImageShareRequest)
	return ret0
}

// SetImageSharePayload indicates an expected call of SetImageSharePayload.
func (mr *MockApiSetImageShareRequestMockRecorder) SetImageSharePayload(setImageSharePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImageSharePayload", reflect.TypeOf((*MockApiSetImageShareRequest)(nil).SetImageSharePayload), setImageSharePayload)
}

// MockApiStartServerRequest is a mock of ApiStartServerRequest interface.
type MockApiStartServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiStartServerRequestMockRecorder
	isgomock struct{}
}

// MockApiStartServerRequestMockRecorder is the mock recorder for MockApiStartServerRequest.
type MockApiStartServerRequestMockRecorder struct {
	mock *MockApiStartServerRequest
}

// NewMockApiStartServerRequest creates a new mock instance.
func NewMockApiStartServerRequest(ctrl *gomock.Controller) *MockApiStartServerRequest {
	mock := &MockApiStartServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiStartServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiStartServerRequest) EXPECT() *MockApiStartServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiStartServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiStartServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiStartServerRequest)(nil).Execute))
}

// MockApiStopServerRequest is a mock of ApiStopServerRequest interface.
type MockApiStopServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiStopServerRequestMockRecorder
	isgomock struct{}
}

// MockApiStopServerRequestMockRecorder is the mock recorder for MockApiStopServerRequest.
type MockApiStopServerRequestMockRecorder struct {
	mock *MockApiStopServerRequest
}

// NewMockApiStopServerRequest creates a new mock instance.
func NewMockApiStopServerRequest(ctrl *gomock.Controller) *MockApiStopServerRequest {
	mock := &MockApiStopServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiStopServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiStopServerRequest) EXPECT() *MockApiStopServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiStopServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiStopServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiStopServerRequest)(nil).Execute))
}

// MockApiUnrescueServerRequest is a mock of ApiUnrescueServerRequest interface.
type MockApiUnrescueServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUnrescueServerRequestMockRecorder
	isgomock struct{}
}

// MockApiUnrescueServerRequestMockRecorder is the mock recorder for MockApiUnrescueServerRequest.
type MockApiUnrescueServerRequestMockRecorder struct {
	mock *MockApiUnrescueServerRequest
}

// NewMockApiUnrescueServerRequest creates a new mock instance.
func NewMockApiUnrescueServerRequest(ctrl *gomock.Controller) *MockApiUnrescueServerRequest {
	mock := &MockApiUnrescueServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiUnrescueServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUnrescueServerRequest) EXPECT() *MockApiUnrescueServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUnrescueServerRequest) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUnrescueServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUnrescueServerRequest)(nil).Execute))
}

// MockApiUpdateAttachedVolumeRequest is a mock of ApiUpdateAttachedVolumeRequest interface.
type MockApiUpdateAttachedVolumeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateAttachedVolumeRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateAttachedVolumeRequestMockRecorder is the mock recorder for MockApiUpdateAttachedVolumeRequest.
type MockApiUpdateAttachedVolumeRequestMockRecorder struct {
	mock *MockApiUpdateAttachedVolumeRequest
}

// NewMockApiUpdateAttachedVolumeRequest creates a new mock instance.
func NewMockApiUpdateAttachedVolumeRequest(ctrl *gomock.Controller) *MockApiUpdateAttachedVolumeRequest {
	mock := &MockApiUpdateAttachedVolumeRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateAttachedVolumeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateAttachedVolumeRequest) EXPECT() *MockApiUpdateAttachedVolumeRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateAttachedVolumeRequest) Execute() (*iaas.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateAttachedVolumeRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateAttachedVolumeRequest)(nil).Execute))
}

// UpdateAttachedVolumePayload mocks base method.
func (m *MockApiUpdateAttachedVolumeRequest) UpdateAttachedVolumePayload(updateAttachedVolumePayload iaas.UpdateAttachedVolumePayload) iaas.ApiUpdateAttachedVolumeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttachedVolumePayload", updateAttachedVolumePayload)
	ret0, _ := ret[0].(iaas.ApiUpdateAttachedVolumeRequest)
	return ret0
}

// UpdateAttachedVolumePayload indicates an expected call of UpdateAttachedVolumePayload.
func (mr *MockApiUpdateAttachedVolumeRequestMockRecorder) UpdateAttachedVolumePayload(updateAttachedVolumePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttachedVolumePayload", reflect.TypeOf((*MockApiUpdateAttachedVolumeRequest)(nil).UpdateAttachedVolumePayload), updateAttachedVolumePayload)
}

// MockApiUpdateBackupRequest is a mock of ApiUpdateBackupRequest interface.
type MockApiUpdateBackupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateBackupRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateBackupRequestMockRecorder is the mock recorder for MockApiUpdateBackupRequest.
type MockApiUpdateBackupRequestMockRecorder struct {
	mock *MockApiUpdateBackupRequest
}

// NewMockApiUpdateBackupRequest creates a new mock instance.
func NewMockApiUpdateBackupRequest(ctrl *gomock.Controller) *MockApiUpdateBackupRequest {
	mock := &MockApiUpdateBackupRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateBackupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateBackupRequest) EXPECT() *MockApiUpdateBackupRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateBackupRequest) Execute() (*iaas.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateBackupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateBackupRequest)(nil).Execute))
}

// UpdateBackupPayload mocks base method.
func (m *MockApiUpdateBackupRequest) UpdateBackupPayload(updateBackupPayload iaas.UpdateBackupPayload) iaas.ApiUpdateBackupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackupPayload", updateBackupPayload)
	ret0, _ := ret[0].(iaas.ApiUpdateBackupRequest)
	return ret0
}

// UpdateBackupPayload indicates an expected call of UpdateBackupPayload.
func (mr *MockApiUpdateBackupRequestMockRecorder) UpdateBackupPayload(updateBackupPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackupPayload", reflect.TypeOf((*MockApiUpdateBackupRequest)(nil).UpdateBackupPayload), updateBackupPayload)
}

// MockApiUpdateImageRequest is a mock of ApiUpdateImageRequest interface.
type MockApiUpdateImageRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateImageRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateImageRequestMockRecorder is the mock recorder for MockApiUpdateImageRequest.
type MockApiUpdateImageRequestMockRecorder struct {
	mock *MockApiUpdateImageRequest
}

// NewMockApiUpdateImageRequest creates a new mock instance.
func NewMockApiUpdateImageRequest(ctrl *gomock.Controller) *MockApiUpdateImageRequest {
	mock := &MockApiUpdateImageRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateImageRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateImageRequest) EXPECT() *MockApiUpdateImageRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateImageRequest) Execute() (*iaas.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateImageRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateImageRequest)(nil).Execute))
}

// UpdateImagePayload mocks base method.
func (m *MockApiUpdateImageRequest) UpdateImagePayload(updateImagePayload iaas.UpdateImagePayload) iaas.ApiUpdateImageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImagePayload", updateImagePayload)
	ret0, _ := ret[0].(iaas.ApiUpdateImageRequest)
	return ret0
}

// UpdateImagePayload indicates an expected call of UpdateImagePayload.
func (mr *MockApiUpdateImageRequestMockRecorder) UpdateImagePayload(updateImagePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImagePayload", reflect.TypeOf((*MockApiUpdateImageRequest)(nil).UpdateImagePayload), updateImagePayload)
}

// MockApiUpdateImageScopeLocalRequest is a mock of ApiUpdateImageScopeLocalRequest interface.
type MockApiUpdateImageScopeLocalRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateImageScopeLocalRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateImageScopeLocalRequestMockRecorder is the mock recorder for MockApiUpdateImageScopeLocalRequest.
type MockApiUpdateImageScopeLocalRequestMockRecorder struct {
	mock *MockApiUpdateImageScopeLocalRequest
}

// NewMockApiUpdateImageScopeLocalRequest creates a new mock instance.
func NewMockApiUpdateImageScopeLocalRequest(ctrl *gomock.Controller) *MockApiUpdateImageScopeLocalRequest {
	mock := &MockApiUpdateImageScopeLocalRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateImageScopeLocalRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateImageScopeLocalRequest) EXPECT() *MockApiUpdateImageScopeLocalRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateImageScopeLocalRequest) Execute() (*iaas.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateImageScopeLocalRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateImageScopeLocalRequest)(nil).Execute))
}

// MockApiUpdateImageScopePublicRequest is a mock of ApiUpdateImageScopePublicRequest interface.
type MockApiUpdateImageScopePublicRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateImageScopePublicRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateImageScopePublicRequestMockRecorder is the mock recorder for MockApiUpdateImageScopePublicRequest.
type MockApiUpdateImageScopePublicRequestMockRecorder struct {
	mock *MockApiUpdateImageScopePublicRequest
}

// NewMockApiUpdateImageScopePublicRequest creates a new mock instance.
func NewMockApiUpdateImageScopePublicRequest(ctrl *gomock.Controller) *MockApiUpdateImageScopePublicRequest {
	mock := &MockApiUpdateImageScopePublicRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateImageScopePublicRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateImageScopePublicRequest) EXPECT() *MockApiUpdateImageScopePublicRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateImageScopePublicRequest) Execute() (*iaas.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateImageScopePublicRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateImageScopePublicRequest)(nil).Execute))
}

// MockApiUpdateImageShareRequest is a mock of ApiUpdateImageShareRequest interface.
type MockApiUpdateImageShareRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateImageShareRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateImageShareRequestMockRecorder is the mock recorder for MockApiUpdateImageShareRequest.
type MockApiUpdateImageShareRequestMockRecorder struct {
	mock *MockApiUpdateImageShareRequest
}

// NewMockApiUpdateImageShareRequest creates a new mock instance.
func NewMockApiUpdateImageShareRequest(ctrl *gomock.Controller) *MockApiUpdateImageShareRequest {
	mock := &MockApiUpdateImageShareRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateImageShareRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateImageShareRequest) EXPECT() *MockApiUpdateImageShareRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateImageShareRequest) Execute() (*iaas.ImageShare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.ImageShare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateImageShareRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateImageShareRequest)(nil).Execute))
}

// UpdateImageSharePayload mocks base method.
func (m *MockApiUpdateImageShareRequest) UpdateImageSharePayload(updateImageSharePayload iaas.UpdateImageSharePayload) iaas.ApiUpdateImageShareRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageSharePayload", updateImageSharePayload)
	ret0, _ := ret[0].(iaas.ApiUpdateImageShareRequest)
	return ret0
}

// UpdateImageSharePayload indicates an expected call of UpdateImageSharePayload.
func (mr *MockApiUpdateImageShareRequestMockRecorder) UpdateImageSharePayload(updateImageSharePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageSharePayload", reflect.TypeOf((*MockApiUpdateImageShareRequest)(nil).UpdateImageSharePayload), updateImageSharePayload)
}

// MockApiUpdateKeyPairRequest is a mock of ApiUpdateKeyPairRequest interface.
type MockApiUpdateKeyPairRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateKeyPairRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateKeyPairRequestMockRecorder is the mock recorder for MockApiUpdateKeyPairRequest.
type MockApiUpdateKeyPairRequestMockRecorder struct {
	mock *MockApiUpdateKeyPairRequest
}

// NewMockApiUpdateKeyPairRequest creates a new mock instance.
func NewMockApiUpdateKeyPairRequest(ctrl *gomock.Controller) *MockApiUpdateKeyPairRequest {
	mock := &MockApiUpdateKeyPairRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateKeyPairRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateKeyPairRequest) EXPECT() *MockApiUpdateKeyPairRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateKeyPairRequest) Execute() (*iaas.Keypair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Keypair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateKeyPairRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateKeyPairRequest)(nil).Execute))
}

// UpdateKeyPairPayload mocks base method.
func (m *MockApiUpdateKeyPairRequest) UpdateKeyPairPayload(updateKeyPairPayload iaas.UpdateKeyPairPayload) iaas.ApiUpdateKeyPairRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyPairPayload", updateKeyPairPayload)
	ret0, _ := ret[0].(iaas.ApiUpdateKeyPairRequest)
	return ret0
}

// UpdateKeyPairPayload indicates an expected call of UpdateKeyPairPayload.
func (mr *MockApiUpdateKeyPairRequestMockRecorder) UpdateKeyPairPayload(updateKeyPairPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyPairPayload", reflect.TypeOf((*MockApiUpdateKeyPairRequest)(nil).UpdateKeyPairPayload), updateKeyPairPayload)
}

// MockApiUpdateNetworkAreaRouteRequest is a mock of ApiUpdateNetworkAreaRouteRequest interface.
type MockApiUpdateNetworkAreaRouteRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateNetworkAreaRouteRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateNetworkAreaRouteRequestMockRecorder is the mock recorder for MockApiUpdateNetworkAreaRouteRequest.
type MockApiUpdateNetworkAreaRouteRequestMockRecorder struct {
	mock *MockApiUpdateNetworkAreaRouteRequest
}

// NewMockApiUpdateNetworkAreaRouteRequest creates a new mock instance.
func NewMockApiUpdateNetworkAreaRouteRequest(ctrl *gomock.Controller) *MockApiUpdateNetworkAreaRouteRequest {
	mock := &MockApiUpdateNetworkAreaRouteRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateNetworkAreaRouteRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateNetworkAreaRouteRequest) EXPECT() *MockApiUpdateNetworkAreaRouteRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateNetworkAreaRouteRequest) Execute() (*iaas.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateNetworkAreaRouteRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateNetworkAreaRouteRequest)(nil).Execute))
}

// UpdateNetworkAreaRoutePayload mocks base method.
func (m *MockApiUpdateNetworkAreaRouteRequest) UpdateNetworkAreaRoutePayload(updateNetworkAreaRoutePayload iaas.UpdateNetworkAreaRoutePayload) iaas.ApiUpdateNetworkAreaRouteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkAreaRoutePayload", updateNetworkAreaRoutePayload)
	ret0, _ := ret[0].(iaas.ApiUpdateNetworkAreaRouteRequest)
	return ret0
}

// UpdateNetworkAreaRoutePayload indicates an expected call of UpdateNetworkAreaRoutePayload.
func (mr *MockApiUpdateNetworkAreaRouteRequestMockRecorder) UpdateNetworkAreaRoutePayload(updateNetworkAreaRoutePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkAreaRoutePayload", reflect.TypeOf((*MockApiUpdateNetworkAreaRouteRequest)(nil).UpdateNetworkAreaRoutePayload), updateNetworkAreaRoutePayload)
}

// MockApiUpdateNicRequest is a mock of ApiUpdateNicRequest interface.
type MockApiUpdateNicRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateNicRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateNicRequestMockRecorder is the mock recorder for MockApiUpdateNicRequest.
type MockApiUpdateNicRequestMockRecorder struct {
	mock *MockApiUpdateNicRequest
}

// NewMockApiUpdateNicRequest creates a new mock instance.
func NewMockApiUpdateNicRequest(ctrl *gomock.Controller) *MockApiUpdateNicRequest {
	mock := &MockApiUpdateNicRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateNicRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateNicRequest) EXPECT() *MockApiUpdateNicRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateNicRequest) Execute() (*iaas.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateNicRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateNicRequest)(nil).Execute))
}

// UpdateNicPayload mocks base method.
func (m *MockApiUpdateNicRequest) UpdateNicPayload(updateNicPayload iaas.UpdateNicPayload) iaas.ApiUpdateNicRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNicPayload", updateNicPayload)
	ret0, _ := ret[0].(iaas.ApiUpdateNicRequest)
	return ret0
}

// UpdateNicPayload indicates an expected call of UpdateNicPayload.
func (mr *MockApiUpdateNicRequestMockRecorder) UpdateNicPayload(updateNicPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNicPayload", reflect.TypeOf((*MockApiUpdateNicRequest)(nil).UpdateNicPayload), updateNicPayload)
}

// MockApiUpdatePublicIPRequest is a mock of ApiUpdatePublicIPRequest interface.
type MockApiUpdatePublicIPRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdatePublicIPRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdatePublicIPRequestMockRecorder is the mock recorder for MockApiUpdatePublicIPRequest.
type MockApiUpdatePublicIPRequestMockRecorder struct {
	mock *MockApiUpdatePublicIPRequest
}

// NewMockApiUpdatePublicIPRequest creates a new mock instance.
func NewMockApiUpdatePublicIPRequest(ctrl *gomock.Controller) *MockApiUpdatePublicIPRequest {
	mock := &MockApiUpdatePublicIPRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdatePublicIPRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdatePublicIPRequest) EXPECT() *MockApiUpdatePublicIPRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdatePublicIPRequest) Execute() (*iaas.PublicIp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.PublicIp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdatePublicIPRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdatePublicIPRequest)(nil).Execute))
}

// UpdatePublicIPPayload mocks base method.
func (m *MockApiUpdatePublicIPRequest) UpdatePublicIPPayload(updatePublicIPPayload iaas.UpdatePublicIPPayload) iaas.ApiUpdatePublicIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicIPPayload", updatePublicIPPayload)
	ret0, _ := ret[0].(iaas.ApiUpdatePublicIPRequest)
	return ret0
}

// UpdatePublicIPPayload indicates an expected call of UpdatePublicIPPayload.
func (mr *MockApiUpdatePublicIPRequestMockRecorder) UpdatePublicIPPayload(updatePublicIPPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicIPPayload", reflect.TypeOf((*MockApiUpdatePublicIPRequest)(nil).UpdatePublicIPPayload), updatePublicIPPayload)
}

// MockApiUpdateSecurityGroupRequest is a mock of ApiUpdateSecurityGroupRequest interface.
type MockApiUpdateSecurityGroupRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateSecurityGroupRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateSecurityGroupRequestMockRecorder is the mock recorder for MockApiUpdateSecurityGroupRequest.
type MockApiUpdateSecurityGroupRequestMockRecorder struct {
	mock *MockApiUpdateSecurityGroupRequest
}

// NewMockApiUpdateSecurityGroupRequest creates a new mock instance.
func NewMockApiUpdateSecurityGroupRequest(ctrl *gomock.Controller) *MockApiUpdateSecurityGroupRequest {
	mock := &MockApiUpdateSecurityGroupRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateSecurityGroupRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateSecurityGroupRequest) EXPECT() *MockApiUpdateSecurityGroupRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateSecurityGroupRequest) Execute() (*iaas.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateSecurityGroupRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateSecurityGroupRequest)(nil).Execute))
}

// UpdateSecurityGroupPayload mocks base method.
func (m *MockApiUpdateSecurityGroupRequest) UpdateSecurityGroupPayload(updateSecurityGroupPayload iaas.UpdateSecurityGroupPayload) iaas.ApiUpdateSecurityGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityGroupPayload", updateSecurityGroupPayload)
	ret0, _ := ret[0].(iaas.ApiUpdateSecurityGroupRequest)
	return ret0
}

// UpdateSecurityGroupPayload indicates an expected call of UpdateSecurityGroupPayload.
func (mr *MockApiUpdateSecurityGroupRequestMockRecorder) UpdateSecurityGroupPayload(updateSecurityGroupPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityGroupPayload", reflect.TypeOf((*MockApiUpdateSecurityGroupRequest)(nil).UpdateSecurityGroupPayload), updateSecurityGroupPayload)
}

// MockApiUpdateServerRequest is a mock of ApiUpdateServerRequest interface.
type MockApiUpdateServerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateServerRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateServerRequestMockRecorder is the mock recorder for MockApiUpdateServerRequest.
type MockApiUpdateServerRequestMockRecorder struct {
	mock *MockApiUpdateServerRequest
}

// NewMockApiUpdateServerRequest creates a new mock instance.
func NewMockApiUpdateServerRequest(ctrl *gomock.Controller) *MockApiUpdateServerRequest {
	mock := &MockApiUpdateServerRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateServerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateServerRequest) EXPECT() *MockApiUpdateServerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateServerRequest) Execute() (*iaas.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateServerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateServerRequest)(nil).Execute))
}

// UpdateServerPayload mocks base method.
func (m *MockApiUpdateServerRequest) UpdateServerPayload(updateServerPayload iaas.UpdateServerPayload) iaas.ApiUpdateServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServerPayload", updateServerPayload)
	ret0, _ := ret[0].(iaas.ApiUpdateServerRequest)
	return ret0
}

// UpdateServerPayload indicates an expected call of UpdateServerPayload.
func (mr *MockApiUpdateServerRequestMockRecorder) UpdateServerPayload(updateServerPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServerPayload", reflect.TypeOf((*MockApiUpdateServerRequest)(nil).UpdateServerPayload), updateServerPayload)
}

// MockApiUpdateSnapshotRequest is a mock of ApiUpdateSnapshotRequest interface.
type MockApiUpdateSnapshotRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateSnapshotRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateSnapshotRequestMockRecorder is the mock recorder for MockApiUpdateSnapshotRequest.
type MockApiUpdateSnapshotRequestMockRecorder struct {
	mock *MockApiUpdateSnapshotRequest
}

// NewMockApiUpdateSnapshotRequest creates a new mock instance.
func NewMockApiUpdateSnapshotRequest(ctrl *gomock.Controller) *MockApiUpdateSnapshotRequest {
	mock := &MockApiUpdateSnapshotRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateSnapshotRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateSnapshotRequest) EXPECT() *MockApiUpdateSnapshotRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateSnapshotRequest) Execute() (*iaas.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateSnapshotRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateSnapshotRequest)(nil).Execute))
}

// UpdateSnapshotPayload mocks base method.
func (m *MockApiUpdateSnapshotRequest) UpdateSnapshotPayload(updateSnapshotPayload iaas.UpdateSnapshotPayload) iaas.ApiUpdateSnapshotRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshotPayload", updateSnapshotPayload)
	ret0, _ := ret[0].(iaas.ApiUpdateSnapshotRequest)
	return ret0
}

// UpdateSnapshotPayload indicates an expected call of UpdateSnapshotPayload.
func (mr *MockApiUpdateSnapshotRequestMockRecorder) UpdateSnapshotPayload(updateSnapshotPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshotPayload", reflect.TypeOf((*MockApiUpdateSnapshotRequest)(nil).UpdateSnapshotPayload), updateSnapshotPayload)
}

// MockApiUpdateVolumeRequest is a mock of ApiUpdateVolumeRequest interface.
type MockApiUpdateVolumeRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateVolumeRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateVolumeRequestMockRecorder is the mock recorder for MockApiUpdateVolumeRequest.
type MockApiUpdateVolumeRequestMockRecorder struct {
	mock *MockApiUpdateVolumeRequest
}

// NewMockApiUpdateVolumeRequest creates a new mock instance.
func NewMockApiUpdateVolumeRequest(ctrl *gomock.Controller) *MockApiUpdateVolumeRequest {
	mock := &MockApiUpdateVolumeRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateVolumeRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateVolumeRequest) EXPECT() *MockApiUpdateVolumeRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateVolumeRequest) Execute() (*iaas.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*iaas.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateVolumeRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateVolumeRequest)(nil).Execute))
}

// UpdateVolumePayload mocks base method.
func (m *MockApiUpdateVolumeRequest) UpdateVolumePayload(updateVolumePayload iaas.UpdateVolumePayload) iaas.ApiUpdateVolumeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumePayload", updateVolumePayload)
	ret0, _ := ret[0].(iaas.ApiUpdateVolumeRequest)
	return ret0
}

// UpdateVolumePayload indicates an expected call of UpdateVolumePayload.
func (mr *MockApiUpdateVolumeRequestMockRecorder) UpdateVolumePayload(updateVolumePayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumePayload", reflect.TypeOf((*MockApiUpdateVolumeRequest)(nil).UpdateVolumePayload), updateVolumePayload)
}

// MockDefaultApi is a mock of DefaultApi interface.
type MockDefaultApi struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultApiMockRecorder
	isgomock struct{}
}

// MockDefaultApiMockRecorder is the mock recorder for MockDefaultApi.
type MockDefaultApiMockRecorder struct {
	mock *MockDefaultApi
}

// NewMockDefaultApi creates a new mock instance.
func NewMockDefaultApi(ctrl *gomock.Controller) *MockDefaultApi {
	mock := &MockDefaultApi{ctrl: ctrl}
	mock.recorder = &MockDefaultApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultApi) EXPECT() *MockDefaultApiMockRecorder {
	return m.recorder
}

// AddNetworkToServer mocks base method.
func (m *MockDefaultApi) AddNetworkToServer(ctx context.Context, projectId, serverId, networkId string) iaas.ApiAddNetworkToServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNetworkToServer", ctx, projectId, serverId, networkId)
	ret0, _ := ret[0].(iaas.ApiAddNetworkToServerRequest)
	return ret0
}

// AddNetworkToServer indicates an expected call of AddNetworkToServer.
func (mr *MockDefaultApiMockRecorder) AddNetworkToServer(ctx, projectId, serverId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkToServer", reflect.TypeOf((*MockDefaultApi)(nil).AddNetworkToServer), ctx, projectId, serverId, networkId)
}

// AddNetworkToServerExecute mocks base method.
func (m *MockDefaultApi) AddNetworkToServerExecute(ctx context.Context, projectId, serverId, networkId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNetworkToServerExecute", ctx, projectId, serverId, networkId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNetworkToServerExecute indicates an expected call of AddNetworkToServerExecute.
func (mr *MockDefaultApiMockRecorder) AddNetworkToServerExecute(ctx, projectId, serverId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkToServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).AddNetworkToServerExecute), ctx, projectId, serverId, networkId)
}

// AddNicToServer mocks base method.
func (m *MockDefaultApi) AddNicToServer(ctx context.Context, projectId, serverId, nicId string) iaas.ApiAddNicToServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNicToServer", ctx, projectId, serverId, nicId)
	ret0, _ := ret[0].(iaas.ApiAddNicToServerRequest)
	return ret0
}

// AddNicToServer indicates an expected call of AddNicToServer.
func (mr *MockDefaultApiMockRecorder) AddNicToServer(ctx, projectId, serverId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNicToServer", reflect.TypeOf((*MockDefaultApi)(nil).AddNicToServer), ctx, projectId, serverId, nicId)
}

// AddNicToServerExecute mocks base method.
func (m *MockDefaultApi) AddNicToServerExecute(ctx context.Context, projectId, serverId, nicId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNicToServerExecute", ctx, projectId, serverId, nicId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNicToServerExecute indicates an expected call of AddNicToServerExecute.
func (mr *MockDefaultApiMockRecorder) AddNicToServerExecute(ctx, projectId, serverId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNicToServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).AddNicToServerExecute), ctx, projectId, serverId, nicId)
}

// AddPublicIpToServer mocks base method.
func (m *MockDefaultApi) AddPublicIpToServer(ctx context.Context, projectId, serverId, publicIpId string) iaas.ApiAddPublicIpToServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPublicIpToServer", ctx, projectId, serverId, publicIpId)
	ret0, _ := ret[0].(iaas.ApiAddPublicIpToServerRequest)
	return ret0
}

// AddPublicIpToServer indicates an expected call of AddPublicIpToServer.
func (mr *MockDefaultApiMockRecorder) AddPublicIpToServer(ctx, projectId, serverId, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPublicIpToServer", reflect.TypeOf((*MockDefaultApi)(nil).AddPublicIpToServer), ctx, projectId, serverId, publicIpId)
}

// AddPublicIpToServerExecute mocks base method.
func (m *MockDefaultApi) AddPublicIpToServerExecute(ctx context.Context, projectId, serverId, publicIpId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPublicIpToServerExecute", ctx, projectId, serverId, publicIpId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPublicIpToServerExecute indicates an expected call of AddPublicIpToServerExecute.
func (mr *MockDefaultApiMockRecorder) AddPublicIpToServerExecute(ctx, projectId, serverId, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPublicIpToServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).AddPublicIpToServerExecute), ctx, projectId, serverId, publicIpId)
}

// AddSecurityGroupToServer mocks base method.
func (m *MockDefaultApi) AddSecurityGroupToServer(ctx context.Context, projectId, serverId, securityGroupId string) iaas.ApiAddSecurityGroupToServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecurityGroupToServer", ctx, projectId, serverId, securityGroupId)
	ret0, _ := ret[0].(iaas.ApiAddSecurityGroupToServerRequest)
	return ret0
}

// AddSecurityGroupToServer indicates an expected call of AddSecurityGroupToServer.
func (mr *MockDefaultApiMockRecorder) AddSecurityGroupToServer(ctx, projectId, serverId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecurityGroupToServer", reflect.TypeOf((*MockDefaultApi)(nil).AddSecurityGroupToServer), ctx, projectId, serverId, securityGroupId)
}

// AddSecurityGroupToServerExecute mocks base method.
func (m *MockDefaultApi) AddSecurityGroupToServerExecute(ctx context.Context, projectId, serverId, securityGroupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecurityGroupToServerExecute", ctx, projectId, serverId, securityGroupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSecurityGroupToServerExecute indicates an expected call of AddSecurityGroupToServerExecute.
func (mr *MockDefaultApiMockRecorder) AddSecurityGroupToServerExecute(ctx, projectId, serverId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecurityGroupToServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).AddSecurityGroupToServerExecute), ctx, projectId, serverId, securityGroupId)
}

// AddServiceAccountToServer mocks base method.
func (m *MockDefaultApi) AddServiceAccountToServer(ctx context.Context, projectId, serverId, serviceAccountMail string) iaas.ApiAddServiceAccountToServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServiceAccountToServer", ctx, projectId, serverId, serviceAccountMail)
	ret0, _ := ret[0].(iaas.ApiAddServiceAccountToServerRequest)
	return ret0
}

// AddServiceAccountToServer indicates an expected call of AddServiceAccountToServer.
func (mr *MockDefaultApiMockRecorder) AddServiceAccountToServer(ctx, projectId, serverId, serviceAccountMail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceAccountToServer", reflect.TypeOf((*MockDefaultApi)(nil).AddServiceAccountToServer), ctx, projectId, serverId, serviceAccountMail)
}

// AddServiceAccountToServerExecute mocks base method.
func (m *MockDefaultApi) AddServiceAccountToServerExecute(ctx context.Context, projectId, serverId, serviceAccountMail string) (*iaas.ServiceAccountMailListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddServiceAccountToServerExecute", ctx, projectId, serverId, serviceAccountMail)
	ret0, _ := ret[0].(*iaas.ServiceAccountMailListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddServiceAccountToServerExecute indicates an expected call of AddServiceAccountToServerExecute.
func (mr *MockDefaultApiMockRecorder) AddServiceAccountToServerExecute(ctx, projectId, serverId, serviceAccountMail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServiceAccountToServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).AddServiceAccountToServerExecute), ctx, projectId, serverId, serviceAccountMail)
}

// AddVolumeToServer mocks base method.
func (m *MockDefaultApi) AddVolumeToServer(ctx context.Context, projectId, serverId, volumeId string) iaas.ApiAddVolumeToServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolumeToServer", ctx, projectId, serverId, volumeId)
	ret0, _ := ret[0].(iaas.ApiAddVolumeToServerRequest)
	return ret0
}

// AddVolumeToServer indicates an expected call of AddVolumeToServer.
func (mr *MockDefaultApiMockRecorder) AddVolumeToServer(ctx, projectId, serverId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolumeToServer", reflect.TypeOf((*MockDefaultApi)(nil).AddVolumeToServer), ctx, projectId, serverId, volumeId)
}

// AddVolumeToServerExecute mocks base method.
func (m *MockDefaultApi) AddVolumeToServerExecute(ctx context.Context, projectId, serverId, volumeId string) (*iaas.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVolumeToServerExecute", ctx, projectId, serverId, volumeId)
	ret0, _ := ret[0].(*iaas.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVolumeToServerExecute indicates an expected call of AddVolumeToServerExecute.
func (mr *MockDefaultApiMockRecorder) AddVolumeToServerExecute(ctx, projectId, serverId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVolumeToServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).AddVolumeToServerExecute), ctx, projectId, serverId, volumeId)
}

// CreateAffinityGroup mocks base method.
func (m *MockDefaultApi) CreateAffinityGroup(ctx context.Context, projectId string) iaas.ApiCreateAffinityGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAffinityGroup", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiCreateAffinityGroupRequest)
	return ret0
}

// CreateAffinityGroup indicates an expected call of CreateAffinityGroup.
func (mr *MockDefaultApiMockRecorder) CreateAffinityGroup(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAffinityGroup", reflect.TypeOf((*MockDefaultApi)(nil).CreateAffinityGroup), ctx, projectId)
}

// CreateAffinityGroupExecute mocks base method.
func (m *MockDefaultApi) CreateAffinityGroupExecute(ctx context.Context, projectId string) (*iaas.AffinityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAffinityGroupExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.AffinityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAffinityGroupExecute indicates an expected call of CreateAffinityGroupExecute.
func (mr *MockDefaultApiMockRecorder) CreateAffinityGroupExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAffinityGroupExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateAffinityGroupExecute), ctx, projectId)
}

// CreateBackup mocks base method.
func (m *MockDefaultApi) CreateBackup(ctx context.Context, projectId string) iaas.ApiCreateBackupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiCreateBackupRequest)
	return ret0
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockDefaultApiMockRecorder) CreateBackup(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockDefaultApi)(nil).CreateBackup), ctx, projectId)
}

// CreateBackupExecute mocks base method.
func (m *MockDefaultApi) CreateBackupExecute(ctx context.Context, projectId string) (*iaas.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackupExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackupExecute indicates an expected call of CreateBackupExecute.
func (mr *MockDefaultApiMockRecorder) CreateBackupExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackupExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateBackupExecute), ctx, projectId)
}

// CreateImage mocks base method.
func (m *MockDefaultApi) CreateImage(ctx context.Context, projectId string) iaas.ApiCreateImageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiCreateImageRequest)
	return ret0
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockDefaultApiMockRecorder) CreateImage(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockDefaultApi)(nil).CreateImage), ctx, projectId)
}

// CreateImageExecute mocks base method.
func (m *MockDefaultApi) CreateImageExecute(ctx context.Context, projectId string) (*iaas.ImageCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.ImageCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageExecute indicates an expected call of CreateImageExecute.
func (mr *MockDefaultApiMockRecorder) CreateImageExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateImageExecute), ctx, projectId)
}

// CreateKeyPair mocks base method.
func (m *MockDefaultApi) CreateKeyPair(ctx context.Context) iaas.ApiCreateKeyPairRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyPair", ctx)
	ret0, _ := ret[0].(iaas.ApiCreateKeyPairRequest)
	return ret0
}

// CreateKeyPair indicates an expected call of CreateKeyPair.
func (mr *MockDefaultApiMockRecorder) CreateKeyPair(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyPair", reflect.TypeOf((*MockDefaultApi)(nil).CreateKeyPair), ctx)
}

// CreateKeyPairExecute mocks base method.
func (m *MockDefaultApi) CreateKeyPairExecute(ctx context.Context) (*iaas.Keypair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKeyPairExecute", ctx)
	ret0, _ := ret[0].(*iaas.Keypair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyPairExecute indicates an expected call of CreateKeyPairExecute.
func (mr *MockDefaultApiMockRecorder) CreateKeyPairExecute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyPairExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateKeyPairExecute), ctx)
}

// CreateNetwork mocks base method.
func (m *MockDefaultApi) CreateNetwork(ctx context.Context, projectId string) iaas.ApiCreateNetworkRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiCreateNetworkRequest)
	return ret0
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockDefaultApiMockRecorder) CreateNetwork(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockDefaultApi)(nil).CreateNetwork), ctx, projectId)
}

// CreateNetworkArea mocks base method.
func (m *MockDefaultApi) CreateNetworkArea(ctx context.Context, organizationId string) iaas.ApiCreateNetworkAreaRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkArea", ctx, organizationId)
	ret0, _ := ret[0].(iaas.ApiCreateNetworkAreaRequest)
	return ret0
}

// CreateNetworkArea indicates an expected call of CreateNetworkArea.
func (mr *MockDefaultApiMockRecorder) CreateNetworkArea(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkArea", reflect.TypeOf((*MockDefaultApi)(nil).CreateNetworkArea), ctx, organizationId)
}

// CreateNetworkAreaExecute mocks base method.
func (m *MockDefaultApi) CreateNetworkAreaExecute(ctx context.Context, organizationId string) (*iaas.NetworkArea, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkAreaExecute", ctx, organizationId)
	ret0, _ := ret[0].(*iaas.NetworkArea)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkAreaExecute indicates an expected call of CreateNetworkAreaExecute.
func (mr *MockDefaultApiMockRecorder) CreateNetworkAreaExecute(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkAreaExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateNetworkAreaExecute), ctx, organizationId)
}

// CreateNetworkAreaRange mocks base method.
func (m *MockDefaultApi) CreateNetworkAreaRange(ctx context.Context, organizationId, areaId string) iaas.ApiCreateNetworkAreaRangeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkAreaRange", ctx, organizationId, areaId)
	ret0, _ := ret[0].(iaas.ApiCreateNetworkAreaRangeRequest)
	return ret0
}

// CreateNetworkAreaRange indicates an expected call of CreateNetworkAreaRange.
func (mr *MockDefaultApiMockRecorder) CreateNetworkAreaRange(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkAreaRange", reflect.TypeOf((*MockDefaultApi)(nil).CreateNetworkAreaRange), ctx, organizationId, areaId)
}

// CreateNetworkAreaRangeExecute mocks base method.
func (m *MockDefaultApi) CreateNetworkAreaRangeExecute(ctx context.Context, organizationId, areaId string) (*iaas.NetworkRangeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkAreaRangeExecute", ctx, organizationId, areaId)
	ret0, _ := ret[0].(*iaas.NetworkRangeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkAreaRangeExecute indicates an expected call of CreateNetworkAreaRangeExecute.
func (mr *MockDefaultApiMockRecorder) CreateNetworkAreaRangeExecute(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkAreaRangeExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateNetworkAreaRangeExecute), ctx, organizationId, areaId)
}

// CreateNetworkAreaRoute mocks base method.
func (m *MockDefaultApi) CreateNetworkAreaRoute(ctx context.Context, organizationId, areaId string) iaas.ApiCreateNetworkAreaRouteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkAreaRoute", ctx, organizationId, areaId)
	ret0, _ := ret[0].(iaas.ApiCreateNetworkAreaRouteRequest)
	return ret0
}

// CreateNetworkAreaRoute indicates an expected call of CreateNetworkAreaRoute.
func (mr *MockDefaultApiMockRecorder) CreateNetworkAreaRoute(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkAreaRoute", reflect.TypeOf((*MockDefaultApi)(nil).CreateNetworkAreaRoute), ctx, organizationId, areaId)
}

// CreateNetworkAreaRouteExecute mocks base method.
func (m *MockDefaultApi) CreateNetworkAreaRouteExecute(ctx context.Context, organizationId, areaId string) (*iaas.RouteListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkAreaRouteExecute", ctx, organizationId, areaId)
	ret0, _ := ret[0].(*iaas.RouteListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkAreaRouteExecute indicates an expected call of CreateNetworkAreaRouteExecute.
func (mr *MockDefaultApiMockRecorder) CreateNetworkAreaRouteExecute(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkAreaRouteExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateNetworkAreaRouteExecute), ctx, organizationId, areaId)
}

// CreateNetworkExecute mocks base method.
func (m *MockDefaultApi) CreateNetworkExecute(ctx context.Context, projectId string) (*iaas.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkExecute indicates an expected call of CreateNetworkExecute.
func (mr *MockDefaultApiMockRecorder) CreateNetworkExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateNetworkExecute), ctx, projectId)
}

// CreateNic mocks base method.
func (m *MockDefaultApi) CreateNic(ctx context.Context, projectId, networkId string) iaas.ApiCreateNicRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNic", ctx, projectId, networkId)
	ret0, _ := ret[0].(iaas.ApiCreateNicRequest)
	return ret0
}

// CreateNic indicates an expected call of CreateNic.
func (mr *MockDefaultApiMockRecorder) CreateNic(ctx, projectId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNic", reflect.TypeOf((*MockDefaultApi)(nil).CreateNic), ctx, projectId, networkId)
}

// CreateNicExecute mocks base method.
func (m *MockDefaultApi) CreateNicExecute(ctx context.Context, projectId, networkId string) (*iaas.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNicExecute", ctx, projectId, networkId)
	ret0, _ := ret[0].(*iaas.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNicExecute indicates an expected call of CreateNicExecute.
func (mr *MockDefaultApiMockRecorder) CreateNicExecute(ctx, projectId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNicExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateNicExecute), ctx, projectId, networkId)
}

// CreatePublicIP mocks base method.
func (m *MockDefaultApi) CreatePublicIP(ctx context.Context, projectId string) iaas.ApiCreatePublicIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicIP", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiCreatePublicIPRequest)
	return ret0
}

// CreatePublicIP indicates an expected call of CreatePublicIP.
func (mr *MockDefaultApiMockRecorder) CreatePublicIP(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicIP", reflect.TypeOf((*MockDefaultApi)(nil).CreatePublicIP), ctx, projectId)
}

// CreatePublicIPExecute mocks base method.
func (m *MockDefaultApi) CreatePublicIPExecute(ctx context.Context, projectId string) (*iaas.PublicIp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePublicIPExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.PublicIp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePublicIPExecute indicates an expected call of CreatePublicIPExecute.
func (mr *MockDefaultApiMockRecorder) CreatePublicIPExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePublicIPExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreatePublicIPExecute), ctx, projectId)
}

// CreateSecurityGroup mocks base method.
func (m *MockDefaultApi) CreateSecurityGroup(ctx context.Context, projectId string) iaas.ApiCreateSecurityGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroup", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiCreateSecurityGroupRequest)
	return ret0
}

// CreateSecurityGroup indicates an expected call of CreateSecurityGroup.
func (mr *MockDefaultApiMockRecorder) CreateSecurityGroup(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroup", reflect.TypeOf((*MockDefaultApi)(nil).CreateSecurityGroup), ctx, projectId)
}

// CreateSecurityGroupExecute mocks base method.
func (m *MockDefaultApi) CreateSecurityGroupExecute(ctx context.Context, projectId string) (*iaas.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroupExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroupExecute indicates an expected call of CreateSecurityGroupExecute.
func (mr *MockDefaultApiMockRecorder) CreateSecurityGroupExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroupExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateSecurityGroupExecute), ctx, projectId)
}

// CreateSecurityGroupRule mocks base method.
func (m *MockDefaultApi) CreateSecurityGroupRule(ctx context.Context, projectId, securityGroupId string) iaas.ApiCreateSecurityGroupRuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroupRule", ctx, projectId, securityGroupId)
	ret0, _ := ret[0].(iaas.ApiCreateSecurityGroupRuleRequest)
	return ret0
}

// CreateSecurityGroupRule indicates an expected call of CreateSecurityGroupRule.
func (mr *MockDefaultApiMockRecorder) CreateSecurityGroupRule(ctx, projectId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroupRule", reflect.TypeOf((*MockDefaultApi)(nil).CreateSecurityGroupRule), ctx, projectId, securityGroupId)
}

// CreateSecurityGroupRuleExecute mocks base method.
func (m *MockDefaultApi) CreateSecurityGroupRuleExecute(ctx context.Context, projectId, securityGroupId string) (*iaas.SecurityGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecurityGroupRuleExecute", ctx, projectId, securityGroupId)
	ret0, _ := ret[0].(*iaas.SecurityGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecurityGroupRuleExecute indicates an expected call of CreateSecurityGroupRuleExecute.
func (mr *MockDefaultApiMockRecorder) CreateSecurityGroupRuleExecute(ctx, projectId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecurityGroupRuleExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateSecurityGroupRuleExecute), ctx, projectId, securityGroupId)
}

// CreateServer mocks base method.
func (m *MockDefaultApi) CreateServer(ctx context.Context, projectId string) iaas.ApiCreateServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiCreateServerRequest)
	return ret0
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockDefaultApiMockRecorder) CreateServer(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockDefaultApi)(nil).CreateServer), ctx, projectId)
}

// CreateServerExecute mocks base method.
func (m *MockDefaultApi) CreateServerExecute(ctx context.Context, projectId string) (*iaas.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServerExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServerExecute indicates an expected call of CreateServerExecute.
func (mr *MockDefaultApiMockRecorder) CreateServerExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateServerExecute), ctx, projectId)
}

// CreateSnapshot mocks base method.
func (m *MockDefaultApi) CreateSnapshot(ctx context.Context, projectId string) iaas.ApiCreateSnapshotRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshot", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiCreateSnapshotRequest)
	return ret0
}

// CreateSnapshot indicates an expected call of CreateSnapshot.
func (mr *MockDefaultApiMockRecorder) CreateSnapshot(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshot", reflect.TypeOf((*MockDefaultApi)(nil).CreateSnapshot), ctx, projectId)
}

// CreateSnapshotExecute mocks base method.
func (m *MockDefaultApi) CreateSnapshotExecute(ctx context.Context, projectId string) (*iaas.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSnapshotExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSnapshotExecute indicates an expected call of CreateSnapshotExecute.
func (mr *MockDefaultApiMockRecorder) CreateSnapshotExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSnapshotExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateSnapshotExecute), ctx, projectId)
}

// CreateVolume mocks base method.
func (m *MockDefaultApi) CreateVolume(ctx context.Context, projectId string) iaas.ApiCreateVolumeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiCreateVolumeRequest)
	return ret0
}

// CreateVolume indicates an expected call of CreateVolume.
func (mr *MockDefaultApiMockRecorder) CreateVolume(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockDefaultApi)(nil).CreateVolume), ctx, projectId)
}

// CreateVolumeExecute mocks base method.
func (m *MockDefaultApi) CreateVolumeExecute(ctx context.Context, projectId string) (*iaas.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeExecute indicates an expected call of CreateVolumeExecute.
func (mr *MockDefaultApiMockRecorder) CreateVolumeExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateVolumeExecute), ctx, projectId)
}

// DeallocateServer mocks base method.
func (m *MockDefaultApi) DeallocateServer(ctx context.Context, projectId, serverId string) iaas.ApiDeallocateServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeallocateServer", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiDeallocateServerRequest)
	return ret0
}

// DeallocateServer indicates an expected call of DeallocateServer.
func (mr *MockDefaultApiMockRecorder) DeallocateServer(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocateServer", reflect.TypeOf((*MockDefaultApi)(nil).DeallocateServer), ctx, projectId, serverId)
}

// DeallocateServerExecute mocks base method.
func (m *MockDefaultApi) DeallocateServerExecute(ctx context.Context, projectId, serverId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeallocateServerExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeallocateServerExecute indicates an expected call of DeallocateServerExecute.
func (mr *MockDefaultApiMockRecorder) DeallocateServerExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeallocateServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeallocateServerExecute), ctx, projectId, serverId)
}

// DeleteAffinityGroup mocks base method.
func (m *MockDefaultApi) DeleteAffinityGroup(ctx context.Context, projectId, affinityGroupId string) iaas.ApiDeleteAffinityGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAffinityGroup", ctx, projectId, affinityGroupId)
	ret0, _ := ret[0].(iaas.ApiDeleteAffinityGroupRequest)
	return ret0
}

// DeleteAffinityGroup indicates an expected call of DeleteAffinityGroup.
func (mr *MockDefaultApiMockRecorder) DeleteAffinityGroup(ctx, projectId, affinityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAffinityGroup", reflect.TypeOf((*MockDefaultApi)(nil).DeleteAffinityGroup), ctx, projectId, affinityGroupId)
}

// DeleteAffinityGroupExecute mocks base method.
func (m *MockDefaultApi) DeleteAffinityGroupExecute(ctx context.Context, projectId, affinityGroupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAffinityGroupExecute", ctx, projectId, affinityGroupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAffinityGroupExecute indicates an expected call of DeleteAffinityGroupExecute.
func (mr *MockDefaultApiMockRecorder) DeleteAffinityGroupExecute(ctx, projectId, affinityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAffinityGroupExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteAffinityGroupExecute), ctx, projectId, affinityGroupId)
}

// DeleteBackup mocks base method.
func (m *MockDefaultApi) DeleteBackup(ctx context.Context, projectId, backupId string) iaas.ApiDeleteBackupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackup", ctx, projectId, backupId)
	ret0, _ := ret[0].(iaas.ApiDeleteBackupRequest)
	return ret0
}

// DeleteBackup indicates an expected call of DeleteBackup.
func (mr *MockDefaultApiMockRecorder) DeleteBackup(ctx, projectId, backupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackup", reflect.TypeOf((*MockDefaultApi)(nil).DeleteBackup), ctx, projectId, backupId)
}

// DeleteBackupExecute mocks base method.
func (m *MockDefaultApi) DeleteBackupExecute(ctx context.Context, projectId, backupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBackupExecute", ctx, projectId, backupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBackupExecute indicates an expected call of DeleteBackupExecute.
func (mr *MockDefaultApiMockRecorder) DeleteBackupExecute(ctx, projectId, backupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBackupExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteBackupExecute), ctx, projectId, backupId)
}

// DeleteImage mocks base method.
func (m *MockDefaultApi) DeleteImage(ctx context.Context, projectId, imageId string) iaas.ApiDeleteImageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, projectId, imageId)
	ret0, _ := ret[0].(iaas.ApiDeleteImageRequest)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockDefaultApiMockRecorder) DeleteImage(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockDefaultApi)(nil).DeleteImage), ctx, projectId, imageId)
}

// DeleteImageExecute mocks base method.
func (m *MockDefaultApi) DeleteImageExecute(ctx context.Context, projectId, imageId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageExecute", ctx, projectId, imageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageExecute indicates an expected call of DeleteImageExecute.
func (mr *MockDefaultApiMockRecorder) DeleteImageExecute(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteImageExecute), ctx, projectId, imageId)
}

// DeleteImageShare mocks base method.
func (m *MockDefaultApi) DeleteImageShare(ctx context.Context, projectId, imageId string) iaas.ApiDeleteImageShareRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageShare", ctx, projectId, imageId)
	ret0, _ := ret[0].(iaas.ApiDeleteImageShareRequest)
	return ret0
}

// DeleteImageShare indicates an expected call of DeleteImageShare.
func (mr *MockDefaultApiMockRecorder) DeleteImageShare(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageShare", reflect.TypeOf((*MockDefaultApi)(nil).DeleteImageShare), ctx, projectId, imageId)
}

// DeleteImageShareConsumer mocks base method.
func (m *MockDefaultApi) DeleteImageShareConsumer(ctx context.Context, projectId, imageId, consumerProjectId string) iaas.ApiDeleteImageShareConsumerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageShareConsumer", ctx, projectId, imageId, consumerProjectId)
	ret0, _ := ret[0].(iaas.ApiDeleteImageShareConsumerRequest)
	return ret0
}

// DeleteImageShareConsumer indicates an expected call of DeleteImageShareConsumer.
func (mr *MockDefaultApiMockRecorder) DeleteImageShareConsumer(ctx, projectId, imageId, consumerProjectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageShareConsumer", reflect.TypeOf((*MockDefaultApi)(nil).DeleteImageShareConsumer), ctx, projectId, imageId, consumerProjectId)
}

// DeleteImageShareConsumerExecute mocks base method.
func (m *MockDefaultApi) DeleteImageShareConsumerExecute(ctx context.Context, projectId, imageId, consumerProjectId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageShareConsumerExecute", ctx, projectId, imageId, consumerProjectId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageShareConsumerExecute indicates an expected call of DeleteImageShareConsumerExecute.
func (mr *MockDefaultApiMockRecorder) DeleteImageShareConsumerExecute(ctx, projectId, imageId, consumerProjectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageShareConsumerExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteImageShareConsumerExecute), ctx, projectId, imageId, consumerProjectId)
}

// DeleteImageShareExecute mocks base method.
func (m *MockDefaultApi) DeleteImageShareExecute(ctx context.Context, projectId, imageId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageShareExecute", ctx, projectId, imageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageShareExecute indicates an expected call of DeleteImageShareExecute.
func (mr *MockDefaultApiMockRecorder) DeleteImageShareExecute(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageShareExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteImageShareExecute), ctx, projectId, imageId)
}

// DeleteKeyPair mocks base method.
func (m *MockDefaultApi) DeleteKeyPair(ctx context.Context, keypairName string) iaas.ApiDeleteKeyPairRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyPair", ctx, keypairName)
	ret0, _ := ret[0].(iaas.ApiDeleteKeyPairRequest)
	return ret0
}

// DeleteKeyPair indicates an expected call of DeleteKeyPair.
func (mr *MockDefaultApiMockRecorder) DeleteKeyPair(ctx, keypairName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyPair", reflect.TypeOf((*MockDefaultApi)(nil).DeleteKeyPair), ctx, keypairName)
}

// DeleteKeyPairExecute mocks base method.
func (m *MockDefaultApi) DeleteKeyPairExecute(ctx context.Context, keypairName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteKeyPairExecute", ctx, keypairName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteKeyPairExecute indicates an expected call of DeleteKeyPairExecute.
func (mr *MockDefaultApiMockRecorder) DeleteKeyPairExecute(ctx, keypairName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyPairExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteKeyPairExecute), ctx, keypairName)
}

// DeleteNetwork mocks base method.
func (m *MockDefaultApi) DeleteNetwork(ctx context.Context, projectId, networkId string) iaas.ApiDeleteNetworkRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", ctx, projectId, networkId)
	ret0, _ := ret[0].(iaas.ApiDeleteNetworkRequest)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockDefaultApiMockRecorder) DeleteNetwork(ctx, projectId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockDefaultApi)(nil).DeleteNetwork), ctx, projectId, networkId)
}

// DeleteNetworkArea mocks base method.
func (m *MockDefaultApi) DeleteNetworkArea(ctx context.Context, organizationId, areaId string) iaas.ApiDeleteNetworkAreaRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkArea", ctx, organizationId, areaId)
	ret0, _ := ret[0].(iaas.ApiDeleteNetworkAreaRequest)
	return ret0
}

// DeleteNetworkArea indicates an expected call of DeleteNetworkArea.
func (mr *MockDefaultApiMockRecorder) DeleteNetworkArea(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkArea", reflect.TypeOf((*MockDefaultApi)(nil).DeleteNetworkArea), ctx, organizationId, areaId)
}

// DeleteNetworkAreaExecute mocks base method.
func (m *MockDefaultApi) DeleteNetworkAreaExecute(ctx context.Context, organizationId, areaId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkAreaExecute", ctx, organizationId, areaId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkAreaExecute indicates an expected call of DeleteNetworkAreaExecute.
func (mr *MockDefaultApiMockRecorder) DeleteNetworkAreaExecute(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkAreaExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteNetworkAreaExecute), ctx, organizationId, areaId)
}

// DeleteNetworkAreaRange mocks base method.
func (m *MockDefaultApi) DeleteNetworkAreaRange(ctx context.Context, organizationId, areaId, networkRangeId string) iaas.ApiDeleteNetworkAreaRangeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkAreaRange", ctx, organizationId, areaId, networkRangeId)
	ret0, _ := ret[0].(iaas.ApiDeleteNetworkAreaRangeRequest)
	return ret0
}

// DeleteNetworkAreaRange indicates an expected call of DeleteNetworkAreaRange.
func (mr *MockDefaultApiMockRecorder) DeleteNetworkAreaRange(ctx, organizationId, areaId, networkRangeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkAreaRange", reflect.TypeOf((*MockDefaultApi)(nil).DeleteNetworkAreaRange), ctx, organizationId, areaId, networkRangeId)
}

// DeleteNetworkAreaRangeExecute mocks base method.
func (m *MockDefaultApi) DeleteNetworkAreaRangeExecute(ctx context.Context, organizationId, areaId, networkRangeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkAreaRangeExecute", ctx, organizationId, areaId, networkRangeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkAreaRangeExecute indicates an expected call of DeleteNetworkAreaRangeExecute.
func (mr *MockDefaultApiMockRecorder) DeleteNetworkAreaRangeExecute(ctx, organizationId, areaId, networkRangeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkAreaRangeExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteNetworkAreaRangeExecute), ctx, organizationId, areaId, networkRangeId)
}

// DeleteNetworkAreaRoute mocks base method.
func (m *MockDefaultApi) DeleteNetworkAreaRoute(ctx context.Context, organizationId, areaId, routeId string) iaas.ApiDeleteNetworkAreaRouteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkAreaRoute", ctx, organizationId, areaId, routeId)
	ret0, _ := ret[0].(iaas.ApiDeleteNetworkAreaRouteRequest)
	return ret0
}

// DeleteNetworkAreaRoute indicates an expected call of DeleteNetworkAreaRoute.
func (mr *MockDefaultApiMockRecorder) DeleteNetworkAreaRoute(ctx, organizationId, areaId, routeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkAreaRoute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteNetworkAreaRoute), ctx, organizationId, areaId, routeId)
}

// DeleteNetworkAreaRouteExecute mocks base method.
func (m *MockDefaultApi) DeleteNetworkAreaRouteExecute(ctx context.Context, organizationId, areaId, routeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkAreaRouteExecute", ctx, organizationId, areaId, routeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkAreaRouteExecute indicates an expected call of DeleteNetworkAreaRouteExecute.
func (mr *MockDefaultApiMockRecorder) DeleteNetworkAreaRouteExecute(ctx, organizationId, areaId, routeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkAreaRouteExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteNetworkAreaRouteExecute), ctx, organizationId, areaId, routeId)
}

// DeleteNetworkExecute mocks base method.
func (m *MockDefaultApi) DeleteNetworkExecute(ctx context.Context, projectId, networkId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkExecute", ctx, projectId, networkId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkExecute indicates an expected call of DeleteNetworkExecute.
func (mr *MockDefaultApiMockRecorder) DeleteNetworkExecute(ctx, projectId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteNetworkExecute), ctx, projectId, networkId)
}

// DeleteNic mocks base method.
func (m *MockDefaultApi) DeleteNic(ctx context.Context, projectId, networkId, nicId string) iaas.ApiDeleteNicRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNic", ctx, projectId, networkId, nicId)
	ret0, _ := ret[0].(iaas.ApiDeleteNicRequest)
	return ret0
}

// DeleteNic indicates an expected call of DeleteNic.
func (mr *MockDefaultApiMockRecorder) DeleteNic(ctx, projectId, networkId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNic", reflect.TypeOf((*MockDefaultApi)(nil).DeleteNic), ctx, projectId, networkId, nicId)
}

// DeleteNicExecute mocks base method.
func (m *MockDefaultApi) DeleteNicExecute(ctx context.Context, projectId, networkId, nicId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNicExecute", ctx, projectId, networkId, nicId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNicExecute indicates an expected call of DeleteNicExecute.
func (mr *MockDefaultApiMockRecorder) DeleteNicExecute(ctx, projectId, networkId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNicExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteNicExecute), ctx, projectId, networkId, nicId)
}

// DeletePublicIP mocks base method.
func (m *MockDefaultApi) DeletePublicIP(ctx context.Context, projectId, publicIpId string) iaas.ApiDeletePublicIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicIP", ctx, projectId, publicIpId)
	ret0, _ := ret[0].(iaas.ApiDeletePublicIPRequest)
	return ret0
}

// DeletePublicIP indicates an expected call of DeletePublicIP.
func (mr *MockDefaultApiMockRecorder) DeletePublicIP(ctx, projectId, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicIP", reflect.TypeOf((*MockDefaultApi)(nil).DeletePublicIP), ctx, projectId, publicIpId)
}

// DeletePublicIPExecute mocks base method.
func (m *MockDefaultApi) DeletePublicIPExecute(ctx context.Context, projectId, publicIpId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePublicIPExecute", ctx, projectId, publicIpId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePublicIPExecute indicates an expected call of DeletePublicIPExecute.
func (mr *MockDefaultApiMockRecorder) DeletePublicIPExecute(ctx, projectId, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePublicIPExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeletePublicIPExecute), ctx, projectId, publicIpId)
}

// DeleteSecurityGroup mocks base method.
func (m *MockDefaultApi) DeleteSecurityGroup(ctx context.Context, projectId, securityGroupId string) iaas.ApiDeleteSecurityGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroup", ctx, projectId, securityGroupId)
	ret0, _ := ret[0].(iaas.ApiDeleteSecurityGroupRequest)
	return ret0
}

// DeleteSecurityGroup indicates an expected call of DeleteSecurityGroup.
func (mr *MockDefaultApiMockRecorder) DeleteSecurityGroup(ctx, projectId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroup", reflect.TypeOf((*MockDefaultApi)(nil).DeleteSecurityGroup), ctx, projectId, securityGroupId)
}

// DeleteSecurityGroupExecute mocks base method.
func (m *MockDefaultApi) DeleteSecurityGroupExecute(ctx context.Context, projectId, securityGroupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroupExecute", ctx, projectId, securityGroupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroupExecute indicates an expected call of DeleteSecurityGroupExecute.
func (mr *MockDefaultApiMockRecorder) DeleteSecurityGroupExecute(ctx, projectId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroupExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteSecurityGroupExecute), ctx, projectId, securityGroupId)
}

// DeleteSecurityGroupRule mocks base method.
func (m *MockDefaultApi) DeleteSecurityGroupRule(ctx context.Context, projectId, securityGroupId, securityGroupRuleId string) iaas.ApiDeleteSecurityGroupRuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroupRule", ctx, projectId, securityGroupId, securityGroupRuleId)
	ret0, _ := ret[0].(iaas.ApiDeleteSecurityGroupRuleRequest)
	return ret0
}

// DeleteSecurityGroupRule indicates an expected call of DeleteSecurityGroupRule.
func (mr *MockDefaultApiMockRecorder) DeleteSecurityGroupRule(ctx, projectId, securityGroupId, securityGroupRuleId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroupRule", reflect.TypeOf((*MockDefaultApi)(nil).DeleteSecurityGroupRule), ctx, projectId, securityGroupId, securityGroupRuleId)
}

// DeleteSecurityGroupRuleExecute mocks base method.
func (m *MockDefaultApi) DeleteSecurityGroupRuleExecute(ctx context.Context, projectId, securityGroupId, securityGroupRuleId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecurityGroupRuleExecute", ctx, projectId, securityGroupId, securityGroupRuleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecurityGroupRuleExecute indicates an expected call of DeleteSecurityGroupRuleExecute.
func (mr *MockDefaultApiMockRecorder) DeleteSecurityGroupRuleExecute(ctx, projectId, securityGroupId, securityGroupRuleId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecurityGroupRuleExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteSecurityGroupRuleExecute), ctx, projectId, securityGroupId, securityGroupRuleId)
}

// DeleteServer mocks base method.
func (m *MockDefaultApi) DeleteServer(ctx context.Context, projectId, serverId string) iaas.ApiDeleteServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiDeleteServerRequest)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockDefaultApiMockRecorder) DeleteServer(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockDefaultApi)(nil).DeleteServer), ctx, projectId, serverId)
}

// DeleteServerExecute mocks base method.
func (m *MockDefaultApi) DeleteServerExecute(ctx context.Context, projectId, serverId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerExecute indicates an expected call of DeleteServerExecute.
func (mr *MockDefaultApiMockRecorder) DeleteServerExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteServerExecute), ctx, projectId, serverId)
}

// DeleteSnapshot mocks base method.
func (m *MockDefaultApi) DeleteSnapshot(ctx context.Context, projectId, snapshotId string) iaas.ApiDeleteSnapshotRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshot", ctx, projectId, snapshotId)
	ret0, _ := ret[0].(iaas.ApiDeleteSnapshotRequest)
	return ret0
}

// DeleteSnapshot indicates an expected call of DeleteSnapshot.
func (mr *MockDefaultApiMockRecorder) DeleteSnapshot(ctx, projectId, snapshotId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshot", reflect.TypeOf((*MockDefaultApi)(nil).DeleteSnapshot), ctx, projectId, snapshotId)
}

// DeleteSnapshotExecute mocks base method.
func (m *MockDefaultApi) DeleteSnapshotExecute(ctx context.Context, projectId, snapshotId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSnapshotExecute", ctx, projectId, snapshotId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSnapshotExecute indicates an expected call of DeleteSnapshotExecute.
func (mr *MockDefaultApiMockRecorder) DeleteSnapshotExecute(ctx, projectId, snapshotId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSnapshotExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteSnapshotExecute), ctx, projectId, snapshotId)
}

// DeleteVolume mocks base method.
func (m *MockDefaultApi) DeleteVolume(ctx context.Context, projectId, volumeId string) iaas.ApiDeleteVolumeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, projectId, volumeId)
	ret0, _ := ret[0].(iaas.ApiDeleteVolumeRequest)
	return ret0
}

// DeleteVolume indicates an expected call of DeleteVolume.
func (mr *MockDefaultApiMockRecorder) DeleteVolume(ctx, projectId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockDefaultApi)(nil).DeleteVolume), ctx, projectId, volumeId)
}

// DeleteVolumeExecute mocks base method.
func (m *MockDefaultApi) DeleteVolumeExecute(ctx context.Context, projectId, volumeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeExecute", ctx, projectId, volumeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeExecute indicates an expected call of DeleteVolumeExecute.
func (mr *MockDefaultApiMockRecorder) DeleteVolumeExecute(ctx, projectId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteVolumeExecute), ctx, projectId, volumeId)
}

// GetAffinityGroup mocks base method.
func (m *MockDefaultApi) GetAffinityGroup(ctx context.Context, projectId, affinityGroupId string) iaas.ApiGetAffinityGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffinityGroup", ctx, projectId, affinityGroupId)
	ret0, _ := ret[0].(iaas.ApiGetAffinityGroupRequest)
	return ret0
}

// GetAffinityGroup indicates an expected call of GetAffinityGroup.
func (mr *MockDefaultApiMockRecorder) GetAffinityGroup(ctx, projectId, affinityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinityGroup", reflect.TypeOf((*MockDefaultApi)(nil).GetAffinityGroup), ctx, projectId, affinityGroupId)
}

// GetAffinityGroupExecute mocks base method.
func (m *MockDefaultApi) GetAffinityGroupExecute(ctx context.Context, projectId, affinityGroupId string) (*iaas.AffinityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffinityGroupExecute", ctx, projectId, affinityGroupId)
	ret0, _ := ret[0].(*iaas.AffinityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffinityGroupExecute indicates an expected call of GetAffinityGroupExecute.
func (mr *MockDefaultApiMockRecorder) GetAffinityGroupExecute(ctx, projectId, affinityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffinityGroupExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetAffinityGroupExecute), ctx, projectId, affinityGroupId)
}

// GetAttachedVolume mocks base method.
func (m *MockDefaultApi) GetAttachedVolume(ctx context.Context, projectId, serverId, volumeId string) iaas.ApiGetAttachedVolumeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachedVolume", ctx, projectId, serverId, volumeId)
	ret0, _ := ret[0].(iaas.ApiGetAttachedVolumeRequest)
	return ret0
}

// GetAttachedVolume indicates an expected call of GetAttachedVolume.
func (mr *MockDefaultApiMockRecorder) GetAttachedVolume(ctx, projectId, serverId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachedVolume", reflect.TypeOf((*MockDefaultApi)(nil).GetAttachedVolume), ctx, projectId, serverId, volumeId)
}

// GetAttachedVolumeExecute mocks base method.
func (m *MockDefaultApi) GetAttachedVolumeExecute(ctx context.Context, projectId, serverId, volumeId string) (*iaas.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttachedVolumeExecute", ctx, projectId, serverId, volumeId)
	ret0, _ := ret[0].(*iaas.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttachedVolumeExecute indicates an expected call of GetAttachedVolumeExecute.
func (mr *MockDefaultApiMockRecorder) GetAttachedVolumeExecute(ctx, projectId, serverId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttachedVolumeExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetAttachedVolumeExecute), ctx, projectId, serverId, volumeId)
}

// GetBackup mocks base method.
func (m *MockDefaultApi) GetBackup(ctx context.Context, projectId, backupId string) iaas.ApiGetBackupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackup", ctx, projectId, backupId)
	ret0, _ := ret[0].(iaas.ApiGetBackupRequest)
	return ret0
}

// GetBackup indicates an expected call of GetBackup.
func (mr *MockDefaultApiMockRecorder) GetBackup(ctx, projectId, backupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackup", reflect.TypeOf((*MockDefaultApi)(nil).GetBackup), ctx, projectId, backupId)
}

// GetBackupExecute mocks base method.
func (m *MockDefaultApi) GetBackupExecute(ctx context.Context, projectId, backupId string) (*iaas.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackupExecute", ctx, projectId, backupId)
	ret0, _ := ret[0].(*iaas.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackupExecute indicates an expected call of GetBackupExecute.
func (mr *MockDefaultApiMockRecorder) GetBackupExecute(ctx, projectId, backupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackupExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetBackupExecute), ctx, projectId, backupId)
}

// GetImage mocks base method.
func (m *MockDefaultApi) GetImage(ctx context.Context, projectId, imageId string) iaas.ApiGetImageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, projectId, imageId)
	ret0, _ := ret[0].(iaas.ApiGetImageRequest)
	return ret0
}

// GetImage indicates an expected call of GetImage.
func (mr *MockDefaultApiMockRecorder) GetImage(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockDefaultApi)(nil).GetImage), ctx, projectId, imageId)
}

// GetImageExecute mocks base method.
func (m *MockDefaultApi) GetImageExecute(ctx context.Context, projectId, imageId string) (*iaas.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageExecute", ctx, projectId, imageId)
	ret0, _ := ret[0].(*iaas.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageExecute indicates an expected call of GetImageExecute.
func (mr *MockDefaultApiMockRecorder) GetImageExecute(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetImageExecute), ctx, projectId, imageId)
}

// GetImageShare mocks base method.
func (m *MockDefaultApi) GetImageShare(ctx context.Context, projectId, imageId string) iaas.ApiGetImageShareRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageShare", ctx, projectId, imageId)
	ret0, _ := ret[0].(iaas.ApiGetImageShareRequest)
	return ret0
}

// GetImageShare indicates an expected call of GetImageShare.
func (mr *MockDefaultApiMockRecorder) GetImageShare(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageShare", reflect.TypeOf((*MockDefaultApi)(nil).GetImageShare), ctx, projectId, imageId)
}

// GetImageShareConsumer mocks base method.
func (m *MockDefaultApi) GetImageShareConsumer(ctx context.Context, projectId, imageId, consumerProjectId string) iaas.ApiGetImageShareConsumerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageShareConsumer", ctx, projectId, imageId, consumerProjectId)
	ret0, _ := ret[0].(iaas.ApiGetImageShareConsumerRequest)
	return ret0
}

// GetImageShareConsumer indicates an expected call of GetImageShareConsumer.
func (mr *MockDefaultApiMockRecorder) GetImageShareConsumer(ctx, projectId, imageId, consumerProjectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageShareConsumer", reflect.TypeOf((*MockDefaultApi)(nil).GetImageShareConsumer), ctx, projectId, imageId, consumerProjectId)
}

// GetImageShareConsumerExecute mocks base method.
func (m *MockDefaultApi) GetImageShareConsumerExecute(ctx context.Context, projectId, imageId, consumerProjectId string) (*iaas.ImageShareConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageShareConsumerExecute", ctx, projectId, imageId, consumerProjectId)
	ret0, _ := ret[0].(*iaas.ImageShareConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageShareConsumerExecute indicates an expected call of GetImageShareConsumerExecute.
func (mr *MockDefaultApiMockRecorder) GetImageShareConsumerExecute(ctx, projectId, imageId, consumerProjectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageShareConsumerExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetImageShareConsumerExecute), ctx, projectId, imageId, consumerProjectId)
}

// GetImageShareExecute mocks base method.
func (m *MockDefaultApi) GetImageShareExecute(ctx context.Context, projectId, imageId string) (*iaas.ImageShare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageShareExecute", ctx, projectId, imageId)
	ret0, _ := ret[0].(*iaas.ImageShare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageShareExecute indicates an expected call of GetImageShareExecute.
func (mr *MockDefaultApiMockRecorder) GetImageShareExecute(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageShareExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetImageShareExecute), ctx, projectId, imageId)
}

// GetKeyPair mocks base method.
func (m *MockDefaultApi) GetKeyPair(ctx context.Context, keypairName string) iaas.ApiGetKeyPairRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyPair", ctx, keypairName)
	ret0, _ := ret[0].(iaas.ApiGetKeyPairRequest)
	return ret0
}

// GetKeyPair indicates an expected call of GetKeyPair.
func (mr *MockDefaultApiMockRecorder) GetKeyPair(ctx, keypairName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPair", reflect.TypeOf((*MockDefaultApi)(nil).GetKeyPair), ctx, keypairName)
}

// GetKeyPairExecute mocks base method.
func (m *MockDefaultApi) GetKeyPairExecute(ctx context.Context, keypairName string) (*iaas.Keypair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKeyPairExecute", ctx, keypairName)
	ret0, _ := ret[0].(*iaas.Keypair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKeyPairExecute indicates an expected call of GetKeyPairExecute.
func (mr *MockDefaultApiMockRecorder) GetKeyPairExecute(ctx, keypairName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKeyPairExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetKeyPairExecute), ctx, keypairName)
}

// GetMachineType mocks base method.
func (m *MockDefaultApi) GetMachineType(ctx context.Context, projectId, machineType string) iaas.ApiGetMachineTypeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineType", ctx, projectId, machineType)
	ret0, _ := ret[0].(iaas.ApiGetMachineTypeRequest)
	return ret0
}

// GetMachineType indicates an expected call of GetMachineType.
func (mr *MockDefaultApiMockRecorder) GetMachineType(ctx, projectId, machineType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineType", reflect.TypeOf((*MockDefaultApi)(nil).GetMachineType), ctx, projectId, machineType)
}

// GetMachineTypeExecute mocks base method.
func (m *MockDefaultApi) GetMachineTypeExecute(ctx context.Context, projectId, machineType string) (*iaas.MachineType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineTypeExecute", ctx, projectId, machineType)
	ret0, _ := ret[0].(*iaas.MachineType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineTypeExecute indicates an expected call of GetMachineTypeExecute.
func (mr *MockDefaultApiMockRecorder) GetMachineTypeExecute(ctx, projectId, machineType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineTypeExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetMachineTypeExecute), ctx, projectId, machineType)
}

// GetNetwork mocks base method.
func (m *MockDefaultApi) GetNetwork(ctx context.Context, projectId, networkId string) iaas.ApiGetNetworkRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", ctx, projectId, networkId)
	ret0, _ := ret[0].(iaas.ApiGetNetworkRequest)
	return ret0
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockDefaultApiMockRecorder) GetNetwork(ctx, projectId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockDefaultApi)(nil).GetNetwork), ctx, projectId, networkId)
}

// GetNetworkArea mocks base method.
func (m *MockDefaultApi) GetNetworkArea(ctx context.Context, organizationId, areaId string) iaas.ApiGetNetworkAreaRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkArea", ctx, organizationId, areaId)
	ret0, _ := ret[0].(iaas.ApiGetNetworkAreaRequest)
	return ret0
}

// GetNetworkArea indicates an expected call of GetNetworkArea.
func (mr *MockDefaultApiMockRecorder) GetNetworkArea(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkArea", reflect.TypeOf((*MockDefaultApi)(nil).GetNetworkArea), ctx, organizationId, areaId)
}

// GetNetworkAreaExecute mocks base method.
func (m *MockDefaultApi) GetNetworkAreaExecute(ctx context.Context, organizationId, areaId string) (*iaas.NetworkArea, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAreaExecute", ctx, organizationId, areaId)
	ret0, _ := ret[0].(*iaas.NetworkArea)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAreaExecute indicates an expected call of GetNetworkAreaExecute.
func (mr *MockDefaultApiMockRecorder) GetNetworkAreaExecute(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAreaExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetNetworkAreaExecute), ctx, organizationId, areaId)
}

// GetNetworkAreaRange mocks base method.
func (m *MockDefaultApi) GetNetworkAreaRange(ctx context.Context, organizationId, areaId, networkRangeId string) iaas.ApiGetNetworkAreaRangeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAreaRange", ctx, organizationId, areaId, networkRangeId)
	ret0, _ := ret[0].(iaas.ApiGetNetworkAreaRangeRequest)
	return ret0
}

// GetNetworkAreaRange indicates an expected call of GetNetworkAreaRange.
func (mr *MockDefaultApiMockRecorder) GetNetworkAreaRange(ctx, organizationId, areaId, networkRangeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAreaRange", reflect.TypeOf((*MockDefaultApi)(nil).GetNetworkAreaRange), ctx, organizationId, areaId, networkRangeId)
}

// GetNetworkAreaRangeExecute mocks base method.
func (m *MockDefaultApi) GetNetworkAreaRangeExecute(ctx context.Context, organizationId, areaId, networkRangeId string) (*iaas.NetworkRange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAreaRangeExecute", ctx, organizationId, areaId, networkRangeId)
	ret0, _ := ret[0].(*iaas.NetworkRange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAreaRangeExecute indicates an expected call of GetNetworkAreaRangeExecute.
func (mr *MockDefaultApiMockRecorder) GetNetworkAreaRangeExecute(ctx, organizationId, areaId, networkRangeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAreaRangeExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetNetworkAreaRangeExecute), ctx, organizationId, areaId, networkRangeId)
}

// GetNetworkAreaRoute mocks base method.
func (m *MockDefaultApi) GetNetworkAreaRoute(ctx context.Context, organizationId, areaId, routeId string) iaas.ApiGetNetworkAreaRouteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAreaRoute", ctx, organizationId, areaId, routeId)
	ret0, _ := ret[0].(iaas.ApiGetNetworkAreaRouteRequest)
	return ret0
}

// GetNetworkAreaRoute indicates an expected call of GetNetworkAreaRoute.
func (mr *MockDefaultApiMockRecorder) GetNetworkAreaRoute(ctx, organizationId, areaId, routeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAreaRoute", reflect.TypeOf((*MockDefaultApi)(nil).GetNetworkAreaRoute), ctx, organizationId, areaId, routeId)
}

// GetNetworkAreaRouteExecute mocks base method.
func (m *MockDefaultApi) GetNetworkAreaRouteExecute(ctx context.Context, organizationId, areaId, routeId string) (*iaas.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAreaRouteExecute", ctx, organizationId, areaId, routeId)
	ret0, _ := ret[0].(*iaas.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAreaRouteExecute indicates an expected call of GetNetworkAreaRouteExecute.
func (mr *MockDefaultApiMockRecorder) GetNetworkAreaRouteExecute(ctx, organizationId, areaId, routeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAreaRouteExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetNetworkAreaRouteExecute), ctx, organizationId, areaId, routeId)
}

// GetNetworkExecute mocks base method.
func (m *MockDefaultApi) GetNetworkExecute(ctx context.Context, projectId, networkId string) (*iaas.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkExecute", ctx, projectId, networkId)
	ret0, _ := ret[0].(*iaas.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkExecute indicates an expected call of GetNetworkExecute.
func (mr *MockDefaultApiMockRecorder) GetNetworkExecute(ctx, projectId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetNetworkExecute), ctx, projectId, networkId)
}

// GetNic mocks base method.
func (m *MockDefaultApi) GetNic(ctx context.Context, projectId, networkId, nicId string) iaas.ApiGetNicRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNic", ctx, projectId, networkId, nicId)
	ret0, _ := ret[0].(iaas.ApiGetNicRequest)
	return ret0
}

// GetNic indicates an expected call of GetNic.
func (mr *MockDefaultApiMockRecorder) GetNic(ctx, projectId, networkId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNic", reflect.TypeOf((*MockDefaultApi)(nil).GetNic), ctx, projectId, networkId, nicId)
}

// GetNicExecute mocks base method.
func (m *MockDefaultApi) GetNicExecute(ctx context.Context, projectId, networkId, nicId string) (*iaas.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNicExecute", ctx, projectId, networkId, nicId)
	ret0, _ := ret[0].(*iaas.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNicExecute indicates an expected call of GetNicExecute.
func (mr *MockDefaultApiMockRecorder) GetNicExecute(ctx, projectId, networkId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNicExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetNicExecute), ctx, projectId, networkId, nicId)
}

// GetOrganizationRequest mocks base method.
func (m *MockDefaultApi) GetOrganizationRequest(ctx context.Context, organizationId, requestId string) iaas.ApiGetOrganizationRequestRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationRequest", ctx, organizationId, requestId)
	ret0, _ := ret[0].(iaas.ApiGetOrganizationRequestRequest)
	return ret0
}

// GetOrganizationRequest indicates an expected call of GetOrganizationRequest.
func (mr *MockDefaultApiMockRecorder) GetOrganizationRequest(ctx, organizationId, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationRequest", reflect.TypeOf((*MockDefaultApi)(nil).GetOrganizationRequest), ctx, organizationId, requestId)
}

// GetOrganizationRequestExecute mocks base method.
func (m *MockDefaultApi) GetOrganizationRequestExecute(ctx context.Context, organizationId, requestId string) (*iaas.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrganizationRequestExecute", ctx, organizationId, requestId)
	ret0, _ := ret[0].(*iaas.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrganizationRequestExecute indicates an expected call of GetOrganizationRequestExecute.
func (mr *MockDefaultApiMockRecorder) GetOrganizationRequestExecute(ctx, organizationId, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizationRequestExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetOrganizationRequestExecute), ctx, organizationId, requestId)
}

// GetProjectNIC mocks base method.
func (m *MockDefaultApi) GetProjectNIC(ctx context.Context, projectId, nicId string) iaas.ApiGetProjectNICRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectNIC", ctx, projectId, nicId)
	ret0, _ := ret[0].(iaas.ApiGetProjectNICRequest)
	return ret0
}

// GetProjectNIC indicates an expected call of GetProjectNIC.
func (mr *MockDefaultApiMockRecorder) GetProjectNIC(ctx, projectId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectNIC", reflect.TypeOf((*MockDefaultApi)(nil).GetProjectNIC), ctx, projectId, nicId)
}

// GetProjectNICExecute mocks base method.
func (m *MockDefaultApi) GetProjectNICExecute(ctx context.Context, projectId, nicId string) (*iaas.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectNICExecute", ctx, projectId, nicId)
	ret0, _ := ret[0].(*iaas.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectNICExecute indicates an expected call of GetProjectNICExecute.
func (mr *MockDefaultApiMockRecorder) GetProjectNICExecute(ctx, projectId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectNICExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetProjectNICExecute), ctx, projectId, nicId)
}

// GetProjectRequest mocks base method.
func (m *MockDefaultApi) GetProjectRequest(ctx context.Context, projectId, requestId string) iaas.ApiGetProjectRequestRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectRequest", ctx, projectId, requestId)
	ret0, _ := ret[0].(iaas.ApiGetProjectRequestRequest)
	return ret0
}

// GetProjectRequest indicates an expected call of GetProjectRequest.
func (mr *MockDefaultApiMockRecorder) GetProjectRequest(ctx, projectId, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectRequest", reflect.TypeOf((*MockDefaultApi)(nil).GetProjectRequest), ctx, projectId, requestId)
}

// GetProjectRequestExecute mocks base method.
func (m *MockDefaultApi) GetProjectRequestExecute(ctx context.Context, projectId, requestId string) (*iaas.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectRequestExecute", ctx, projectId, requestId)
	ret0, _ := ret[0].(*iaas.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectRequestExecute indicates an expected call of GetProjectRequestExecute.
func (mr *MockDefaultApiMockRecorder) GetProjectRequestExecute(ctx, projectId, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectRequestExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetProjectRequestExecute), ctx, projectId, requestId)
}

// GetPublicIP mocks base method.
func (m *MockDefaultApi) GetPublicIP(ctx context.Context, projectId, publicIpId string) iaas.ApiGetPublicIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicIP", ctx, projectId, publicIpId)
	ret0, _ := ret[0].(iaas.ApiGetPublicIPRequest)
	return ret0
}

// GetPublicIP indicates an expected call of GetPublicIP.
func (mr *MockDefaultApiMockRecorder) GetPublicIP(ctx, projectId, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicIP", reflect.TypeOf((*MockDefaultApi)(nil).GetPublicIP), ctx, projectId, publicIpId)
}

// GetPublicIPExecute mocks base method.
func (m *MockDefaultApi) GetPublicIPExecute(ctx context.Context, projectId, publicIpId string) (*iaas.PublicIp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicIPExecute", ctx, projectId, publicIpId)
	ret0, _ := ret[0].(*iaas.PublicIp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicIPExecute indicates an expected call of GetPublicIPExecute.
func (mr *MockDefaultApiMockRecorder) GetPublicIPExecute(ctx, projectId, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicIPExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetPublicIPExecute), ctx, projectId, publicIpId)
}

// GetSecurityGroup mocks base method.
func (m *MockDefaultApi) GetSecurityGroup(ctx context.Context, projectId, securityGroupId string) iaas.ApiGetSecurityGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroup", ctx, projectId, securityGroupId)
	ret0, _ := ret[0].(iaas.ApiGetSecurityGroupRequest)
	return ret0
}

// GetSecurityGroup indicates an expected call of GetSecurityGroup.
func (mr *MockDefaultApiMockRecorder) GetSecurityGroup(ctx, projectId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroup", reflect.TypeOf((*MockDefaultApi)(nil).GetSecurityGroup), ctx, projectId, securityGroupId)
}

// GetSecurityGroupExecute mocks base method.
func (m *MockDefaultApi) GetSecurityGroupExecute(ctx context.Context, projectId, securityGroupId string) (*iaas.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupExecute", ctx, projectId, securityGroupId)
	ret0, _ := ret[0].(*iaas.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupExecute indicates an expected call of GetSecurityGroupExecute.
func (mr *MockDefaultApiMockRecorder) GetSecurityGroupExecute(ctx, projectId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetSecurityGroupExecute), ctx, projectId, securityGroupId)
}

// GetSecurityGroupRule mocks base method.
func (m *MockDefaultApi) GetSecurityGroupRule(ctx context.Context, projectId, securityGroupId, securityGroupRuleId string) iaas.ApiGetSecurityGroupRuleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupRule", ctx, projectId, securityGroupId, securityGroupRuleId)
	ret0, _ := ret[0].(iaas.ApiGetSecurityGroupRuleRequest)
	return ret0
}

// GetSecurityGroupRule indicates an expected call of GetSecurityGroupRule.
func (mr *MockDefaultApiMockRecorder) GetSecurityGroupRule(ctx, projectId, securityGroupId, securityGroupRuleId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupRule", reflect.TypeOf((*MockDefaultApi)(nil).GetSecurityGroupRule), ctx, projectId, securityGroupId, securityGroupRuleId)
}

// GetSecurityGroupRuleExecute mocks base method.
func (m *MockDefaultApi) GetSecurityGroupRuleExecute(ctx context.Context, projectId, securityGroupId, securityGroupRuleId string) (*iaas.SecurityGroupRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecurityGroupRuleExecute", ctx, projectId, securityGroupId, securityGroupRuleId)
	ret0, _ := ret[0].(*iaas.SecurityGroupRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecurityGroupRuleExecute indicates an expected call of GetSecurityGroupRuleExecute.
func (mr *MockDefaultApiMockRecorder) GetSecurityGroupRuleExecute(ctx, projectId, securityGroupId, securityGroupRuleId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecurityGroupRuleExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetSecurityGroupRuleExecute), ctx, projectId, securityGroupId, securityGroupRuleId)
}

// GetServer mocks base method.
func (m *MockDefaultApi) GetServer(ctx context.Context, projectId, serverId string) iaas.ApiGetServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiGetServerRequest)
	return ret0
}

// GetServer indicates an expected call of GetServer.
func (mr *MockDefaultApiMockRecorder) GetServer(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockDefaultApi)(nil).GetServer), ctx, projectId, serverId)
}

// GetServerConsole mocks base method.
func (m *MockDefaultApi) GetServerConsole(ctx context.Context, projectId, serverId string) iaas.ApiGetServerConsoleRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerConsole", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiGetServerConsoleRequest)
	return ret0
}

// GetServerConsole indicates an expected call of GetServerConsole.
func (mr *MockDefaultApiMockRecorder) GetServerConsole(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerConsole", reflect.TypeOf((*MockDefaultApi)(nil).GetServerConsole), ctx, projectId, serverId)
}

// GetServerConsoleExecute mocks base method.
func (m *MockDefaultApi) GetServerConsoleExecute(ctx context.Context, projectId, serverId string) (*iaas.ServerConsoleUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerConsoleExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(*iaas.ServerConsoleUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerConsoleExecute indicates an expected call of GetServerConsoleExecute.
func (mr *MockDefaultApiMockRecorder) GetServerConsoleExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerConsoleExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetServerConsoleExecute), ctx, projectId, serverId)
}

// GetServerExecute mocks base method.
func (m *MockDefaultApi) GetServerExecute(ctx context.Context, projectId, serverId string) (*iaas.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(*iaas.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerExecute indicates an expected call of GetServerExecute.
func (mr *MockDefaultApiMockRecorder) GetServerExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetServerExecute), ctx, projectId, serverId)
}

// GetServerLog mocks base method.
func (m *MockDefaultApi) GetServerLog(ctx context.Context, projectId, serverId string) iaas.ApiGetServerLogRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerLog", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiGetServerLogRequest)
	return ret0
}

// GetServerLog indicates an expected call of GetServerLog.
func (mr *MockDefaultApiMockRecorder) GetServerLog(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerLog", reflect.TypeOf((*MockDefaultApi)(nil).GetServerLog), ctx, projectId, serverId)
}

// GetServerLogExecute mocks base method.
func (m *MockDefaultApi) GetServerLogExecute(ctx context.Context, projectId, serverId string) (*iaas.GetServerLog200Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerLogExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(*iaas.GetServerLog200Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerLogExecute indicates an expected call of GetServerLogExecute.
func (mr *MockDefaultApiMockRecorder) GetServerLogExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerLogExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetServerLogExecute), ctx, projectId, serverId)
}

// GetSnapshot mocks base method.
func (m *MockDefaultApi) GetSnapshot(ctx context.Context, projectId, snapshotId string) iaas.ApiGetSnapshotRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshot", ctx, projectId, snapshotId)
	ret0, _ := ret[0].(iaas.ApiGetSnapshotRequest)
	return ret0
}

// GetSnapshot indicates an expected call of GetSnapshot.
func (mr *MockDefaultApiMockRecorder) GetSnapshot(ctx, projectId, snapshotId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshot", reflect.TypeOf((*MockDefaultApi)(nil).GetSnapshot), ctx, projectId, snapshotId)
}

// GetSnapshotExecute mocks base method.
func (m *MockDefaultApi) GetSnapshotExecute(ctx context.Context, projectId, snapshotId string) (*iaas.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSnapshotExecute", ctx, projectId, snapshotId)
	ret0, _ := ret[0].(*iaas.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshotExecute indicates an expected call of GetSnapshotExecute.
func (mr *MockDefaultApiMockRecorder) GetSnapshotExecute(ctx, projectId, snapshotId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshotExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetSnapshotExecute), ctx, projectId, snapshotId)
}

// GetVolume mocks base method.
func (m *MockDefaultApi) GetVolume(ctx context.Context, projectId, volumeId string) iaas.ApiGetVolumeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolume", ctx, projectId, volumeId)
	ret0, _ := ret[0].(iaas.ApiGetVolumeRequest)
	return ret0
}

// GetVolume indicates an expected call of GetVolume.
func (mr *MockDefaultApiMockRecorder) GetVolume(ctx, projectId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolume", reflect.TypeOf((*MockDefaultApi)(nil).GetVolume), ctx, projectId, volumeId)
}

// GetVolumeExecute mocks base method.
func (m *MockDefaultApi) GetVolumeExecute(ctx context.Context, projectId, volumeId string) (*iaas.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeExecute", ctx, projectId, volumeId)
	ret0, _ := ret[0].(*iaas.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeExecute indicates an expected call of GetVolumeExecute.
func (mr *MockDefaultApiMockRecorder) GetVolumeExecute(ctx, projectId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetVolumeExecute), ctx, projectId, volumeId)
}

// GetVolumePerformanceClass mocks base method.
func (m *MockDefaultApi) GetVolumePerformanceClass(ctx context.Context, projectId, volumePerformanceClass string) iaas.ApiGetVolumePerformanceClassRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumePerformanceClass", ctx, projectId, volumePerformanceClass)
	ret0, _ := ret[0].(iaas.ApiGetVolumePerformanceClassRequest)
	return ret0
}

// GetVolumePerformanceClass indicates an expected call of GetVolumePerformanceClass.
func (mr *MockDefaultApiMockRecorder) GetVolumePerformanceClass(ctx, projectId, volumePerformanceClass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumePerformanceClass", reflect.TypeOf((*MockDefaultApi)(nil).GetVolumePerformanceClass), ctx, projectId, volumePerformanceClass)
}

// GetVolumePerformanceClassExecute mocks base method.
func (m *MockDefaultApi) GetVolumePerformanceClassExecute(ctx context.Context, projectId, volumePerformanceClass string) (*iaas.VolumePerformanceClass, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumePerformanceClassExecute", ctx, projectId, volumePerformanceClass)
	ret0, _ := ret[0].(*iaas.VolumePerformanceClass)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumePerformanceClassExecute indicates an expected call of GetVolumePerformanceClassExecute.
func (mr *MockDefaultApiMockRecorder) GetVolumePerformanceClassExecute(ctx, projectId, volumePerformanceClass any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumePerformanceClassExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetVolumePerformanceClassExecute), ctx, projectId, volumePerformanceClass)
}

// ListAffinityGroups mocks base method.
func (m *MockDefaultApi) ListAffinityGroups(ctx context.Context, projectId string) iaas.ApiListAffinityGroupsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAffinityGroups", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListAffinityGroupsRequest)
	return ret0
}

// ListAffinityGroups indicates an expected call of ListAffinityGroups.
func (mr *MockDefaultApiMockRecorder) ListAffinityGroups(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAffinityGroups", reflect.TypeOf((*MockDefaultApi)(nil).ListAffinityGroups), ctx, projectId)
}

// ListAffinityGroupsExecute mocks base method.
func (m *MockDefaultApi) ListAffinityGroupsExecute(ctx context.Context, projectId string) (*iaas.AffinityGroupListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAffinityGroupsExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.AffinityGroupListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAffinityGroupsExecute indicates an expected call of ListAffinityGroupsExecute.
func (mr *MockDefaultApiMockRecorder) ListAffinityGroupsExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAffinityGroupsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListAffinityGroupsExecute), ctx, projectId)
}

// ListAttachedVolumes mocks base method.
func (m *MockDefaultApi) ListAttachedVolumes(ctx context.Context, projectId, serverId string) iaas.ApiListAttachedVolumesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachedVolumes", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiListAttachedVolumesRequest)
	return ret0
}

// ListAttachedVolumes indicates an expected call of ListAttachedVolumes.
func (mr *MockDefaultApiMockRecorder) ListAttachedVolumes(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedVolumes", reflect.TypeOf((*MockDefaultApi)(nil).ListAttachedVolumes), ctx, projectId, serverId)
}

// ListAttachedVolumesExecute mocks base method.
func (m *MockDefaultApi) ListAttachedVolumesExecute(ctx context.Context, projectId, serverId string) (*iaas.VolumeAttachmentListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAttachedVolumesExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(*iaas.VolumeAttachmentListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttachedVolumesExecute indicates an expected call of ListAttachedVolumesExecute.
func (mr *MockDefaultApiMockRecorder) ListAttachedVolumesExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttachedVolumesExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListAttachedVolumesExecute), ctx, projectId, serverId)
}

// ListAvailabilityZones mocks base method.
func (m *MockDefaultApi) ListAvailabilityZones(ctx context.Context) iaas.ApiListAvailabilityZonesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailabilityZones", ctx)
	ret0, _ := ret[0].(iaas.ApiListAvailabilityZonesRequest)
	return ret0
}

// ListAvailabilityZones indicates an expected call of ListAvailabilityZones.
func (mr *MockDefaultApiMockRecorder) ListAvailabilityZones(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailabilityZones", reflect.TypeOf((*MockDefaultApi)(nil).ListAvailabilityZones), ctx)
}

// ListAvailabilityZonesExecute mocks base method.
func (m *MockDefaultApi) ListAvailabilityZonesExecute(ctx context.Context) (*iaas.AvailabilityZoneListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailabilityZonesExecute", ctx)
	ret0, _ := ret[0].(*iaas.AvailabilityZoneListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailabilityZonesExecute indicates an expected call of ListAvailabilityZonesExecute.
func (mr *MockDefaultApiMockRecorder) ListAvailabilityZonesExecute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailabilityZonesExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListAvailabilityZonesExecute), ctx)
}

// ListBackups mocks base method.
func (m *MockDefaultApi) ListBackups(ctx context.Context, projectId string) iaas.ApiListBackupsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackups", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListBackupsRequest)
	return ret0
}

// ListBackups indicates an expected call of ListBackups.
func (mr *MockDefaultApiMockRecorder) ListBackups(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackups", reflect.TypeOf((*MockDefaultApi)(nil).ListBackups), ctx, projectId)
}

// ListBackupsExecute mocks base method.
func (m *MockDefaultApi) ListBackupsExecute(ctx context.Context, projectId string) (*iaas.BackupListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBackupsExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.BackupListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBackupsExecute indicates an expected call of ListBackupsExecute.
func (mr *MockDefaultApiMockRecorder) ListBackupsExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBackupsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListBackupsExecute), ctx, projectId)
}

// ListImages mocks base method.
func (m *MockDefaultApi) ListImages(ctx context.Context, projectId string) iaas.ApiListImagesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListImagesRequest)
	return ret0
}

// ListImages indicates an expected call of ListImages.
func (mr *MockDefaultApiMockRecorder) ListImages(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockDefaultApi)(nil).ListImages), ctx, projectId)
}

// ListImagesExecute mocks base method.
func (m *MockDefaultApi) ListImagesExecute(ctx context.Context, projectId string) (*iaas.ImageListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImagesExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.ImageListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImagesExecute indicates an expected call of ListImagesExecute.
func (mr *MockDefaultApiMockRecorder) ListImagesExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImagesExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListImagesExecute), ctx, projectId)
}

// ListKeyPairs mocks base method.
func (m *MockDefaultApi) ListKeyPairs(ctx context.Context) iaas.ApiListKeyPairsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyPairs", ctx)
	ret0, _ := ret[0].(iaas.ApiListKeyPairsRequest)
	return ret0
}

// ListKeyPairs indicates an expected call of ListKeyPairs.
func (mr *MockDefaultApiMockRecorder) ListKeyPairs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyPairs", reflect.TypeOf((*MockDefaultApi)(nil).ListKeyPairs), ctx)
}

// ListKeyPairsExecute mocks base method.
func (m *MockDefaultApi) ListKeyPairsExecute(ctx context.Context) (*iaas.KeyPairListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListKeyPairsExecute", ctx)
	ret0, _ := ret[0].(*iaas.KeyPairListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyPairsExecute indicates an expected call of ListKeyPairsExecute.
func (mr *MockDefaultApiMockRecorder) ListKeyPairsExecute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyPairsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListKeyPairsExecute), ctx)
}

// ListMachineTypes mocks base method.
func (m *MockDefaultApi) ListMachineTypes(ctx context.Context, projectId string) iaas.ApiListMachineTypesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMachineTypes", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListMachineTypesRequest)
	return ret0
}

// ListMachineTypes indicates an expected call of ListMachineTypes.
func (mr *MockDefaultApiMockRecorder) ListMachineTypes(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineTypes", reflect.TypeOf((*MockDefaultApi)(nil).ListMachineTypes), ctx, projectId)
}

// ListMachineTypesExecute mocks base method.
func (m *MockDefaultApi) ListMachineTypesExecute(ctx context.Context, projectId string) (*iaas.MachineTypeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMachineTypesExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.MachineTypeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMachineTypesExecute indicates an expected call of ListMachineTypesExecute.
func (mr *MockDefaultApiMockRecorder) ListMachineTypesExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMachineTypesExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListMachineTypesExecute), ctx, projectId)
}

// ListNetworkAreaProjects mocks base method.
func (m *MockDefaultApi) ListNetworkAreaProjects(ctx context.Context, organizationId, areaId string) iaas.ApiListNetworkAreaProjectsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkAreaProjects", ctx, organizationId, areaId)
	ret0, _ := ret[0].(iaas.ApiListNetworkAreaProjectsRequest)
	return ret0
}

// ListNetworkAreaProjects indicates an expected call of ListNetworkAreaProjects.
func (mr *MockDefaultApiMockRecorder) ListNetworkAreaProjects(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkAreaProjects", reflect.TypeOf((*MockDefaultApi)(nil).ListNetworkAreaProjects), ctx, organizationId, areaId)
}

// ListNetworkAreaProjectsExecute mocks base method.
func (m *MockDefaultApi) ListNetworkAreaProjectsExecute(ctx context.Context, organizationId, areaId string) (*iaas.ProjectListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkAreaProjectsExecute", ctx, organizationId, areaId)
	ret0, _ := ret[0].(*iaas.ProjectListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkAreaProjectsExecute indicates an expected call of ListNetworkAreaProjectsExecute.
func (mr *MockDefaultApiMockRecorder) ListNetworkAreaProjectsExecute(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkAreaProjectsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListNetworkAreaProjectsExecute), ctx, organizationId, areaId)
}

// ListNetworkAreaRanges mocks base method.
func (m *MockDefaultApi) ListNetworkAreaRanges(ctx context.Context, organizationId, areaId string) iaas.ApiListNetworkAreaRangesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkAreaRanges", ctx, organizationId, areaId)
	ret0, _ := ret[0].(iaas.ApiListNetworkAreaRangesRequest)
	return ret0
}

// ListNetworkAreaRanges indicates an expected call of ListNetworkAreaRanges.
func (mr *MockDefaultApiMockRecorder) ListNetworkAreaRanges(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkAreaRanges", reflect.TypeOf((*MockDefaultApi)(nil).ListNetworkAreaRanges), ctx, organizationId, areaId)
}

// ListNetworkAreaRangesExecute mocks base method.
func (m *MockDefaultApi) ListNetworkAreaRangesExecute(ctx context.Context, organizationId, areaId string) (*iaas.NetworkRangeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkAreaRangesExecute", ctx, organizationId, areaId)
	ret0, _ := ret[0].(*iaas.NetworkRangeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkAreaRangesExecute indicates an expected call of ListNetworkAreaRangesExecute.
func (mr *MockDefaultApiMockRecorder) ListNetworkAreaRangesExecute(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkAreaRangesExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListNetworkAreaRangesExecute), ctx, organizationId, areaId)
}

// ListNetworkAreaRoutes mocks base method.
func (m *MockDefaultApi) ListNetworkAreaRoutes(ctx context.Context, organizationId, areaId string) iaas.ApiListNetworkAreaRoutesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkAreaRoutes", ctx, organizationId, areaId)
	ret0, _ := ret[0].(iaas.ApiListNetworkAreaRoutesRequest)
	return ret0
}

// ListNetworkAreaRoutes indicates an expected call of ListNetworkAreaRoutes.
func (mr *MockDefaultApiMockRecorder) ListNetworkAreaRoutes(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkAreaRoutes", reflect.TypeOf((*MockDefaultApi)(nil).ListNetworkAreaRoutes), ctx, organizationId, areaId)
}

// ListNetworkAreaRoutesExecute mocks base method.
func (m *MockDefaultApi) ListNetworkAreaRoutesExecute(ctx context.Context, organizationId, areaId string) (*iaas.RouteListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkAreaRoutesExecute", ctx, organizationId, areaId)
	ret0, _ := ret[0].(*iaas.RouteListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkAreaRoutesExecute indicates an expected call of ListNetworkAreaRoutesExecute.
func (mr *MockDefaultApiMockRecorder) ListNetworkAreaRoutesExecute(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkAreaRoutesExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListNetworkAreaRoutesExecute), ctx, organizationId, areaId)
}

// ListNetworkAreas mocks base method.
func (m *MockDefaultApi) ListNetworkAreas(ctx context.Context, organizationId string) iaas.ApiListNetworkAreasRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkAreas", ctx, organizationId)
	ret0, _ := ret[0].(iaas.ApiListNetworkAreasRequest)
	return ret0
}

// ListNetworkAreas indicates an expected call of ListNetworkAreas.
func (mr *MockDefaultApiMockRecorder) ListNetworkAreas(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkAreas", reflect.TypeOf((*MockDefaultApi)(nil).ListNetworkAreas), ctx, organizationId)
}

// ListNetworkAreasExecute mocks base method.
func (m *MockDefaultApi) ListNetworkAreasExecute(ctx context.Context, organizationId string) (*iaas.NetworkAreaListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworkAreasExecute", ctx, organizationId)
	ret0, _ := ret[0].(*iaas.NetworkAreaListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworkAreasExecute indicates an expected call of ListNetworkAreasExecute.
func (mr *MockDefaultApiMockRecorder) ListNetworkAreasExecute(ctx, organizationId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworkAreasExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListNetworkAreasExecute), ctx, organizationId)
}

// ListNetworks mocks base method.
func (m *MockDefaultApi) ListNetworks(ctx context.Context, projectId string) iaas.ApiListNetworksRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworks", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListNetworksRequest)
	return ret0
}

// ListNetworks indicates an expected call of ListNetworks.
func (mr *MockDefaultApiMockRecorder) ListNetworks(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworks", reflect.TypeOf((*MockDefaultApi)(nil).ListNetworks), ctx, projectId)
}

// ListNetworksExecute mocks base method.
func (m *MockDefaultApi) ListNetworksExecute(ctx context.Context, projectId string) (*iaas.NetworkListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworksExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.NetworkListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworksExecute indicates an expected call of ListNetworksExecute.
func (mr *MockDefaultApiMockRecorder) ListNetworksExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworksExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListNetworksExecute), ctx, projectId)
}

// ListNics mocks base method.
func (m *MockDefaultApi) ListNics(ctx context.Context, projectId, networkId string) iaas.ApiListNicsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNics", ctx, projectId, networkId)
	ret0, _ := ret[0].(iaas.ApiListNicsRequest)
	return ret0
}

// ListNics indicates an expected call of ListNics.
func (mr *MockDefaultApiMockRecorder) ListNics(ctx, projectId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNics", reflect.TypeOf((*MockDefaultApi)(nil).ListNics), ctx, projectId, networkId)
}

// ListNicsExecute mocks base method.
func (m *MockDefaultApi) ListNicsExecute(ctx context.Context, projectId, networkId string) (*iaas.NICListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNicsExecute", ctx, projectId, networkId)
	ret0, _ := ret[0].(*iaas.NICListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNicsExecute indicates an expected call of ListNicsExecute.
func (mr *MockDefaultApiMockRecorder) ListNicsExecute(ctx, projectId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNicsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListNicsExecute), ctx, projectId, networkId)
}

// ListProjectNICs mocks base method.
func (m *MockDefaultApi) ListProjectNICs(ctx context.Context, projectId string) iaas.ApiListProjectNICsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectNICs", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListProjectNICsRequest)
	return ret0
}

// ListProjectNICs indicates an expected call of ListProjectNICs.
func (mr *MockDefaultApiMockRecorder) ListProjectNICs(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectNICs", reflect.TypeOf((*MockDefaultApi)(nil).ListProjectNICs), ctx, projectId)
}

// ListProjectNICsExecute mocks base method.
func (m *MockDefaultApi) ListProjectNICsExecute(ctx context.Context, projectId string) (*iaas.NICListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjectNICsExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.NICListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProjectNICsExecute indicates an expected call of ListProjectNICsExecute.
func (mr *MockDefaultApiMockRecorder) ListProjectNICsExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjectNICsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListProjectNICsExecute), ctx, projectId)
}

// ListPublicIPRanges mocks base method.
func (m *MockDefaultApi) ListPublicIPRanges(ctx context.Context) iaas.ApiListPublicIPRangesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicIPRanges", ctx)
	ret0, _ := ret[0].(iaas.ApiListPublicIPRangesRequest)
	return ret0
}

// ListPublicIPRanges indicates an expected call of ListPublicIPRanges.
func (mr *MockDefaultApiMockRecorder) ListPublicIPRanges(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicIPRanges", reflect.TypeOf((*MockDefaultApi)(nil).ListPublicIPRanges), ctx)
}

// ListPublicIPRangesExecute mocks base method.
func (m *MockDefaultApi) ListPublicIPRangesExecute(ctx context.Context) (*iaas.PublicNetworkListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicIPRangesExecute", ctx)
	ret0, _ := ret[0].(*iaas.PublicNetworkListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicIPRangesExecute indicates an expected call of ListPublicIPRangesExecute.
func (mr *MockDefaultApiMockRecorder) ListPublicIPRangesExecute(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicIPRangesExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListPublicIPRangesExecute), ctx)
}

// ListPublicIPs mocks base method.
func (m *MockDefaultApi) ListPublicIPs(ctx context.Context, projectId string) iaas.ApiListPublicIPsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicIPs", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListPublicIPsRequest)
	return ret0
}

// ListPublicIPs indicates an expected call of ListPublicIPs.
func (mr *MockDefaultApiMockRecorder) ListPublicIPs(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicIPs", reflect.TypeOf((*MockDefaultApi)(nil).ListPublicIPs), ctx, projectId)
}

// ListPublicIPsExecute mocks base method.
func (m *MockDefaultApi) ListPublicIPsExecute(ctx context.Context, projectId string) (*iaas.PublicIpListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPublicIPsExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.PublicIpListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPublicIPsExecute indicates an expected call of ListPublicIPsExecute.
func (mr *MockDefaultApiMockRecorder) ListPublicIPsExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPublicIPsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListPublicIPsExecute), ctx, projectId)
}

// ListQuotas mocks base method.
func (m *MockDefaultApi) ListQuotas(ctx context.Context, projectId string) iaas.ApiListQuotasRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuotas", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListQuotasRequest)
	return ret0
}

// ListQuotas indicates an expected call of ListQuotas.
func (mr *MockDefaultApiMockRecorder) ListQuotas(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuotas", reflect.TypeOf((*MockDefaultApi)(nil).ListQuotas), ctx, projectId)
}

// ListQuotasExecute mocks base method.
func (m *MockDefaultApi) ListQuotasExecute(ctx context.Context, projectId string) (*iaas.QuotaListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuotasExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.QuotaListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuotasExecute indicates an expected call of ListQuotasExecute.
func (mr *MockDefaultApiMockRecorder) ListQuotasExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuotasExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListQuotasExecute), ctx, projectId)
}

// ListSecurityGroupRules mocks base method.
func (m *MockDefaultApi) ListSecurityGroupRules(ctx context.Context, projectId, securityGroupId string) iaas.ApiListSecurityGroupRulesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroupRules", ctx, projectId, securityGroupId)
	ret0, _ := ret[0].(iaas.ApiListSecurityGroupRulesRequest)
	return ret0
}

// ListSecurityGroupRules indicates an expected call of ListSecurityGroupRules.
func (mr *MockDefaultApiMockRecorder) ListSecurityGroupRules(ctx, projectId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroupRules", reflect.TypeOf((*MockDefaultApi)(nil).ListSecurityGroupRules), ctx, projectId, securityGroupId)
}

// ListSecurityGroupRulesExecute mocks base method.
func (m *MockDefaultApi) ListSecurityGroupRulesExecute(ctx context.Context, projectId, securityGroupId string) (*iaas.SecurityGroupRuleListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroupRulesExecute", ctx, projectId, securityGroupId)
	ret0, _ := ret[0].(*iaas.SecurityGroupRuleListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroupRulesExecute indicates an expected call of ListSecurityGroupRulesExecute.
func (mr *MockDefaultApiMockRecorder) ListSecurityGroupRulesExecute(ctx, projectId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroupRulesExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListSecurityGroupRulesExecute), ctx, projectId, securityGroupId)
}

// ListSecurityGroups mocks base method.
func (m *MockDefaultApi) ListSecurityGroups(ctx context.Context, projectId string) iaas.ApiListSecurityGroupsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroups", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListSecurityGroupsRequest)
	return ret0
}

// ListSecurityGroups indicates an expected call of ListSecurityGroups.
func (mr *MockDefaultApiMockRecorder) ListSecurityGroups(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroups", reflect.TypeOf((*MockDefaultApi)(nil).ListSecurityGroups), ctx, projectId)
}

// ListSecurityGroupsExecute mocks base method.
func (m *MockDefaultApi) ListSecurityGroupsExecute(ctx context.Context, projectId string) (*iaas.SecurityGroupListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecurityGroupsExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.SecurityGroupListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecurityGroupsExecute indicates an expected call of ListSecurityGroupsExecute.
func (mr *MockDefaultApiMockRecorder) ListSecurityGroupsExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecurityGroupsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListSecurityGroupsExecute), ctx, projectId)
}

// ListServerNics mocks base method.
func (m *MockDefaultApi) ListServerNics(ctx context.Context, projectId, serverId string) iaas.ApiListServerNicsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServerNics", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiListServerNicsRequest)
	return ret0
}

// ListServerNics indicates an expected call of ListServerNics.
func (mr *MockDefaultApiMockRecorder) ListServerNics(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServerNics", reflect.TypeOf((*MockDefaultApi)(nil).ListServerNics), ctx, projectId, serverId)
}

// ListServerNicsExecute mocks base method.
func (m *MockDefaultApi) ListServerNicsExecute(ctx context.Context, projectId, serverId string) (*iaas.NICListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServerNicsExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(*iaas.NICListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServerNicsExecute indicates an expected call of ListServerNicsExecute.
func (mr *MockDefaultApiMockRecorder) ListServerNicsExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServerNicsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListServerNicsExecute), ctx, projectId, serverId)
}

// ListServerServiceAccounts mocks base method.
func (m *MockDefaultApi) ListServerServiceAccounts(ctx context.Context, projectId, serverId string) iaas.ApiListServerServiceAccountsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServerServiceAccounts", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiListServerServiceAccountsRequest)
	return ret0
}

// ListServerServiceAccounts indicates an expected call of ListServerServiceAccounts.
func (mr *MockDefaultApiMockRecorder) ListServerServiceAccounts(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServerServiceAccounts", reflect.TypeOf((*MockDefaultApi)(nil).ListServerServiceAccounts), ctx, projectId, serverId)
}

// ListServerServiceAccountsExecute mocks base method.
func (m *MockDefaultApi) ListServerServiceAccountsExecute(ctx context.Context, projectId, serverId string) (*iaas.ServiceAccountMailListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServerServiceAccountsExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(*iaas.ServiceAccountMailListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServerServiceAccountsExecute indicates an expected call of ListServerServiceAccountsExecute.
func (mr *MockDefaultApiMockRecorder) ListServerServiceAccountsExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServerServiceAccountsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListServerServiceAccountsExecute), ctx, projectId, serverId)
}

// ListServers mocks base method.
func (m *MockDefaultApi) ListServers(ctx context.Context, projectId string) iaas.ApiListServersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServers", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListServersRequest)
	return ret0
}

// ListServers indicates an expected call of ListServers.
func (mr *MockDefaultApiMockRecorder) ListServers(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServers", reflect.TypeOf((*MockDefaultApi)(nil).ListServers), ctx, projectId)
}

// ListServersExecute mocks base method.
func (m *MockDefaultApi) ListServersExecute(ctx context.Context, projectId string) (*iaas.ServerListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServersExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.ServerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServersExecute indicates an expected call of ListServersExecute.
func (mr *MockDefaultApiMockRecorder) ListServersExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServersExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListServersExecute), ctx, projectId)
}

// ListSnapshots mocks base method.
func (m *MockDefaultApi) ListSnapshots(ctx context.Context, projectId string) iaas.ApiListSnapshotsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshots", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListSnapshotsRequest)
	return ret0
}

// ListSnapshots indicates an expected call of ListSnapshots.
func (mr *MockDefaultApiMockRecorder) ListSnapshots(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshots", reflect.TypeOf((*MockDefaultApi)(nil).ListSnapshots), ctx, projectId)
}

// ListSnapshotsExecute mocks base method.
func (m *MockDefaultApi) ListSnapshotsExecute(ctx context.Context, projectId string) (*iaas.SnapshotListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSnapshotsExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.SnapshotListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSnapshotsExecute indicates an expected call of ListSnapshotsExecute.
func (mr *MockDefaultApiMockRecorder) ListSnapshotsExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSnapshotsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListSnapshotsExecute), ctx, projectId)
}

// ListVolumePerformanceClasses mocks base method.
func (m *MockDefaultApi) ListVolumePerformanceClasses(ctx context.Context, projectId string) iaas.ApiListVolumePerformanceClassesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumePerformanceClasses", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListVolumePerformanceClassesRequest)
	return ret0
}

// ListVolumePerformanceClasses indicates an expected call of ListVolumePerformanceClasses.
func (mr *MockDefaultApiMockRecorder) ListVolumePerformanceClasses(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumePerformanceClasses", reflect.TypeOf((*MockDefaultApi)(nil).ListVolumePerformanceClasses), ctx, projectId)
}

// ListVolumePerformanceClassesExecute mocks base method.
func (m *MockDefaultApi) ListVolumePerformanceClassesExecute(ctx context.Context, projectId string) (*iaas.VolumePerformanceClassListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumePerformanceClassesExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.VolumePerformanceClassListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumePerformanceClassesExecute indicates an expected call of ListVolumePerformanceClassesExecute.
func (mr *MockDefaultApiMockRecorder) ListVolumePerformanceClassesExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumePerformanceClassesExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListVolumePerformanceClassesExecute), ctx, projectId)
}

// ListVolumes mocks base method.
func (m *MockDefaultApi) ListVolumes(ctx context.Context, projectId string) iaas.ApiListVolumesRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", ctx, projectId)
	ret0, _ := ret[0].(iaas.ApiListVolumesRequest)
	return ret0
}

// ListVolumes indicates an expected call of ListVolumes.
func (mr *MockDefaultApiMockRecorder) ListVolumes(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockDefaultApi)(nil).ListVolumes), ctx, projectId)
}

// ListVolumesExecute mocks base method.
func (m *MockDefaultApi) ListVolumesExecute(ctx context.Context, projectId string) (*iaas.VolumeListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumesExecute", ctx, projectId)
	ret0, _ := ret[0].(*iaas.VolumeListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumesExecute indicates an expected call of ListVolumesExecute.
func (mr *MockDefaultApiMockRecorder) ListVolumesExecute(ctx, projectId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumesExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListVolumesExecute), ctx, projectId)
}

// PartialUpdateNetwork mocks base method.
func (m *MockDefaultApi) PartialUpdateNetwork(ctx context.Context, projectId, networkId string) iaas.ApiPartialUpdateNetworkRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialUpdateNetwork", ctx, projectId, networkId)
	ret0, _ := ret[0].(iaas.ApiPartialUpdateNetworkRequest)
	return ret0
}

// PartialUpdateNetwork indicates an expected call of PartialUpdateNetwork.
func (mr *MockDefaultApiMockRecorder) PartialUpdateNetwork(ctx, projectId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdateNetwork", reflect.TypeOf((*MockDefaultApi)(nil).PartialUpdateNetwork), ctx, projectId, networkId)
}

// PartialUpdateNetworkArea mocks base method.
func (m *MockDefaultApi) PartialUpdateNetworkArea(ctx context.Context, organizationId, areaId string) iaas.ApiPartialUpdateNetworkAreaRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialUpdateNetworkArea", ctx, organizationId, areaId)
	ret0, _ := ret[0].(iaas.ApiPartialUpdateNetworkAreaRequest)
	return ret0
}

// PartialUpdateNetworkArea indicates an expected call of PartialUpdateNetworkArea.
func (mr *MockDefaultApiMockRecorder) PartialUpdateNetworkArea(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdateNetworkArea", reflect.TypeOf((*MockDefaultApi)(nil).PartialUpdateNetworkArea), ctx, organizationId, areaId)
}

// PartialUpdateNetworkAreaExecute mocks base method.
func (m *MockDefaultApi) PartialUpdateNetworkAreaExecute(ctx context.Context, organizationId, areaId string) (*iaas.NetworkArea, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialUpdateNetworkAreaExecute", ctx, organizationId, areaId)
	ret0, _ := ret[0].(*iaas.NetworkArea)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartialUpdateNetworkAreaExecute indicates an expected call of PartialUpdateNetworkAreaExecute.
func (mr *MockDefaultApiMockRecorder) PartialUpdateNetworkAreaExecute(ctx, organizationId, areaId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdateNetworkAreaExecute", reflect.TypeOf((*MockDefaultApi)(nil).PartialUpdateNetworkAreaExecute), ctx, organizationId, areaId)
}

// PartialUpdateNetworkExecute mocks base method.
func (m *MockDefaultApi) PartialUpdateNetworkExecute(ctx context.Context, projectId, networkId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialUpdateNetworkExecute", ctx, projectId, networkId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PartialUpdateNetworkExecute indicates an expected call of PartialUpdateNetworkExecute.
func (mr *MockDefaultApiMockRecorder) PartialUpdateNetworkExecute(ctx, projectId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdateNetworkExecute", reflect.TypeOf((*MockDefaultApi)(nil).PartialUpdateNetworkExecute), ctx, projectId, networkId)
}

// RebootServer mocks base method.
func (m *MockDefaultApi) RebootServer(ctx context.Context, projectId, serverId string) iaas.ApiRebootServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootServer", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiRebootServerRequest)
	return ret0
}

// RebootServer indicates an expected call of RebootServer.
func (mr *MockDefaultApiMockRecorder) RebootServer(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootServer", reflect.TypeOf((*MockDefaultApi)(nil).RebootServer), ctx, projectId, serverId)
}

// RebootServerExecute mocks base method.
func (m *MockDefaultApi) RebootServerExecute(ctx context.Context, projectId, serverId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebootServerExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RebootServerExecute indicates an expected call of RebootServerExecute.
func (mr *MockDefaultApiMockRecorder) RebootServerExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebootServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).RebootServerExecute), ctx, projectId, serverId)
}

// RemoveNetworkFromServer mocks base method.
func (m *MockDefaultApi) RemoveNetworkFromServer(ctx context.Context, projectId, serverId, networkId string) iaas.ApiRemoveNetworkFromServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNetworkFromServer", ctx, projectId, serverId, networkId)
	ret0, _ := ret[0].(iaas.ApiRemoveNetworkFromServerRequest)
	return ret0
}

// RemoveNetworkFromServer indicates an expected call of RemoveNetworkFromServer.
func (mr *MockDefaultApiMockRecorder) RemoveNetworkFromServer(ctx, projectId, serverId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNetworkFromServer", reflect.TypeOf((*MockDefaultApi)(nil).RemoveNetworkFromServer), ctx, projectId, serverId, networkId)
}

// RemoveNetworkFromServerExecute mocks base method.
func (m *MockDefaultApi) RemoveNetworkFromServerExecute(ctx context.Context, projectId, serverId, networkId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNetworkFromServerExecute", ctx, projectId, serverId, networkId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNetworkFromServerExecute indicates an expected call of RemoveNetworkFromServerExecute.
func (mr *MockDefaultApiMockRecorder) RemoveNetworkFromServerExecute(ctx, projectId, serverId, networkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNetworkFromServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).RemoveNetworkFromServerExecute), ctx, projectId, serverId, networkId)
}

// RemoveNicFromServer mocks base method.
func (m *MockDefaultApi) RemoveNicFromServer(ctx context.Context, projectId, serverId, nicId string) iaas.ApiRemoveNicFromServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNicFromServer", ctx, projectId, serverId, nicId)
	ret0, _ := ret[0].(iaas.ApiRemoveNicFromServerRequest)
	return ret0
}

// RemoveNicFromServer indicates an expected call of RemoveNicFromServer.
func (mr *MockDefaultApiMockRecorder) RemoveNicFromServer(ctx, projectId, serverId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNicFromServer", reflect.TypeOf((*MockDefaultApi)(nil).RemoveNicFromServer), ctx, projectId, serverId, nicId)
}

// RemoveNicFromServerExecute mocks base method.
func (m *MockDefaultApi) RemoveNicFromServerExecute(ctx context.Context, projectId, serverId, nicId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveNicFromServerExecute", ctx, projectId, serverId, nicId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveNicFromServerExecute indicates an expected call of RemoveNicFromServerExecute.
func (mr *MockDefaultApiMockRecorder) RemoveNicFromServerExecute(ctx, projectId, serverId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveNicFromServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).RemoveNicFromServerExecute), ctx, projectId, serverId, nicId)
}

// RemovePublicIpFromServer mocks base method.
func (m *MockDefaultApi) RemovePublicIpFromServer(ctx context.Context, projectId, serverId, publicIpId string) iaas.ApiRemovePublicIpFromServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePublicIpFromServer", ctx, projectId, serverId, publicIpId)
	ret0, _ := ret[0].(iaas.ApiRemovePublicIpFromServerRequest)
	return ret0
}

// RemovePublicIpFromServer indicates an expected call of RemovePublicIpFromServer.
func (mr *MockDefaultApiMockRecorder) RemovePublicIpFromServer(ctx, projectId, serverId, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePublicIpFromServer", reflect.TypeOf((*MockDefaultApi)(nil).RemovePublicIpFromServer), ctx, projectId, serverId, publicIpId)
}

// RemovePublicIpFromServerExecute mocks base method.
func (m *MockDefaultApi) RemovePublicIpFromServerExecute(ctx context.Context, projectId, serverId, publicIpId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePublicIpFromServerExecute", ctx, projectId, serverId, publicIpId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePublicIpFromServerExecute indicates an expected call of RemovePublicIpFromServerExecute.
func (mr *MockDefaultApiMockRecorder) RemovePublicIpFromServerExecute(ctx, projectId, serverId, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePublicIpFromServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).RemovePublicIpFromServerExecute), ctx, projectId, serverId, publicIpId)
}

// RemoveSecurityGroupFromServer mocks base method.
func (m *MockDefaultApi) RemoveSecurityGroupFromServer(ctx context.Context, projectId, serverId, securityGroupId string) iaas.ApiRemoveSecurityGroupFromServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSecurityGroupFromServer", ctx, projectId, serverId, securityGroupId)
	ret0, _ := ret[0].(iaas.ApiRemoveSecurityGroupFromServerRequest)
	return ret0
}

// RemoveSecurityGroupFromServer indicates an expected call of RemoveSecurityGroupFromServer.
func (mr *MockDefaultApiMockRecorder) RemoveSecurityGroupFromServer(ctx, projectId, serverId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecurityGroupFromServer", reflect.TypeOf((*MockDefaultApi)(nil).RemoveSecurityGroupFromServer), ctx, projectId, serverId, securityGroupId)
}

// RemoveSecurityGroupFromServerExecute mocks base method.
func (m *MockDefaultApi) RemoveSecurityGroupFromServerExecute(ctx context.Context, projectId, serverId, securityGroupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSecurityGroupFromServerExecute", ctx, projectId, serverId, securityGroupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSecurityGroupFromServerExecute indicates an expected call of RemoveSecurityGroupFromServerExecute.
func (mr *MockDefaultApiMockRecorder) RemoveSecurityGroupFromServerExecute(ctx, projectId, serverId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecurityGroupFromServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).RemoveSecurityGroupFromServerExecute), ctx, projectId, serverId, securityGroupId)
}

// RemoveServiceAccountFromServer mocks base method.
func (m *MockDefaultApi) RemoveServiceAccountFromServer(ctx context.Context, projectId, serverId, serviceAccountMail string) iaas.ApiRemoveServiceAccountFromServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServiceAccountFromServer", ctx, projectId, serverId, serviceAccountMail)
	ret0, _ := ret[0].(iaas.ApiRemoveServiceAccountFromServerRequest)
	return ret0
}

// RemoveServiceAccountFromServer indicates an expected call of RemoveServiceAccountFromServer.
func (mr *MockDefaultApiMockRecorder) RemoveServiceAccountFromServer(ctx, projectId, serverId, serviceAccountMail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceAccountFromServer", reflect.TypeOf((*MockDefaultApi)(nil).RemoveServiceAccountFromServer), ctx, projectId, serverId, serviceAccountMail)
}

// RemoveServiceAccountFromServerExecute mocks base method.
func (m *MockDefaultApi) RemoveServiceAccountFromServerExecute(ctx context.Context, projectId, serverId, serviceAccountMail string) (*iaas.ServiceAccountMailListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveServiceAccountFromServerExecute", ctx, projectId, serverId, serviceAccountMail)
	ret0, _ := ret[0].(*iaas.ServiceAccountMailListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveServiceAccountFromServerExecute indicates an expected call of RemoveServiceAccountFromServerExecute.
func (mr *MockDefaultApiMockRecorder) RemoveServiceAccountFromServerExecute(ctx, projectId, serverId, serviceAccountMail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveServiceAccountFromServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).RemoveServiceAccountFromServerExecute), ctx, projectId, serverId, serviceAccountMail)
}

// RemoveVolumeFromServer mocks base method.
func (m *MockDefaultApi) RemoveVolumeFromServer(ctx context.Context, projectId, serverId, volumeId string) iaas.ApiRemoveVolumeFromServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolumeFromServer", ctx, projectId, serverId, volumeId)
	ret0, _ := ret[0].(iaas.ApiRemoveVolumeFromServerRequest)
	return ret0
}

// RemoveVolumeFromServer indicates an expected call of RemoveVolumeFromServer.
func (mr *MockDefaultApiMockRecorder) RemoveVolumeFromServer(ctx, projectId, serverId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolumeFromServer", reflect.TypeOf((*MockDefaultApi)(nil).RemoveVolumeFromServer), ctx, projectId, serverId, volumeId)
}

// RemoveVolumeFromServerExecute mocks base method.
func (m *MockDefaultApi) RemoveVolumeFromServerExecute(ctx context.Context, projectId, serverId, volumeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolumeFromServerExecute", ctx, projectId, serverId, volumeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolumeFromServerExecute indicates an expected call of RemoveVolumeFromServerExecute.
func (mr *MockDefaultApiMockRecorder) RemoveVolumeFromServerExecute(ctx, projectId, serverId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolumeFromServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).RemoveVolumeFromServerExecute), ctx, projectId, serverId, volumeId)
}

// RescueServer mocks base method.
func (m *MockDefaultApi) RescueServer(ctx context.Context, projectId, serverId string) iaas.ApiRescueServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescueServer", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiRescueServerRequest)
	return ret0
}

// RescueServer indicates an expected call of RescueServer.
func (mr *MockDefaultApiMockRecorder) RescueServer(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescueServer", reflect.TypeOf((*MockDefaultApi)(nil).RescueServer), ctx, projectId, serverId)
}

// RescueServerExecute mocks base method.
func (m *MockDefaultApi) RescueServerExecute(ctx context.Context, projectId, serverId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescueServerExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RescueServerExecute indicates an expected call of RescueServerExecute.
func (mr *MockDefaultApiMockRecorder) RescueServerExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescueServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).RescueServerExecute), ctx, projectId, serverId)
}

// ResizeServer mocks base method.
func (m *MockDefaultApi) ResizeServer(ctx context.Context, projectId, serverId string) iaas.ApiResizeServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeServer", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiResizeServerRequest)
	return ret0
}

// ResizeServer indicates an expected call of ResizeServer.
func (mr *MockDefaultApiMockRecorder) ResizeServer(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeServer", reflect.TypeOf((*MockDefaultApi)(nil).ResizeServer), ctx, projectId, serverId)
}

// ResizeServerExecute mocks base method.
func (m *MockDefaultApi) ResizeServerExecute(ctx context.Context, projectId, serverId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeServerExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeServerExecute indicates an expected call of ResizeServerExecute.
func (mr *MockDefaultApiMockRecorder) ResizeServerExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).ResizeServerExecute), ctx, projectId, serverId)
}

// ResizeVolume mocks base method.
func (m *MockDefaultApi) ResizeVolume(ctx context.Context, projectId, volumeId string) iaas.ApiResizeVolumeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeVolume", ctx, projectId, volumeId)
	ret0, _ := ret[0].(iaas.ApiResizeVolumeRequest)
	return ret0
}

// ResizeVolume indicates an expected call of ResizeVolume.
func (mr *MockDefaultApiMockRecorder) ResizeVolume(ctx, projectId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeVolume", reflect.TypeOf((*MockDefaultApi)(nil).ResizeVolume), ctx, projectId, volumeId)
}

// ResizeVolumeExecute mocks base method.
func (m *MockDefaultApi) ResizeVolumeExecute(ctx context.Context, projectId, volumeId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeVolumeExecute", ctx, projectId, volumeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResizeVolumeExecute indicates an expected call of ResizeVolumeExecute.
func (mr *MockDefaultApiMockRecorder) ResizeVolumeExecute(ctx, projectId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeVolumeExecute", reflect.TypeOf((*MockDefaultApi)(nil).ResizeVolumeExecute), ctx, projectId, volumeId)
}

// RestoreBackup mocks base method.
func (m *MockDefaultApi) RestoreBackup(ctx context.Context, projectId, backupId string) iaas.ApiRestoreBackupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreBackup", ctx, projectId, backupId)
	ret0, _ := ret[0].(iaas.ApiRestoreBackupRequest)
	return ret0
}

// RestoreBackup indicates an expected call of RestoreBackup.
func (mr *MockDefaultApiMockRecorder) RestoreBackup(ctx, projectId, backupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreBackup", reflect.TypeOf((*MockDefaultApi)(nil).RestoreBackup), ctx, projectId, backupId)
}

// RestoreBackupExecute mocks base method.
func (m *MockDefaultApi) RestoreBackupExecute(ctx context.Context, projectId, backupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreBackupExecute", ctx, projectId, backupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreBackupExecute indicates an expected call of RestoreBackupExecute.
func (mr *MockDefaultApiMockRecorder) RestoreBackupExecute(ctx, projectId, backupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreBackupExecute", reflect.TypeOf((*MockDefaultApi)(nil).RestoreBackupExecute), ctx, projectId, backupId)
}

// SetImageShare mocks base method.
func (m *MockDefaultApi) SetImageShare(ctx context.Context, projectId, imageId string) iaas.ApiSetImageShareRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetImageShare", ctx, projectId, imageId)
	ret0, _ := ret[0].(iaas.ApiSetImageShareRequest)
	return ret0
}

// SetImageShare indicates an expected call of SetImageShare.
func (mr *MockDefaultApiMockRecorder) SetImageShare(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImageShare", reflect.TypeOf((*MockDefaultApi)(nil).SetImageShare), ctx, projectId, imageId)
}

// SetImageShareExecute mocks base method.
func (m *MockDefaultApi) SetImageShareExecute(ctx context.Context, projectId, imageId string) (*iaas.ImageShare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetImageShareExecute", ctx, projectId, imageId)
	ret0, _ := ret[0].(*iaas.ImageShare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetImageShareExecute indicates an expected call of SetImageShareExecute.
func (mr *MockDefaultApiMockRecorder) SetImageShareExecute(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetImageShareExecute", reflect.TypeOf((*MockDefaultApi)(nil).SetImageShareExecute), ctx, projectId, imageId)
}

// StartServer mocks base method.
func (m *MockDefaultApi) StartServer(ctx context.Context, projectId, serverId string) iaas.ApiStartServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServer", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiStartServerRequest)
	return ret0
}

// StartServer indicates an expected call of StartServer.
func (mr *MockDefaultApiMockRecorder) StartServer(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServer", reflect.TypeOf((*MockDefaultApi)(nil).StartServer), ctx, projectId, serverId)
}

// StartServerExecute mocks base method.
func (m *MockDefaultApi) StartServerExecute(ctx context.Context, projectId, serverId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServerExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartServerExecute indicates an expected call of StartServerExecute.
func (mr *MockDefaultApiMockRecorder) StartServerExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).StartServerExecute), ctx, projectId, serverId)
}

// StopServer mocks base method.
func (m *MockDefaultApi) StopServer(ctx context.Context, projectId, serverId string) iaas.ApiStopServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopServer", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiStopServerRequest)
	return ret0
}

// StopServer indicates an expected call of StopServer.
func (mr *MockDefaultApiMockRecorder) StopServer(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServer", reflect.TypeOf((*MockDefaultApi)(nil).StopServer), ctx, projectId, serverId)
}

// StopServerExecute mocks base method.
func (m *MockDefaultApi) StopServerExecute(ctx context.Context, projectId, serverId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopServerExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopServerExecute indicates an expected call of StopServerExecute.
func (mr *MockDefaultApiMockRecorder) StopServerExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).StopServerExecute), ctx, projectId, serverId)
}

// UnrescueServer mocks base method.
func (m *MockDefaultApi) UnrescueServer(ctx context.Context, projectId, serverId string) iaas.ApiUnrescueServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnrescueServer", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiUnrescueServerRequest)
	return ret0
}

// UnrescueServer indicates an expected call of UnrescueServer.
func (mr *MockDefaultApiMockRecorder) UnrescueServer(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnrescueServer", reflect.TypeOf((*MockDefaultApi)(nil).UnrescueServer), ctx, projectId, serverId)
}

// UnrescueServerExecute mocks base method.
func (m *MockDefaultApi) UnrescueServerExecute(ctx context.Context, projectId, serverId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnrescueServerExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnrescueServerExecute indicates an expected call of UnrescueServerExecute.
func (mr *MockDefaultApiMockRecorder) UnrescueServerExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnrescueServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).UnrescueServerExecute), ctx, projectId, serverId)
}

// UpdateAttachedVolume mocks base method.
func (m *MockDefaultApi) UpdateAttachedVolume(ctx context.Context, projectId, serverId, volumeId string) iaas.ApiUpdateAttachedVolumeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttachedVolume", ctx, projectId, serverId, volumeId)
	ret0, _ := ret[0].(iaas.ApiUpdateAttachedVolumeRequest)
	return ret0
}

// UpdateAttachedVolume indicates an expected call of UpdateAttachedVolume.
func (mr *MockDefaultApiMockRecorder) UpdateAttachedVolume(ctx, projectId, serverId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttachedVolume", reflect.TypeOf((*MockDefaultApi)(nil).UpdateAttachedVolume), ctx, projectId, serverId, volumeId)
}

// UpdateAttachedVolumeExecute mocks base method.
func (m *MockDefaultApi) UpdateAttachedVolumeExecute(ctx context.Context, projectId, serverId, volumeId string) (*iaas.VolumeAttachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttachedVolumeExecute", ctx, projectId, serverId, volumeId)
	ret0, _ := ret[0].(*iaas.VolumeAttachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttachedVolumeExecute indicates an expected call of UpdateAttachedVolumeExecute.
func (mr *MockDefaultApiMockRecorder) UpdateAttachedVolumeExecute(ctx, projectId, serverId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttachedVolumeExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateAttachedVolumeExecute), ctx, projectId, serverId, volumeId)
}

// UpdateBackup mocks base method.
func (m *MockDefaultApi) UpdateBackup(ctx context.Context, projectId, backupId string) iaas.ApiUpdateBackupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackup", ctx, projectId, backupId)
	ret0, _ := ret[0].(iaas.ApiUpdateBackupRequest)
	return ret0
}

// UpdateBackup indicates an expected call of UpdateBackup.
func (mr *MockDefaultApiMockRecorder) UpdateBackup(ctx, projectId, backupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackup", reflect.TypeOf((*MockDefaultApi)(nil).UpdateBackup), ctx, projectId, backupId)
}

// UpdateBackupExecute mocks base method.
func (m *MockDefaultApi) UpdateBackupExecute(ctx context.Context, projectId, backupId string) (*iaas.Backup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBackupExecute", ctx, projectId, backupId)
	ret0, _ := ret[0].(*iaas.Backup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBackupExecute indicates an expected call of UpdateBackupExecute.
func (mr *MockDefaultApiMockRecorder) UpdateBackupExecute(ctx, projectId, backupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBackupExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateBackupExecute), ctx, projectId, backupId)
}

// UpdateImage mocks base method.
func (m *MockDefaultApi) UpdateImage(ctx context.Context, projectId, imageId string) iaas.ApiUpdateImageRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", ctx, projectId, imageId)
	ret0, _ := ret[0].(iaas.ApiUpdateImageRequest)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockDefaultApiMockRecorder) UpdateImage(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockDefaultApi)(nil).UpdateImage), ctx, projectId, imageId)
}

// UpdateImageExecute mocks base method.
func (m *MockDefaultApi) UpdateImageExecute(ctx context.Context, projectId, imageId string) (*iaas.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageExecute", ctx, projectId, imageId)
	ret0, _ := ret[0].(*iaas.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImageExecute indicates an expected call of UpdateImageExecute.
func (mr *MockDefaultApiMockRecorder) UpdateImageExecute(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateImageExecute), ctx, projectId, imageId)
}

// UpdateImageScopeLocal mocks base method.
func (m *MockDefaultApi) UpdateImageScopeLocal(ctx context.Context, projectId, imageId string) iaas.ApiUpdateImageScopeLocalRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageScopeLocal", ctx, projectId, imageId)
	ret0, _ := ret[0].(iaas.ApiUpdateImageScopeLocalRequest)
	return ret0
}

// UpdateImageScopeLocal indicates an expected call of UpdateImageScopeLocal.
func (mr *MockDefaultApiMockRecorder) UpdateImageScopeLocal(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageScopeLocal", reflect.TypeOf((*MockDefaultApi)(nil).UpdateImageScopeLocal), ctx, projectId, imageId)
}

// UpdateImageScopeLocalExecute mocks base method.
func (m *MockDefaultApi) UpdateImageScopeLocalExecute(ctx context.Context, projectId, imageId string) (*iaas.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageScopeLocalExecute", ctx, projectId, imageId)
	ret0, _ := ret[0].(*iaas.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImageScopeLocalExecute indicates an expected call of UpdateImageScopeLocalExecute.
func (mr *MockDefaultApiMockRecorder) UpdateImageScopeLocalExecute(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageScopeLocalExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateImageScopeLocalExecute), ctx, projectId, imageId)
}

// UpdateImageScopePublic mocks base method.
func (m *MockDefaultApi) UpdateImageScopePublic(ctx context.Context, projectId, imageId string) iaas.ApiUpdateImageScopePublicRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageScopePublic", ctx, projectId, imageId)
	ret0, _ := ret[0].(iaas.ApiUpdateImageScopePublicRequest)
	return ret0
}

// UpdateImageScopePublic indicates an expected call of UpdateImageScopePublic.
func (mr *MockDefaultApiMockRecorder) UpdateImageScopePublic(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageScopePublic", reflect.TypeOf((*MockDefaultApi)(nil).UpdateImageScopePublic), ctx, projectId, imageId)
}

// UpdateImageScopePublicExecute mocks base method.
func (m *MockDefaultApi) UpdateImageScopePublicExecute(ctx context.Context, projectId, imageId string) (*iaas.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageScopePublicExecute", ctx, projectId, imageId)
	ret0, _ := ret[0].(*iaas.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImageScopePublicExecute indicates an expected call of UpdateImageScopePublicExecute.
func (mr *MockDefaultApiMockRecorder) UpdateImageScopePublicExecute(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageScopePublicExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateImageScopePublicExecute), ctx, projectId, imageId)
}

// UpdateImageShare mocks base method.
func (m *MockDefaultApi) UpdateImageShare(ctx context.Context, projectId, imageId string) iaas.ApiUpdateImageShareRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageShare", ctx, projectId, imageId)
	ret0, _ := ret[0].(iaas.ApiUpdateImageShareRequest)
	return ret0
}

// UpdateImageShare indicates an expected call of UpdateImageShare.
func (mr *MockDefaultApiMockRecorder) UpdateImageShare(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageShare", reflect.TypeOf((*MockDefaultApi)(nil).UpdateImageShare), ctx, projectId, imageId)
}

// UpdateImageShareExecute mocks base method.
func (m *MockDefaultApi) UpdateImageShareExecute(ctx context.Context, projectId, imageId string) (*iaas.ImageShare, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageShareExecute", ctx, projectId, imageId)
	ret0, _ := ret[0].(*iaas.ImageShare)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateImageShareExecute indicates an expected call of UpdateImageShareExecute.
func (mr *MockDefaultApiMockRecorder) UpdateImageShareExecute(ctx, projectId, imageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageShareExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateImageShareExecute), ctx, projectId, imageId)
}

// UpdateKeyPair mocks base method.
func (m *MockDefaultApi) UpdateKeyPair(ctx context.Context, keypairName string) iaas.ApiUpdateKeyPairRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyPair", ctx, keypairName)
	ret0, _ := ret[0].(iaas.ApiUpdateKeyPairRequest)
	return ret0
}

// UpdateKeyPair indicates an expected call of UpdateKeyPair.
func (mr *MockDefaultApiMockRecorder) UpdateKeyPair(ctx, keypairName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyPair", reflect.TypeOf((*MockDefaultApi)(nil).UpdateKeyPair), ctx, keypairName)
}

// UpdateKeyPairExecute mocks base method.
func (m *MockDefaultApi) UpdateKeyPairExecute(ctx context.Context, keypairName string) (*iaas.Keypair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateKeyPairExecute", ctx, keypairName)
	ret0, _ := ret[0].(*iaas.Keypair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateKeyPairExecute indicates an expected call of UpdateKeyPairExecute.
func (mr *MockDefaultApiMockRecorder) UpdateKeyPairExecute(ctx, keypairName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateKeyPairExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateKeyPairExecute), ctx, keypairName)
}

// UpdateNetworkAreaRoute mocks base method.
func (m *MockDefaultApi) UpdateNetworkAreaRoute(ctx context.Context, organizationId, areaId, routeId string) iaas.ApiUpdateNetworkAreaRouteRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkAreaRoute", ctx, organizationId, areaId, routeId)
	ret0, _ := ret[0].(iaas.ApiUpdateNetworkAreaRouteRequest)
	return ret0
}

// UpdateNetworkAreaRoute indicates an expected call of UpdateNetworkAreaRoute.
func (mr *MockDefaultApiMockRecorder) UpdateNetworkAreaRoute(ctx, organizationId, areaId, routeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkAreaRoute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateNetworkAreaRoute), ctx, organizationId, areaId, routeId)
}

// UpdateNetworkAreaRouteExecute mocks base method.
func (m *MockDefaultApi) UpdateNetworkAreaRouteExecute(ctx context.Context, organizationId, areaId, routeId string) (*iaas.Route, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkAreaRouteExecute", ctx, organizationId, areaId, routeId)
	ret0, _ := ret[0].(*iaas.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNetworkAreaRouteExecute indicates an expected call of UpdateNetworkAreaRouteExecute.
func (mr *MockDefaultApiMockRecorder) UpdateNetworkAreaRouteExecute(ctx, organizationId, areaId, routeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkAreaRouteExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateNetworkAreaRouteExecute), ctx, organizationId, areaId, routeId)
}

// UpdateNic mocks base method.
func (m *MockDefaultApi) UpdateNic(ctx context.Context, projectId, networkId, nicId string) iaas.ApiUpdateNicRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNic", ctx, projectId, networkId, nicId)
	ret0, _ := ret[0].(iaas.ApiUpdateNicRequest)
	return ret0
}

// UpdateNic indicates an expected call of UpdateNic.
func (mr *MockDefaultApiMockRecorder) UpdateNic(ctx, projectId, networkId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNic", reflect.TypeOf((*MockDefaultApi)(nil).UpdateNic), ctx, projectId, networkId, nicId)
}

// UpdateNicExecute mocks base method.
func (m *MockDefaultApi) UpdateNicExecute(ctx context.Context, projectId, networkId, nicId string) (*iaas.NIC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNicExecute", ctx, projectId, networkId, nicId)
	ret0, _ := ret[0].(*iaas.NIC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNicExecute indicates an expected call of UpdateNicExecute.
func (mr *MockDefaultApiMockRecorder) UpdateNicExecute(ctx, projectId, networkId, nicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNicExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateNicExecute), ctx, projectId, networkId, nicId)
}

// UpdatePublicIP mocks base method.
func (m *MockDefaultApi) UpdatePublicIP(ctx context.Context, projectId, publicIpId string) iaas.ApiUpdatePublicIPRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicIP", ctx, projectId, publicIpId)
	ret0, _ := ret[0].(iaas.ApiUpdatePublicIPRequest)
	return ret0
}

// UpdatePublicIP indicates an expected call of UpdatePublicIP.
func (mr *MockDefaultApiMockRecorder) UpdatePublicIP(ctx, projectId, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicIP", reflect.TypeOf((*MockDefaultApi)(nil).UpdatePublicIP), ctx, projectId, publicIpId)
}

// UpdatePublicIPExecute mocks base method.
func (m *MockDefaultApi) UpdatePublicIPExecute(ctx context.Context, projectId, publicIpId string) (*iaas.PublicIp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePublicIPExecute", ctx, projectId, publicIpId)
	ret0, _ := ret[0].(*iaas.PublicIp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePublicIPExecute indicates an expected call of UpdatePublicIPExecute.
func (mr *MockDefaultApiMockRecorder) UpdatePublicIPExecute(ctx, projectId, publicIpId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePublicIPExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdatePublicIPExecute), ctx, projectId, publicIpId)
}

// UpdateSecurityGroup mocks base method.
func (m *MockDefaultApi) UpdateSecurityGroup(ctx context.Context, projectId, securityGroupId string) iaas.ApiUpdateSecurityGroupRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityGroup", ctx, projectId, securityGroupId)
	ret0, _ := ret[0].(iaas.ApiUpdateSecurityGroupRequest)
	return ret0
}

// UpdateSecurityGroup indicates an expected call of UpdateSecurityGroup.
func (mr *MockDefaultApiMockRecorder) UpdateSecurityGroup(ctx, projectId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityGroup", reflect.TypeOf((*MockDefaultApi)(nil).UpdateSecurityGroup), ctx, projectId, securityGroupId)
}

// UpdateSecurityGroupExecute mocks base method.
func (m *MockDefaultApi) UpdateSecurityGroupExecute(ctx context.Context, projectId, securityGroupId string) (*iaas.SecurityGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecurityGroupExecute", ctx, projectId, securityGroupId)
	ret0, _ := ret[0].(*iaas.SecurityGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecurityGroupExecute indicates an expected call of UpdateSecurityGroupExecute.
func (mr *MockDefaultApiMockRecorder) UpdateSecurityGroupExecute(ctx, projectId, securityGroupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecurityGroupExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateSecurityGroupExecute), ctx, projectId, securityGroupId)
}

// UpdateServer mocks base method.
func (m *MockDefaultApi) UpdateServer(ctx context.Context, projectId, serverId string) iaas.ApiUpdateServerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", ctx, projectId, serverId)
	ret0, _ := ret[0].(iaas.ApiUpdateServerRequest)
	return ret0
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockDefaultApiMockRecorder) UpdateServer(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockDefaultApi)(nil).UpdateServer), ctx, projectId, serverId)
}

// UpdateServerExecute mocks base method.
func (m *MockDefaultApi) UpdateServerExecute(ctx context.Context, projectId, serverId string) (*iaas.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServerExecute", ctx, projectId, serverId)
	ret0, _ := ret[0].(*iaas.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateServerExecute indicates an expected call of UpdateServerExecute.
func (mr *MockDefaultApiMockRecorder) UpdateServerExecute(ctx, projectId, serverId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServerExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateServerExecute), ctx, projectId, serverId)
}

// UpdateSnapshot mocks base method.
func (m *MockDefaultApi) UpdateSnapshot(ctx context.Context, projectId, snapshotId string) iaas.ApiUpdateSnapshotRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshot", ctx, projectId, snapshotId)
	ret0, _ := ret[0].(iaas.ApiUpdateSnapshotRequest)
	return ret0
}

// UpdateSnapshot indicates an expected call of UpdateSnapshot.
func (mr *MockDefaultApiMockRecorder) UpdateSnapshot(ctx, projectId, snapshotId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshot", reflect.TypeOf((*MockDefaultApi)(nil).UpdateSnapshot), ctx, projectId, snapshotId)
}

// UpdateSnapshotExecute mocks base method.
func (m *MockDefaultApi) UpdateSnapshotExecute(ctx context.Context, projectId, snapshotId string) (*iaas.Snapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSnapshotExecute", ctx, projectId, snapshotId)
	ret0, _ := ret[0].(*iaas.Snapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSnapshotExecute indicates an expected call of UpdateSnapshotExecute.
func (mr *MockDefaultApiMockRecorder) UpdateSnapshotExecute(ctx, projectId, snapshotId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSnapshotExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateSnapshotExecute), ctx, projectId, snapshotId)
}

// UpdateVolume mocks base method.
func (m *MockDefaultApi) UpdateVolume(ctx context.Context, projectId, volumeId string) iaas.ApiUpdateVolumeRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolume", ctx, projectId, volumeId)
	ret0, _ := ret[0].(iaas.ApiUpdateVolumeRequest)
	return ret0
}

// UpdateVolume indicates an expected call of UpdateVolume.
func (mr *MockDefaultApiMockRecorder) UpdateVolume(ctx, projectId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolume", reflect.TypeOf((*MockDefaultApi)(nil).UpdateVolume), ctx, projectId, volumeId)
}

// UpdateVolumeExecute mocks base method.
func (m *MockDefaultApi) UpdateVolumeExecute(ctx context.Context, projectId, volumeId string) (*iaas.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeExecute", ctx, projectId, volumeId)
	ret0, _ := ret[0].(*iaas.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolumeExecute indicates an expected call of UpdateVolumeExecute.
func (mr *MockDefaultApiMockRecorder) UpdateVolumeExecute(ctx, projectId, volumeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateVolumeExecute), ctx, projectId, volumeId)
}
