// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stackitcloud/stackit-sdk-go/services/loadbalancer (interfaces: ApiCreateCredentialsRequest,ApiCreateLoadBalancerRequest,ApiDeleteCredentialsRequest,ApiDeleteLoadBalancerRequest,ApiGetCredentialsRequest,ApiGetLoadBalancerRequest,ApiGetQuotaRequest,ApiListCredentialsRequest,ApiListLoadBalancersRequest,ApiListPlansRequest,ApiUpdateCredentialsRequest,ApiUpdateLoadBalancerRequest,ApiUpdateTargetPoolRequest,DefaultApi)
//
// Generated by this command:
//
//	mockgen -destination ./pkg/mock/loadbalancer/loadbalancer.go -package loadbalancer github.com/stackitcloud/stackit-sdk-go/services/loadbalancer ApiCreateCredentialsRequest,ApiCreateLoadBalancerRequest,ApiDeleteCredentialsRequest,ApiDeleteLoadBalancerRequest,ApiGetCredentialsRequest,ApiGetLoadBalancerRequest,ApiGetQuotaRequest,ApiListCredentialsRequest,ApiListLoadBalancersRequest,ApiListPlansRequest,ApiUpdateCredentialsRequest,ApiUpdateLoadBalancerRequest,ApiUpdateTargetPoolRequest,DefaultApi
//

// Package loadbalancer is a generated GoMock package.
package loadbalancer

import (
	context "context"
	reflect "reflect"

	loadbalancer "github.com/stackitcloud/stackit-sdk-go/services/loadbalancer"
	gomock "go.uber.org/mock/gomock"
)

// MockApiCreateCredentialsRequest is a mock of ApiCreateCredentialsRequest interface.
type MockApiCreateCredentialsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateCredentialsRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateCredentialsRequestMockRecorder is the mock recorder for MockApiCreateCredentialsRequest.
type MockApiCreateCredentialsRequestMockRecorder struct {
	mock *MockApiCreateCredentialsRequest
}

// NewMockApiCreateCredentialsRequest creates a new mock instance.
func NewMockApiCreateCredentialsRequest(ctrl *gomock.Controller) *MockApiCreateCredentialsRequest {
	mock := &MockApiCreateCredentialsRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateCredentialsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateCredentialsRequest) EXPECT() *MockApiCreateCredentialsRequestMockRecorder {
	return m.recorder
}

// CreateCredentialsPayload mocks base method.
func (m *MockApiCreateCredentialsRequest) CreateCredentialsPayload(createCredentialsPayload loadbalancer.CreateCredentialsPayload) loadbalancer.ApiCreateCredentialsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentialsPayload", createCredentialsPayload)
	ret0, _ := ret[0].(loadbalancer.ApiCreateCredentialsRequest)
	return ret0
}

// CreateCredentialsPayload indicates an expected call of CreateCredentialsPayload.
func (mr *MockApiCreateCredentialsRequestMockRecorder) CreateCredentialsPayload(createCredentialsPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentialsPayload", reflect.TypeOf((*MockApiCreateCredentialsRequest)(nil).CreateCredentialsPayload), createCredentialsPayload)
}

// Execute mocks base method.
func (m *MockApiCreateCredentialsRequest) Execute() (*loadbalancer.CreateCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*loadbalancer.CreateCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateCredentialsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateCredentialsRequest)(nil).Execute))
}

// XRequestID mocks base method.
func (m *MockApiCreateCredentialsRequest) XRequestID(xRequestID string) loadbalancer.ApiCreateCredentialsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRequestID", xRequestID)
	ret0, _ := ret[0].(loadbalancer.ApiCreateCredentialsRequest)
	return ret0
}

// XRequestID indicates an expected call of XRequestID.
func (mr *MockApiCreateCredentialsRequestMockRecorder) XRequestID(xRequestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRequestID", reflect.TypeOf((*MockApiCreateCredentialsRequest)(nil).XRequestID), xRequestID)
}

// MockApiCreateLoadBalancerRequest is a mock of ApiCreateLoadBalancerRequest interface.
type MockApiCreateLoadBalancerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiCreateLoadBalancerRequestMockRecorder
	isgomock struct{}
}

// MockApiCreateLoadBalancerRequestMockRecorder is the mock recorder for MockApiCreateLoadBalancerRequest.
type MockApiCreateLoadBalancerRequestMockRecorder struct {
	mock *MockApiCreateLoadBalancerRequest
}

// NewMockApiCreateLoadBalancerRequest creates a new mock instance.
func NewMockApiCreateLoadBalancerRequest(ctrl *gomock.Controller) *MockApiCreateLoadBalancerRequest {
	mock := &MockApiCreateLoadBalancerRequest{ctrl: ctrl}
	mock.recorder = &MockApiCreateLoadBalancerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiCreateLoadBalancerRequest) EXPECT() *MockApiCreateLoadBalancerRequestMockRecorder {
	return m.recorder
}

// CreateLoadBalancerPayload mocks base method.
func (m *MockApiCreateLoadBalancerRequest) CreateLoadBalancerPayload(createLoadBalancerPayload loadbalancer.CreateLoadBalancerPayload) loadbalancer.ApiCreateLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancerPayload", createLoadBalancerPayload)
	ret0, _ := ret[0].(loadbalancer.ApiCreateLoadBalancerRequest)
	return ret0
}

// CreateLoadBalancerPayload indicates an expected call of CreateLoadBalancerPayload.
func (mr *MockApiCreateLoadBalancerRequestMockRecorder) CreateLoadBalancerPayload(createLoadBalancerPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerPayload", reflect.TypeOf((*MockApiCreateLoadBalancerRequest)(nil).CreateLoadBalancerPayload), createLoadBalancerPayload)
}

// Execute mocks base method.
func (m *MockApiCreateLoadBalancerRequest) Execute() (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiCreateLoadBalancerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiCreateLoadBalancerRequest)(nil).Execute))
}

// XRequestID mocks base method.
func (m *MockApiCreateLoadBalancerRequest) XRequestID(xRequestID string) loadbalancer.ApiCreateLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XRequestID", xRequestID)
	ret0, _ := ret[0].(loadbalancer.ApiCreateLoadBalancerRequest)
	return ret0
}

// XRequestID indicates an expected call of XRequestID.
func (mr *MockApiCreateLoadBalancerRequestMockRecorder) XRequestID(xRequestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XRequestID", reflect.TypeOf((*MockApiCreateLoadBalancerRequest)(nil).XRequestID), xRequestID)
}

// MockApiDeleteCredentialsRequest is a mock of ApiDeleteCredentialsRequest interface.
type MockApiDeleteCredentialsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteCredentialsRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteCredentialsRequestMockRecorder is the mock recorder for MockApiDeleteCredentialsRequest.
type MockApiDeleteCredentialsRequestMockRecorder struct {
	mock *MockApiDeleteCredentialsRequest
}

// NewMockApiDeleteCredentialsRequest creates a new mock instance.
func NewMockApiDeleteCredentialsRequest(ctrl *gomock.Controller) *MockApiDeleteCredentialsRequest {
	mock := &MockApiDeleteCredentialsRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteCredentialsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteCredentialsRequest) EXPECT() *MockApiDeleteCredentialsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteCredentialsRequest) Execute() (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteCredentialsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteCredentialsRequest)(nil).Execute))
}

// MockApiDeleteLoadBalancerRequest is a mock of ApiDeleteLoadBalancerRequest interface.
type MockApiDeleteLoadBalancerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiDeleteLoadBalancerRequestMockRecorder
	isgomock struct{}
}

// MockApiDeleteLoadBalancerRequestMockRecorder is the mock recorder for MockApiDeleteLoadBalancerRequest.
type MockApiDeleteLoadBalancerRequestMockRecorder struct {
	mock *MockApiDeleteLoadBalancerRequest
}

// NewMockApiDeleteLoadBalancerRequest creates a new mock instance.
func NewMockApiDeleteLoadBalancerRequest(ctrl *gomock.Controller) *MockApiDeleteLoadBalancerRequest {
	mock := &MockApiDeleteLoadBalancerRequest{ctrl: ctrl}
	mock.recorder = &MockApiDeleteLoadBalancerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiDeleteLoadBalancerRequest) EXPECT() *MockApiDeleteLoadBalancerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiDeleteLoadBalancerRequest) Execute() (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiDeleteLoadBalancerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiDeleteLoadBalancerRequest)(nil).Execute))
}

// MockApiGetCredentialsRequest is a mock of ApiGetCredentialsRequest interface.
type MockApiGetCredentialsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetCredentialsRequestMockRecorder
	isgomock struct{}
}

// MockApiGetCredentialsRequestMockRecorder is the mock recorder for MockApiGetCredentialsRequest.
type MockApiGetCredentialsRequestMockRecorder struct {
	mock *MockApiGetCredentialsRequest
}

// NewMockApiGetCredentialsRequest creates a new mock instance.
func NewMockApiGetCredentialsRequest(ctrl *gomock.Controller) *MockApiGetCredentialsRequest {
	mock := &MockApiGetCredentialsRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetCredentialsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetCredentialsRequest) EXPECT() *MockApiGetCredentialsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetCredentialsRequest) Execute() (*loadbalancer.GetCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*loadbalancer.GetCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetCredentialsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetCredentialsRequest)(nil).Execute))
}

// MockApiGetLoadBalancerRequest is a mock of ApiGetLoadBalancerRequest interface.
type MockApiGetLoadBalancerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetLoadBalancerRequestMockRecorder
	isgomock struct{}
}

// MockApiGetLoadBalancerRequestMockRecorder is the mock recorder for MockApiGetLoadBalancerRequest.
type MockApiGetLoadBalancerRequestMockRecorder struct {
	mock *MockApiGetLoadBalancerRequest
}

// NewMockApiGetLoadBalancerRequest creates a new mock instance.
func NewMockApiGetLoadBalancerRequest(ctrl *gomock.Controller) *MockApiGetLoadBalancerRequest {
	mock := &MockApiGetLoadBalancerRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetLoadBalancerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetLoadBalancerRequest) EXPECT() *MockApiGetLoadBalancerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetLoadBalancerRequest) Execute() (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetLoadBalancerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetLoadBalancerRequest)(nil).Execute))
}

// MockApiGetQuotaRequest is a mock of ApiGetQuotaRequest interface.
type MockApiGetQuotaRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiGetQuotaRequestMockRecorder
	isgomock struct{}
}

// MockApiGetQuotaRequestMockRecorder is the mock recorder for MockApiGetQuotaRequest.
type MockApiGetQuotaRequestMockRecorder struct {
	mock *MockApiGetQuotaRequest
}

// NewMockApiGetQuotaRequest creates a new mock instance.
func NewMockApiGetQuotaRequest(ctrl *gomock.Controller) *MockApiGetQuotaRequest {
	mock := &MockApiGetQuotaRequest{ctrl: ctrl}
	mock.recorder = &MockApiGetQuotaRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiGetQuotaRequest) EXPECT() *MockApiGetQuotaRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiGetQuotaRequest) Execute() (*loadbalancer.GetQuotaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*loadbalancer.GetQuotaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiGetQuotaRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiGetQuotaRequest)(nil).Execute))
}

// MockApiListCredentialsRequest is a mock of ApiListCredentialsRequest interface.
type MockApiListCredentialsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListCredentialsRequestMockRecorder
	isgomock struct{}
}

// MockApiListCredentialsRequestMockRecorder is the mock recorder for MockApiListCredentialsRequest.
type MockApiListCredentialsRequestMockRecorder struct {
	mock *MockApiListCredentialsRequest
}

// NewMockApiListCredentialsRequest creates a new mock instance.
func NewMockApiListCredentialsRequest(ctrl *gomock.Controller) *MockApiListCredentialsRequest {
	mock := &MockApiListCredentialsRequest{ctrl: ctrl}
	mock.recorder = &MockApiListCredentialsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListCredentialsRequest) EXPECT() *MockApiListCredentialsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListCredentialsRequest) Execute() (*loadbalancer.ListCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*loadbalancer.ListCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListCredentialsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListCredentialsRequest)(nil).Execute))
}

// MockApiListLoadBalancersRequest is a mock of ApiListLoadBalancersRequest interface.
type MockApiListLoadBalancersRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListLoadBalancersRequestMockRecorder
	isgomock struct{}
}

// MockApiListLoadBalancersRequestMockRecorder is the mock recorder for MockApiListLoadBalancersRequest.
type MockApiListLoadBalancersRequestMockRecorder struct {
	mock *MockApiListLoadBalancersRequest
}

// NewMockApiListLoadBalancersRequest creates a new mock instance.
func NewMockApiListLoadBalancersRequest(ctrl *gomock.Controller) *MockApiListLoadBalancersRequest {
	mock := &MockApiListLoadBalancersRequest{ctrl: ctrl}
	mock.recorder = &MockApiListLoadBalancersRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListLoadBalancersRequest) EXPECT() *MockApiListLoadBalancersRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListLoadBalancersRequest) Execute() (*loadbalancer.ListLoadBalancersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*loadbalancer.ListLoadBalancersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListLoadBalancersRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListLoadBalancersRequest)(nil).Execute))
}

// PageId mocks base method.
func (m *MockApiListLoadBalancersRequest) PageId(pageId string) loadbalancer.ApiListLoadBalancersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageId", pageId)
	ret0, _ := ret[0].(loadbalancer.ApiListLoadBalancersRequest)
	return ret0
}

// PageId indicates an expected call of PageId.
func (mr *MockApiListLoadBalancersRequestMockRecorder) PageId(pageId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageId", reflect.TypeOf((*MockApiListLoadBalancersRequest)(nil).PageId), pageId)
}

// PageSize mocks base method.
func (m *MockApiListLoadBalancersRequest) PageSize(pageSize string) loadbalancer.ApiListLoadBalancersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PageSize", pageSize)
	ret0, _ := ret[0].(loadbalancer.ApiListLoadBalancersRequest)
	return ret0
}

// PageSize indicates an expected call of PageSize.
func (mr *MockApiListLoadBalancersRequestMockRecorder) PageSize(pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageSize", reflect.TypeOf((*MockApiListLoadBalancersRequest)(nil).PageSize), pageSize)
}

// MockApiListPlansRequest is a mock of ApiListPlansRequest interface.
type MockApiListPlansRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiListPlansRequestMockRecorder
	isgomock struct{}
}

// MockApiListPlansRequestMockRecorder is the mock recorder for MockApiListPlansRequest.
type MockApiListPlansRequestMockRecorder struct {
	mock *MockApiListPlansRequest
}

// NewMockApiListPlansRequest creates a new mock instance.
func NewMockApiListPlansRequest(ctrl *gomock.Controller) *MockApiListPlansRequest {
	mock := &MockApiListPlansRequest{ctrl: ctrl}
	mock.recorder = &MockApiListPlansRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiListPlansRequest) EXPECT() *MockApiListPlansRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiListPlansRequest) Execute() (*loadbalancer.ListPlansResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*loadbalancer.ListPlansResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiListPlansRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiListPlansRequest)(nil).Execute))
}

// MockApiUpdateCredentialsRequest is a mock of ApiUpdateCredentialsRequest interface.
type MockApiUpdateCredentialsRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateCredentialsRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateCredentialsRequestMockRecorder is the mock recorder for MockApiUpdateCredentialsRequest.
type MockApiUpdateCredentialsRequestMockRecorder struct {
	mock *MockApiUpdateCredentialsRequest
}

// NewMockApiUpdateCredentialsRequest creates a new mock instance.
func NewMockApiUpdateCredentialsRequest(ctrl *gomock.Controller) *MockApiUpdateCredentialsRequest {
	mock := &MockApiUpdateCredentialsRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateCredentialsRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateCredentialsRequest) EXPECT() *MockApiUpdateCredentialsRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateCredentialsRequest) Execute() (*loadbalancer.UpdateCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*loadbalancer.UpdateCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateCredentialsRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateCredentialsRequest)(nil).Execute))
}

// UpdateCredentialsPayload mocks base method.
func (m *MockApiUpdateCredentialsRequest) UpdateCredentialsPayload(updateCredentialsPayload loadbalancer.UpdateCredentialsPayload) loadbalancer.ApiUpdateCredentialsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentialsPayload", updateCredentialsPayload)
	ret0, _ := ret[0].(loadbalancer.ApiUpdateCredentialsRequest)
	return ret0
}

// UpdateCredentialsPayload indicates an expected call of UpdateCredentialsPayload.
func (mr *MockApiUpdateCredentialsRequestMockRecorder) UpdateCredentialsPayload(updateCredentialsPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentialsPayload", reflect.TypeOf((*MockApiUpdateCredentialsRequest)(nil).UpdateCredentialsPayload), updateCredentialsPayload)
}

// MockApiUpdateLoadBalancerRequest is a mock of ApiUpdateLoadBalancerRequest interface.
type MockApiUpdateLoadBalancerRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateLoadBalancerRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateLoadBalancerRequestMockRecorder is the mock recorder for MockApiUpdateLoadBalancerRequest.
type MockApiUpdateLoadBalancerRequestMockRecorder struct {
	mock *MockApiUpdateLoadBalancerRequest
}

// NewMockApiUpdateLoadBalancerRequest creates a new mock instance.
func NewMockApiUpdateLoadBalancerRequest(ctrl *gomock.Controller) *MockApiUpdateLoadBalancerRequest {
	mock := &MockApiUpdateLoadBalancerRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateLoadBalancerRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateLoadBalancerRequest) EXPECT() *MockApiUpdateLoadBalancerRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateLoadBalancerRequest) Execute() (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateLoadBalancerRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateLoadBalancerRequest)(nil).Execute))
}

// UpdateLoadBalancerPayload mocks base method.
func (m *MockApiUpdateLoadBalancerRequest) UpdateLoadBalancerPayload(updateLoadBalancerPayload loadbalancer.UpdateLoadBalancerPayload) loadbalancer.ApiUpdateLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerPayload", updateLoadBalancerPayload)
	ret0, _ := ret[0].(loadbalancer.ApiUpdateLoadBalancerRequest)
	return ret0
}

// UpdateLoadBalancerPayload indicates an expected call of UpdateLoadBalancerPayload.
func (mr *MockApiUpdateLoadBalancerRequestMockRecorder) UpdateLoadBalancerPayload(updateLoadBalancerPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerPayload", reflect.TypeOf((*MockApiUpdateLoadBalancerRequest)(nil).UpdateLoadBalancerPayload), updateLoadBalancerPayload)
}

// MockApiUpdateTargetPoolRequest is a mock of ApiUpdateTargetPoolRequest interface.
type MockApiUpdateTargetPoolRequest struct {
	ctrl     *gomock.Controller
	recorder *MockApiUpdateTargetPoolRequestMockRecorder
	isgomock struct{}
}

// MockApiUpdateTargetPoolRequestMockRecorder is the mock recorder for MockApiUpdateTargetPoolRequest.
type MockApiUpdateTargetPoolRequestMockRecorder struct {
	mock *MockApiUpdateTargetPoolRequest
}

// NewMockApiUpdateTargetPoolRequest creates a new mock instance.
func NewMockApiUpdateTargetPoolRequest(ctrl *gomock.Controller) *MockApiUpdateTargetPoolRequest {
	mock := &MockApiUpdateTargetPoolRequest{ctrl: ctrl}
	mock.recorder = &MockApiUpdateTargetPoolRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiUpdateTargetPoolRequest) EXPECT() *MockApiUpdateTargetPoolRequestMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockApiUpdateTargetPoolRequest) Execute() (*loadbalancer.TargetPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(*loadbalancer.TargetPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockApiUpdateTargetPoolRequestMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockApiUpdateTargetPoolRequest)(nil).Execute))
}

// UpdateTargetPoolPayload mocks base method.
func (m *MockApiUpdateTargetPoolRequest) UpdateTargetPoolPayload(updateTargetPoolPayload loadbalancer.UpdateTargetPoolPayload) loadbalancer.ApiUpdateTargetPoolRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetPoolPayload", updateTargetPoolPayload)
	ret0, _ := ret[0].(loadbalancer.ApiUpdateTargetPoolRequest)
	return ret0
}

// UpdateTargetPoolPayload indicates an expected call of UpdateTargetPoolPayload.
func (mr *MockApiUpdateTargetPoolRequestMockRecorder) UpdateTargetPoolPayload(updateTargetPoolPayload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetPoolPayload", reflect.TypeOf((*MockApiUpdateTargetPoolRequest)(nil).UpdateTargetPoolPayload), updateTargetPoolPayload)
}

// MockDefaultApi is a mock of DefaultApi interface.
type MockDefaultApi struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultApiMockRecorder
	isgomock struct{}
}

// MockDefaultApiMockRecorder is the mock recorder for MockDefaultApi.
type MockDefaultApiMockRecorder struct {
	mock *MockDefaultApi
}

// NewMockDefaultApi creates a new mock instance.
func NewMockDefaultApi(ctrl *gomock.Controller) *MockDefaultApi {
	mock := &MockDefaultApi{ctrl: ctrl}
	mock.recorder = &MockDefaultApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultApi) EXPECT() *MockDefaultApiMockRecorder {
	return m.recorder
}

// CreateCredentials mocks base method.
func (m *MockDefaultApi) CreateCredentials(ctx context.Context, projectId, region string) loadbalancer.ApiCreateCredentialsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentials", ctx, projectId, region)
	ret0, _ := ret[0].(loadbalancer.ApiCreateCredentialsRequest)
	return ret0
}

// CreateCredentials indicates an expected call of CreateCredentials.
func (mr *MockDefaultApiMockRecorder) CreateCredentials(ctx, projectId, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentials", reflect.TypeOf((*MockDefaultApi)(nil).CreateCredentials), ctx, projectId, region)
}

// CreateCredentialsExecute mocks base method.
func (m *MockDefaultApi) CreateCredentialsExecute(ctx context.Context, projectId, region string) (*loadbalancer.CreateCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentialsExecute", ctx, projectId, region)
	ret0, _ := ret[0].(*loadbalancer.CreateCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredentialsExecute indicates an expected call of CreateCredentialsExecute.
func (mr *MockDefaultApiMockRecorder) CreateCredentialsExecute(ctx, projectId, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentialsExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateCredentialsExecute), ctx, projectId, region)
}

// CreateLoadBalancer mocks base method.
func (m *MockDefaultApi) CreateLoadBalancer(ctx context.Context, projectId, region string) loadbalancer.ApiCreateLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancer", ctx, projectId, region)
	ret0, _ := ret[0].(loadbalancer.ApiCreateLoadBalancerRequest)
	return ret0
}

// CreateLoadBalancer indicates an expected call of CreateLoadBalancer.
func (mr *MockDefaultApiMockRecorder) CreateLoadBalancer(ctx, projectId, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancer", reflect.TypeOf((*MockDefaultApi)(nil).CreateLoadBalancer), ctx, projectId, region)
}

// CreateLoadBalancerExecute mocks base method.
func (m *MockDefaultApi) CreateLoadBalancerExecute(ctx context.Context, projectId, region string) (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoadBalancerExecute", ctx, projectId, region)
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoadBalancerExecute indicates an expected call of CreateLoadBalancerExecute.
func (mr *MockDefaultApiMockRecorder) CreateLoadBalancerExecute(ctx, projectId, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoadBalancerExecute", reflect.TypeOf((*MockDefaultApi)(nil).CreateLoadBalancerExecute), ctx, projectId, region)
}

// DeleteCredentials mocks base method.
func (m *MockDefaultApi) DeleteCredentials(ctx context.Context, projectId, region, credentialsRef string) loadbalancer.ApiDeleteCredentialsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", ctx, projectId, region, credentialsRef)
	ret0, _ := ret[0].(loadbalancer.ApiDeleteCredentialsRequest)
	return ret0
}

// DeleteCredentials indicates an expected call of DeleteCredentials.
func (mr *MockDefaultApiMockRecorder) DeleteCredentials(ctx, projectId, region, credentialsRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockDefaultApi)(nil).DeleteCredentials), ctx, projectId, region, credentialsRef)
}

// DeleteCredentialsExecute mocks base method.
func (m *MockDefaultApi) DeleteCredentialsExecute(ctx context.Context, projectId, region, credentialsRef string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentialsExecute", ctx, projectId, region, credentialsRef)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCredentialsExecute indicates an expected call of DeleteCredentialsExecute.
func (mr *MockDefaultApiMockRecorder) DeleteCredentialsExecute(ctx, projectId, region, credentialsRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentialsExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteCredentialsExecute), ctx, projectId, region, credentialsRef)
}

// DeleteLoadBalancer mocks base method.
func (m *MockDefaultApi) DeleteLoadBalancer(ctx context.Context, projectId, region, name string) loadbalancer.ApiDeleteLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancer", ctx, projectId, region, name)
	ret0, _ := ret[0].(loadbalancer.ApiDeleteLoadBalancerRequest)
	return ret0
}

// DeleteLoadBalancer indicates an expected call of DeleteLoadBalancer.
func (mr *MockDefaultApiMockRecorder) DeleteLoadBalancer(ctx, projectId, region, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancer", reflect.TypeOf((*MockDefaultApi)(nil).DeleteLoadBalancer), ctx, projectId, region, name)
}

// DeleteLoadBalancerExecute mocks base method.
func (m *MockDefaultApi) DeleteLoadBalancerExecute(ctx context.Context, projectId, region, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoadBalancerExecute", ctx, projectId, region, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteLoadBalancerExecute indicates an expected call of DeleteLoadBalancerExecute.
func (mr *MockDefaultApiMockRecorder) DeleteLoadBalancerExecute(ctx, projectId, region, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoadBalancerExecute", reflect.TypeOf((*MockDefaultApi)(nil).DeleteLoadBalancerExecute), ctx, projectId, region, name)
}

// GetCredentials mocks base method.
func (m *MockDefaultApi) GetCredentials(ctx context.Context, projectId, region, credentialsRef string) loadbalancer.ApiGetCredentialsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", ctx, projectId, region, credentialsRef)
	ret0, _ := ret[0].(loadbalancer.ApiGetCredentialsRequest)
	return ret0
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockDefaultApiMockRecorder) GetCredentials(ctx, projectId, region, credentialsRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockDefaultApi)(nil).GetCredentials), ctx, projectId, region, credentialsRef)
}

// GetCredentialsExecute mocks base method.
func (m *MockDefaultApi) GetCredentialsExecute(ctx context.Context, projectId, region, credentialsRef string) (*loadbalancer.GetCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentialsExecute", ctx, projectId, region, credentialsRef)
	ret0, _ := ret[0].(*loadbalancer.GetCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentialsExecute indicates an expected call of GetCredentialsExecute.
func (mr *MockDefaultApiMockRecorder) GetCredentialsExecute(ctx, projectId, region, credentialsRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentialsExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetCredentialsExecute), ctx, projectId, region, credentialsRef)
}

// GetLoadBalancer mocks base method.
func (m *MockDefaultApi) GetLoadBalancer(ctx context.Context, projectId, region, name string) loadbalancer.ApiGetLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancer", ctx, projectId, region, name)
	ret0, _ := ret[0].(loadbalancer.ApiGetLoadBalancerRequest)
	return ret0
}

// GetLoadBalancer indicates an expected call of GetLoadBalancer.
func (mr *MockDefaultApiMockRecorder) GetLoadBalancer(ctx, projectId, region, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancer", reflect.TypeOf((*MockDefaultApi)(nil).GetLoadBalancer), ctx, projectId, region, name)
}

// GetLoadBalancerExecute mocks base method.
func (m *MockDefaultApi) GetLoadBalancerExecute(ctx context.Context, projectId, region, name string) (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoadBalancerExecute", ctx, projectId, region, name)
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoadBalancerExecute indicates an expected call of GetLoadBalancerExecute.
func (mr *MockDefaultApiMockRecorder) GetLoadBalancerExecute(ctx, projectId, region, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetLoadBalancerExecute), ctx, projectId, region, name)
}

// GetQuota mocks base method.
func (m *MockDefaultApi) GetQuota(ctx context.Context, projectId, region string) loadbalancer.ApiGetQuotaRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", ctx, projectId, region)
	ret0, _ := ret[0].(loadbalancer.ApiGetQuotaRequest)
	return ret0
}

// GetQuota indicates an expected call of GetQuota.
func (mr *MockDefaultApiMockRecorder) GetQuota(ctx, projectId, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockDefaultApi)(nil).GetQuota), ctx, projectId, region)
}

// GetQuotaExecute mocks base method.
func (m *MockDefaultApi) GetQuotaExecute(ctx context.Context, projectId, region string) (*loadbalancer.GetQuotaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuotaExecute", ctx, projectId, region)
	ret0, _ := ret[0].(*loadbalancer.GetQuotaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotaExecute indicates an expected call of GetQuotaExecute.
func (mr *MockDefaultApiMockRecorder) GetQuotaExecute(ctx, projectId, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotaExecute", reflect.TypeOf((*MockDefaultApi)(nil).GetQuotaExecute), ctx, projectId, region)
}

// ListCredentials mocks base method.
func (m *MockDefaultApi) ListCredentials(ctx context.Context, projectId, region string) loadbalancer.ApiListCredentialsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCredentials", ctx, projectId, region)
	ret0, _ := ret[0].(loadbalancer.ApiListCredentialsRequest)
	return ret0
}

// ListCredentials indicates an expected call of ListCredentials.
func (mr *MockDefaultApiMockRecorder) ListCredentials(ctx, projectId, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCredentials", reflect.TypeOf((*MockDefaultApi)(nil).ListCredentials), ctx, projectId, region)
}

// ListCredentialsExecute mocks base method.
func (m *MockDefaultApi) ListCredentialsExecute(ctx context.Context, projectId, region string) (*loadbalancer.ListCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCredentialsExecute", ctx, projectId, region)
	ret0, _ := ret[0].(*loadbalancer.ListCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCredentialsExecute indicates an expected call of ListCredentialsExecute.
func (mr *MockDefaultApiMockRecorder) ListCredentialsExecute(ctx, projectId, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCredentialsExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListCredentialsExecute), ctx, projectId, region)
}

// ListLoadBalancers mocks base method.
func (m *MockDefaultApi) ListLoadBalancers(ctx context.Context, projectId, region string) loadbalancer.ApiListLoadBalancersRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadBalancers", ctx, projectId, region)
	ret0, _ := ret[0].(loadbalancer.ApiListLoadBalancersRequest)
	return ret0
}

// ListLoadBalancers indicates an expected call of ListLoadBalancers.
func (mr *MockDefaultApiMockRecorder) ListLoadBalancers(ctx, projectId, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancers", reflect.TypeOf((*MockDefaultApi)(nil).ListLoadBalancers), ctx, projectId, region)
}

// ListLoadBalancersExecute mocks base method.
func (m *MockDefaultApi) ListLoadBalancersExecute(ctx context.Context, projectId, region string) (*loadbalancer.ListLoadBalancersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLoadBalancersExecute", ctx, projectId, region)
	ret0, _ := ret[0].(*loadbalancer.ListLoadBalancersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLoadBalancersExecute indicates an expected call of ListLoadBalancersExecute.
func (mr *MockDefaultApiMockRecorder) ListLoadBalancersExecute(ctx, projectId, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLoadBalancersExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListLoadBalancersExecute), ctx, projectId, region)
}

// ListPlans mocks base method.
func (m *MockDefaultApi) ListPlans(ctx context.Context, region string) loadbalancer.ApiListPlansRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlans", ctx, region)
	ret0, _ := ret[0].(loadbalancer.ApiListPlansRequest)
	return ret0
}

// ListPlans indicates an expected call of ListPlans.
func (mr *MockDefaultApiMockRecorder) ListPlans(ctx, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlans", reflect.TypeOf((*MockDefaultApi)(nil).ListPlans), ctx, region)
}

// ListPlansExecute mocks base method.
func (m *MockDefaultApi) ListPlansExecute(ctx context.Context, region string) (*loadbalancer.ListPlansResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlansExecute", ctx, region)
	ret0, _ := ret[0].(*loadbalancer.ListPlansResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlansExecute indicates an expected call of ListPlansExecute.
func (mr *MockDefaultApiMockRecorder) ListPlansExecute(ctx, region any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlansExecute", reflect.TypeOf((*MockDefaultApi)(nil).ListPlansExecute), ctx, region)
}

// UpdateCredentials mocks base method.
func (m *MockDefaultApi) UpdateCredentials(ctx context.Context, projectId, region, credentialsRef string) loadbalancer.ApiUpdateCredentialsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentials", ctx, projectId, region, credentialsRef)
	ret0, _ := ret[0].(loadbalancer.ApiUpdateCredentialsRequest)
	return ret0
}

// UpdateCredentials indicates an expected call of UpdateCredentials.
func (mr *MockDefaultApiMockRecorder) UpdateCredentials(ctx, projectId, region, credentialsRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentials", reflect.TypeOf((*MockDefaultApi)(nil).UpdateCredentials), ctx, projectId, region, credentialsRef)
}

// UpdateCredentialsExecute mocks base method.
func (m *MockDefaultApi) UpdateCredentialsExecute(ctx context.Context, projectId, region, credentialsRef string) (*loadbalancer.UpdateCredentialsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentialsExecute", ctx, projectId, region, credentialsRef)
	ret0, _ := ret[0].(*loadbalancer.UpdateCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredentialsExecute indicates an expected call of UpdateCredentialsExecute.
func (mr *MockDefaultApiMockRecorder) UpdateCredentialsExecute(ctx, projectId, region, credentialsRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentialsExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateCredentialsExecute), ctx, projectId, region, credentialsRef)
}

// UpdateLoadBalancer mocks base method.
func (m *MockDefaultApi) UpdateLoadBalancer(ctx context.Context, projectId, region, name string) loadbalancer.ApiUpdateLoadBalancerRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancer", ctx, projectId, region, name)
	ret0, _ := ret[0].(loadbalancer.ApiUpdateLoadBalancerRequest)
	return ret0
}

// UpdateLoadBalancer indicates an expected call of UpdateLoadBalancer.
func (mr *MockDefaultApiMockRecorder) UpdateLoadBalancer(ctx, projectId, region, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancer", reflect.TypeOf((*MockDefaultApi)(nil).UpdateLoadBalancer), ctx, projectId, region, name)
}

// UpdateLoadBalancerExecute mocks base method.
func (m *MockDefaultApi) UpdateLoadBalancerExecute(ctx context.Context, projectId, region, name string) (*loadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoadBalancerExecute", ctx, projectId, region, name)
	ret0, _ := ret[0].(*loadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLoadBalancerExecute indicates an expected call of UpdateLoadBalancerExecute.
func (mr *MockDefaultApiMockRecorder) UpdateLoadBalancerExecute(ctx, projectId, region, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoadBalancerExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateLoadBalancerExecute), ctx, projectId, region, name)
}

// UpdateTargetPool mocks base method.
func (m *MockDefaultApi) UpdateTargetPool(ctx context.Context, projectId, region, name, targetPoolName string) loadbalancer.ApiUpdateTargetPoolRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetPool", ctx, projectId, region, name, targetPoolName)
	ret0, _ := ret[0].(loadbalancer.ApiUpdateTargetPoolRequest)
	return ret0
}

// UpdateTargetPool indicates an expected call of UpdateTargetPool.
func (mr *MockDefaultApiMockRecorder) UpdateTargetPool(ctx, projectId, region, name, targetPoolName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetPool", reflect.TypeOf((*MockDefaultApi)(nil).UpdateTargetPool), ctx, projectId, region, name, targetPoolName)
}

// UpdateTargetPoolExecute mocks base method.
func (m *MockDefaultApi) UpdateTargetPoolExecute(ctx context.Context, projectId, region, name, targetPoolName string) (*loadbalancer.TargetPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTargetPoolExecute", ctx, projectId, region, name, targetPoolName)
	ret0, _ := ret[0].(*loadbalancer.TargetPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTargetPoolExecute indicates an expected call of UpdateTargetPoolExecute.
func (mr *MockDefaultApiMockRecorder) UpdateTargetPoolExecute(ctx, projectId, region, name, targetPoolName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTargetPoolExecute", reflect.TypeOf((*MockDefaultApi)(nil).UpdateTargetPoolExecute), ctx, projectId, region, name, targetPoolName)
}
